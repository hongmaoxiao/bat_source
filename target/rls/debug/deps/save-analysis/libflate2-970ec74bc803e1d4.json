{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1","program":"/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","flate2","/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"miniz-sys\"","-C","metadata=970ec74bc803e1d4","-C","extra-filename=-970ec74bc803e1d4","--out-dir","/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","-L","dependency=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","--extern","libc=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/liblibc-45456c704780836c.rmeta","--extern","miniz_sys=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libminiz_sys-aa757d9a5afdc016.rmeta","--cap-lints","allow","-L","native=/Users/xhm/source/backend/rust/bat/target/rls/debug/build/miniz-sys-77d4bef14db9c0bc/out","--error-format=json","--sysroot","/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libflate2-970ec74bc803e1d4.rmeta"},"prelude":{"crate_id":{"name":"flate2","disambiguator":[8750927450939763015,12349878532001537943]},"crate_root":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src","external_crates":[{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":16,"id":{"name":"libc","disambiguator":[8000104344433599533,15219794654319678357]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","num":17,"id":{"name":"miniz_sys","disambiguator":[10498688789694648827,10628105795482890054]}}],"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":0,"byte_end":6803,"line_start":1,"line_end":204,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":848},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3310,"byte_end":3319,"line_start":90,"line_end":90,"column_start":13,"column_end":22},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":834},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3333,"byte_end":3341,"line_start":91,"line_end":91,"column_start":13,"column_end":21},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":866},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3357,"byte_end":3365,"line_start":92,"line_end":92,"column_start":15,"column_end":23},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":946},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3367,"byte_end":3380,"line_start":92,"line_end":92,"column_start":25,"column_end":38},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":941},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3382,"byte_end":3397,"line_start":92,"line_end":92,"column_start":40,"column_end":55},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":870},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3399,"byte_end":3409,"line_start":92,"line_end":92,"column_start":57,"column_end":67},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":951},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3411,"byte_end":3417,"line_start":92,"line_end":92,"column_start":69,"column_end":75},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":889},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3434,"byte_end":3447,"line_start":93,"line_end":93,"column_start":15,"column_end":28},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":918},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3449,"byte_end":3464,"line_start":93,"line_end":93,"column_start":30,"column_end":45},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":732},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3481,"byte_end":3484,"line_start":94,"line_end":94,"column_start":15,"column_end":18},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":737},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3486,"byte_end":3495,"line_start":94,"line_end":94,"column_start":20,"column_end":29},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":758},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3790,"byte_end":3804,"line_start":110,"line_end":110,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":699}},{"kind":"Use","ref_id":{"krate":0,"index":764},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3833,"byte_end":3847,"line_start":111,"line_end":111,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":699}},{"kind":"Use","ref_id":{"krate":0,"index":983},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3873,"byte_end":3884,"line_start":112,"line_end":112,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":699}},{"kind":"Use","ref_id":{"krate":0,"index":989},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3910,"byte_end":3921,"line_start":113,"line_end":113,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":699}},{"kind":"Use","ref_id":{"krate":0,"index":807},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3945,"byte_end":3954,"line_start":114,"line_end":114,"column_start":23,"column_end":32},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":699}},{"kind":"Use","ref_id":{"krate":0,"index":813},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3978,"byte_end":3987,"line_start":115,"line_end":115,"column_start":23,"column_end":32},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":699}},{"kind":"Use","ref_id":{"krate":0,"index":819},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4011,"byte_end":4025,"line_start":116,"line_end":116,"column_start":23,"column_end":37},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":699}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4243,"byte_end":4257,"line_start":124,"line_end":124,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":707}},{"kind":"Use","ref_id":{"krate":0,"index":776},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4287,"byte_end":4301,"line_start":125,"line_end":125,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":707}},{"kind":"Use","ref_id":{"krate":0,"index":995},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4328,"byte_end":4339,"line_start":126,"line_end":126,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":707}},{"kind":"Use","ref_id":{"krate":0,"index":1001},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4366,"byte_end":4377,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":707}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4402,"byte_end":4411,"line_start":128,"line_end":128,"column_start":24,"column_end":33},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":707}},{"kind":"Use","ref_id":{"krate":0,"index":744},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4639,"byte_end":4653,"line_start":136,"line_end":136,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":713}},{"kind":"Use","ref_id":{"krate":0,"index":751},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4685,"byte_end":4699,"line_start":137,"line_end":137,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":713}},{"kind":"Use","ref_id":{"krate":0,"index":969},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4728,"byte_end":4739,"line_start":138,"line_end":138,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":713}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4768,"byte_end":4779,"line_start":139,"line_end":139,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":713}},{"kind":"Use","ref_id":{"krate":0,"index":782},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4806,"byte_end":4815,"line_start":140,"line_end":140,"column_start":26,"column_end":35},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":713}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4842,"byte_end":4851,"line_start":141,"line_end":141,"column_start":26,"column_end":35},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":713}},{"kind":"Use","ref_id":{"krate":0,"index":799},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4878,"byte_end":4892,"line_start":142,"line_end":142,"column_start":26,"column_end":40},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":713}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":0,"byte_end":6803,"line_start":1,"line_end":204,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":49},{"krate":0,"index":78},{"krate":0,"index":212},{"krate":0,"index":246},{"krate":0,"index":451},{"krate":0,"index":515},{"krate":0,"index":566},{"krate":0,"index":699},{"krate":0,"index":707},{"krate":0,"index":713},{"krate":0,"index":721},{"krate":0,"index":1007},{"krate":0,"index":1021},{"krate":0,"index":1019},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1010},{"krate":0,"index":724},{"krate":0,"index":730}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"/ A DEFLATE-based stream compression/decompression library","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":0,"byte_end":60,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":61,"byte_end":64,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This library is meant to supplement/replace the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":65,"byte_end":116,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ `flate` library that was previously part of the standard rust distribution","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":117,"byte_end":195,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ providing a streaming encoder/decoder rather than purely","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":196,"byte_end":256,"line_start":5,"line_end":5,"column_start":1,"column_end":61}},{"value":"/ an in-memory encoder/decoder.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":257,"byte_end":290,"line_start":6,"line_end":6,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":291,"byte_end":294,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Like with [`flate`], flate2 is based on [`miniz.c`][1]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":295,"byte_end":353,"line_start":8,"line_end":8,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":354,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [1]: https://github.com/richgel999/miniz","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":358,"byte_end":402,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ [`flate`]: https://github.com/rust-lang/rust/tree/1.19.0/src/libflate","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":403,"byte_end":476,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":477,"byte_end":480,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Organization","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":481,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":500,"byte_end":503,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This crate consists mainly of three modules, [`read`], [`write`], and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":504,"byte_end":577,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/ [`bufread`]. Each module contains a number of types used to encode and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":578,"byte_end":652,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ decode various streams of data. All types in the [`write`] module work on","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":653,"byte_end":730,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ instances of [`Write`][write], whereas all types in the [`read`] module work on","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":731,"byte_end":814,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ instances of [`Read`][read] and [`bufread`] works with [`BufRead`][bufread].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":815,"byte_end":895,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":896,"byte_end":899,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":900,"byte_end":907,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use flate2::write::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":908,"byte_end":941,"line_start":22,"line_end":22,"column_start":1,"column_end":34}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":942,"byte_end":970,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":971,"byte_end":987,"line_start":24,"line_end":24,"column_start":1,"column_end":17}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":988,"byte_end":1016,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1017,"byte_end":1020,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # fn main() { let _ = run(); }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1021,"byte_end":1055,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ # fn run() -> io::Result<()> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1056,"byte_end":1090,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ let mut encoder = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1091,"byte_end":1164,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/ encoder.write(b\"Example\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1165,"byte_end":1196,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/ # Ok(())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1197,"byte_end":1209,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1210,"byte_end":1217,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1218,"byte_end":1225,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1226,"byte_end":1229,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1230,"byte_end":1233,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Other various types are provided at the top-level of the crate for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1234,"byte_end":1304,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/ management and dealing with encoders/decoders. Also note that types which","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1305,"byte_end":1382,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ operate over a specific trait often implement the mirroring trait as well.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1383,"byte_end":1461,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ For example a `flate2::read::DeflateDecoder<T>` *also* implements the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1462,"byte_end":1535,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ `Write` trait if `T: Write`. That is, the \"dual trait\" is forwarded directly","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1536,"byte_end":1616,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ to the underlying object if available.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1617,"byte_end":1659,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1660,"byte_end":1663,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [`read`]: read/index.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1664,"byte_end":1693,"line_start":43,"line_end":43,"column_start":1,"column_end":30}},{"value":"/ [`bufread`]: bufread/index.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1694,"byte_end":1729,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/ [`write`]: write/index.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1730,"byte_end":1761,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/ [read]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1762,"byte_end":1822,"line_start":46,"line_end":46,"column_start":1,"column_end":61}},{"value":"/ [write]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1823,"byte_end":1885,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ [bufread]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1886,"byte_end":1952,"line_start":48,"line_end":48,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1953,"byte_end":1956,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Async I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1957,"byte_end":1972,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1973,"byte_end":1976,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This crate optionally can support async I/O streams with the [Tokio stack] via","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":1977,"byte_end":2059,"line_start":52,"line_end":52,"column_start":1,"column_end":83}},{"value":"/ the `tokio` feature of this crate:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2060,"byte_end":2098,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2099,"byte_end":2102,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [Tokio stack]: https://tokio.rs/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2103,"byte_end":2139,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2140,"byte_end":2143,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2144,"byte_end":2155,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/ flate2 = { version = \"0.2\", features = [\"tokio\"] }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2156,"byte_end":2210,"line_start":58,"line_end":58,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2211,"byte_end":2218,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2219,"byte_end":2222,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ All methods are internally capable of working with streams that may return","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2223,"byte_end":2301,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/ [`ErrorKind::WouldBlock`] when they're not ready to perform the particular","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2302,"byte_end":2380,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ operation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2381,"byte_end":2395,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2396,"byte_end":2399,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`ErrorKind::WouldBlock`]: https://doc.rust-lang.org/std/io/enum.ErrorKind.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2400,"byte_end":2483,"line_start":65,"line_end":65,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2484,"byte_end":2487,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Note that care needs to be taken when using these objects, however. The","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2488,"byte_end":2563,"line_start":67,"line_end":67,"column_start":1,"column_end":76}},{"value":"/ Tokio runtime, in particular, requires that data is fully flushed before","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2564,"byte_end":2640,"line_start":68,"line_end":68,"column_start":1,"column_end":77}},{"value":"/ dropping streams. For compatibility with blocking streams all streams are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2641,"byte_end":2718,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ flushed/written when they are dropped, and this is not always a suitable","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2719,"byte_end":2795,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ time to perform I/O. If I/O streams are flushed before drop, however, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2796,"byte_end":2874,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ these operations will be a noop.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2875,"byte_end":2911,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2966,"byte_end":2988,"line_start":74,"line_end":74,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":2989,"byte_end":3028,"line_start":75,"line_end":75,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3029,"byte_end":3061,"line_start":76,"line_end":76,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":732},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9780,"byte_end":9783,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[{"value":"/ The CRC calculated by a [`CrcReader`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9664,"byte_end":9706,"line_start":9,"line_end":9,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9707,"byte_end":9710,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`CrcReader`]: struct.CrcReader.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9711,"byte_end":9751,"line_start":11,"line_end":11,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":737},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9979,"byte_end":9988,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[{"value":"/ A wrapper around a [`Read`] that calculates the CRC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9827,"byte_end":9883,"line_start":18,"line_end":18,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9884,"byte_end":9887,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":9888,"byte_end":9950,"line_start":20,"line_end":20,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10073,"byte_end":10076,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"pub fn new() -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[{"value":"/ Create a new CRC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10040,"byte_end":10061,"line_start":28,"line_end":28,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10149,"byte_end":10152,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"pub fn sum(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" bla\n","sig":null,"attributes":[{"value":"/ bla","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10130,"byte_end":10137,"line_start":33,"line_end":33,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10361,"byte_end":10367,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"pub fn amount(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[{"value":"/ The number of bytes that have been used to calculate the CRC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10204,"byte_end":10269,"line_start":38,"line_end":38,"column_start":5,"column_end":70}},{"value":"/ This value is only accurate if the amount is lower than 2<sup>32</sup>.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10274,"byte_end":10349,"line_start":39,"line_end":39,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10468,"byte_end":10474,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"pub fn update(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[{"value":"/ Update the CRC with the bytes in `data`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10412,"byte_end":10456,"line_start":44,"line_end":44,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10721,"byte_end":10726,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[{"value":"/ Reset the CRC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10691,"byte_end":10709,"line_start":52,"line_end":52,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10874,"byte_end":10881,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"pub fn combine(&mut Self, &Crc)","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[{"value":"/ Combine the CRC with the CRC for the subsequent block of bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10795,"byte_end":10862,"line_start":58,"line_end":58,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11284,"byte_end":11287,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"pub fn new(R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[{"value":"/ Create a new CrcReader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11245,"byte_end":11272,"line_start":70,"line_end":70,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11476,"byte_end":11479,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"pub fn crc(&Self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the Crc for this CrcReader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11429,"byte_end":11464,"line_start":80,"line_end":80,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11591,"byte_end":11601,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11526,"byte_end":11579,"line_start":85,"line_end":85,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11723,"byte_end":11730,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader by reference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11645,"byte_end":11711,"line_start":90,"line_end":90,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11865,"byte_end":11872,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the reader that is wrapped by this CrcReader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11777,"byte_end":11853,"line_start":95,"line_end":95,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11979,"byte_end":11984,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[{"value":"/ Reset the Crc in this CrcReader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11931,"byte_end":11967,"line_start":100,"line_end":100,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":744},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20046,"byte_end":20060,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19065,"byte_end":19102,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19103,"byte_end":19106,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and will read uncompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19107,"byte_end":19187,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19188,"byte_end":19260,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19261,"byte_end":19264,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19265,"byte_end":19333,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19334,"byte_end":19337,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19338,"byte_end":19352,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19353,"byte_end":19356,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19357,"byte_end":19364,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19365,"byte_end":19393,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19394,"byte_end":19410,"line_start":24,"line_end":24,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19411,"byte_end":19439,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::DeflateEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19440,"byte_end":19480,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19481,"byte_end":19503,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19504,"byte_end":19531,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19532,"byte_end":19535,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19536,"byte_end":19553,"line_start":30,"line_end":30,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", open_hello_world().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19554,"byte_end":19609,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19610,"byte_end":19617,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19618,"byte_end":19623,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19624,"byte_end":19694,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19695,"byte_end":19745,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/    let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19746,"byte_end":19801,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/    let b = BufReader::new(f);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19802,"byte_end":19835,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/    let mut deflater = DeflateEncoder::new(b, Compression::fast());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19836,"byte_end":19906,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/    let mut buffer = Vec::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19907,"byte_end":19942,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/    deflater.read_to_end(&mut buffer)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19943,"byte_end":19985,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/    Ok(buffer)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":19986,"byte_end":20003,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20004,"byte_end":20009,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20010,"byte_end":20017,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20276,"byte_end":20279,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"pub fn new(R, ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20143,"byte_end":20217,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20222,"byte_end":20264,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20940,"byte_end":20945,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20561,"byte_end":20630,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20635,"byte_end":20658,"line_start":68,"line_end":68,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20663,"byte_end":20666,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20671,"byte_end":20746,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20751,"byte_end":20823,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20828,"byte_end":20897,"line_start":72,"line_end":72,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20902,"byte_end":20928,"line_start":73,"line_end":73,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21115,"byte_end":21122,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21054,"byte_end":21103,"line_start":79,"line_end":79,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21367,"byte_end":21374,"line_start":88,"line_end":88,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21167,"byte_end":21224,"line_start":84,"line_end":84,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21229,"byte_end":21232,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21237,"byte_end":21309,"line_start":86,"line_end":86,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21314,"byte_end":21355,"line_start":87,"line_end":87,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21502,"byte_end":21512,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21431,"byte_end":21490,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21783,"byte_end":21791,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21554,"byte_end":21627,"line_start":97,"line_end":97,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21632,"byte_end":21635,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21640,"byte_end":21716,"line_start":99,"line_end":99,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21721,"byte_end":21771,"line_start":100,"line_end":100,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22025,"byte_end":22034,"line_start":109,"line_end":109,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21848,"byte_end":21913,"line_start":105,"line_end":105,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21918,"byte_end":21921,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":21926,"byte_end":21995,"line_start":107,"line_end":107,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22000,"byte_end":22013,"line_start":108,"line_end":108,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":751},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23855,"byte_end":23869,"line_start":172,"line_end":172,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22777,"byte_end":22816,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22817,"byte_end":22820,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and takes a stream of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22821,"byte_end":22896,"line_start":142,"line_end":142,"column_start":1,"column_end":76}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22897,"byte_end":22974,"line_start":143,"line_end":143,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22975,"byte_end":22978,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22979,"byte_end":23047,"line_start":145,"line_end":145,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23048,"byte_end":23051,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23052,"byte_end":23066,"line_start":147,"line_end":147,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23067,"byte_end":23070,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23071,"byte_end":23078,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23079,"byte_end":23107,"line_start":150,"line_end":150,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23108,"byte_end":23124,"line_start":151,"line_end":151,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23125,"byte_end":23155,"line_start":152,"line_end":152,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23156,"byte_end":23196,"line_start":153,"line_end":153,"column_start":1,"column_end":41}},{"value":"/ use flate2::bufread::DeflateDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23197,"byte_end":23237,"line_start":154,"line_end":154,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23238,"byte_end":23241,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23242,"byte_end":23259,"line_start":156,"line_end":156,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23260,"byte_end":23337,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23338,"byte_end":23380,"line_start":158,"line_end":158,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23381,"byte_end":23422,"line_start":159,"line_end":159,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23423,"byte_end":23478,"line_start":160,"line_end":160,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23479,"byte_end":23486,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23487,"byte_end":23570,"line_start":162,"line_end":162,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23571,"byte_end":23604,"line_start":163,"line_end":163,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23605,"byte_end":23665,"line_start":164,"line_end":164,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23666,"byte_end":23724,"line_start":165,"line_end":165,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23725,"byte_end":23758,"line_start":166,"line_end":166,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23759,"byte_end":23799,"line_start":167,"line_end":167,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23800,"byte_end":23812,"line_start":168,"line_end":168,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23813,"byte_end":23818,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":23819,"byte_end":23826,"line_start":170,"line_end":170,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24157,"byte_end":24160,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"pub fn new(R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24057,"byte_end":24129,"line_start":182,"line_end":182,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24134,"byte_end":24145,"line_start":183,"line_end":183,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24700,"byte_end":24705,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24328,"byte_end":24397,"line_start":193,"line_end":193,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24402,"byte_end":24425,"line_start":194,"line_end":194,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24430,"byte_end":24433,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24438,"byte_end":24508,"line_start":196,"line_end":196,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24513,"byte_end":24581,"line_start":197,"line_end":197,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24586,"byte_end":24657,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24662,"byte_end":24688,"line_start":199,"line_end":199,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24992,"byte_end":25002,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"pub fn reset_data(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[{"value":"/ Resets the state of this decoder's data","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24814,"byte_end":24857,"line_start":205,"line_end":205,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24862,"byte_end":24865,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder. It will continue","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24870,"byte_end":24942,"line_start":207,"line_end":207,"column_start":5,"column_end":77}},{"value":"/ reading from the same stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24947,"byte_end":24980,"line_start":208,"line_end":208,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25122,"byte_end":25129,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25061,"byte_end":25110,"line_start":213,"line_end":213,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25374,"byte_end":25381,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25174,"byte_end":25231,"line_start":218,"line_end":218,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25236,"byte_end":25239,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25244,"byte_end":25316,"line_start":220,"line_end":220,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25321,"byte_end":25362,"line_start":221,"line_end":221,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25509,"byte_end":25519,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25438,"byte_end":25497,"line_start":226,"line_end":226,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25788,"byte_end":25796,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25561,"byte_end":25628,"line_start":231,"line_end":231,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25633,"byte_end":25636,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25641,"byte_end":25709,"line_start":233,"line_end":233,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25714,"byte_end":25776,"line_start":234,"line_end":234,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25932,"byte_end":25941,"line_start":240,"line_end":240,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":25853,"byte_end":25920,"line_start":239,"line_end":239,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":758},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27810,"byte_end":27824,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":760}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":26883,"byte_end":26920,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":26921,"byte_end":26924,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":26925,"byte_end":27002,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27003,"byte_end":27075,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27076,"byte_end":27079,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27080,"byte_end":27142,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27143,"byte_end":27146,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27147,"byte_end":27161,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27162,"byte_end":27165,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27166,"byte_end":27173,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27174,"byte_end":27202,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27203,"byte_end":27219,"line_start":23,"line_end":23,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27220,"byte_end":27248,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::DeflateEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27249,"byte_end":27286,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27287,"byte_end":27290,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27291,"byte_end":27308,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", deflateencoder_read_hello_world().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27309,"byte_end":27379,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27380,"byte_end":27387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27388,"byte_end":27393,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ // Return a vector containing the Deflate compressed version of hello world","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27394,"byte_end":27473,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ fn deflateencoder_read_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27474,"byte_end":27539,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/    let mut ret_vec = [0;100];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27540,"byte_end":27573,"line_start":33,"line_end":33,"column_start":1,"column_end":34}},{"value":"/    let c = b\"hello world\";","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27574,"byte_end":27604,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/    let mut deflater = DeflateEncoder::new(&c[..], Compression::fast());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27605,"byte_end":27680,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/    let count = deflater.read(&mut ret_vec)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27681,"byte_end":27729,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/    Ok(ret_vec[0..count].to_vec())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27730,"byte_end":27767,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27768,"byte_end":27773,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27774,"byte_end":27781,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28054,"byte_end":28057,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"pub fn new(R, ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27921,"byte_end":27995,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28000,"byte_end":28042,"line_start":47,"line_end":47,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28789,"byte_end":28794,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28260,"byte_end":28329,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28334,"byte_end":28357,"line_start":57,"line_end":57,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28362,"byte_end":28365,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28370,"byte_end":28445,"line_start":59,"line_end":59,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28450,"byte_end":28522,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28527,"byte_end":28596,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28601,"byte_end":28627,"line_start":62,"line_end":62,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28632,"byte_end":28635,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28640,"byte_end":28712,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28717,"byte_end":28777,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28990,"byte_end":28997,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28929,"byte_end":28978,"line_start":71,"line_end":71,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29263,"byte_end":29270,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29063,"byte_end":29120,"line_start":76,"line_end":76,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29125,"byte_end":29128,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29133,"byte_end":29205,"line_start":78,"line_end":78,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29210,"byte_end":29251,"line_start":79,"line_end":79,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29611,"byte_end":29621,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29344,"byte_end":29403,"line_start":84,"line_end":84,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29408,"byte_end":29411,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29416,"byte_end":29491,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29496,"byte_end":29569,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29574,"byte_end":29599,"line_start":88,"line_end":88,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29920,"byte_end":29928,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29691,"byte_end":29764,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29769,"byte_end":29772,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29777,"byte_end":29853,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29858,"byte_end":29908,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30163,"byte_end":30172,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":29986,"byte_end":30051,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30056,"byte_end":30059,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30064,"byte_end":30133,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30138,"byte_end":30151,"line_start":104,"line_end":104,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":764},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31943,"byte_end":31957,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":766}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30877,"byte_end":30916,"line_start":136,"line_end":136,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30917,"byte_end":30920,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30921,"byte_end":30993,"line_start":138,"line_end":138,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30994,"byte_end":31071,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31072,"byte_end":31075,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31076,"byte_end":31138,"line_start":141,"line_end":141,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31139,"byte_end":31142,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31143,"byte_end":31157,"line_start":143,"line_end":143,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31158,"byte_end":31161,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31162,"byte_end":31169,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31170,"byte_end":31198,"line_start":146,"line_end":146,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31199,"byte_end":31215,"line_start":147,"line_end":147,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31216,"byte_end":31246,"line_start":148,"line_end":148,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31247,"byte_end":31287,"line_start":149,"line_end":149,"column_start":1,"column_end":41}},{"value":"/ use flate2::read::DeflateDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31288,"byte_end":31325,"line_start":150,"line_end":150,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31326,"byte_end":31329,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31330,"byte_end":31347,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31348,"byte_end":31425,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31426,"byte_end":31468,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31469,"byte_end":31510,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31511,"byte_end":31566,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31567,"byte_end":31574,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31575,"byte_end":31658,"line_start":158,"line_end":158,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31659,"byte_end":31692,"line_start":159,"line_end":159,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31693,"byte_end":31753,"line_start":160,"line_end":160,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31754,"byte_end":31812,"line_start":161,"line_end":161,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31813,"byte_end":31846,"line_start":162,"line_end":162,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31847,"byte_end":31887,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31888,"byte_end":31900,"line_start":164,"line_end":164,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31901,"byte_end":31906,"line_start":165,"line_end":165,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":31907,"byte_end":31914,"line_start":166,"line_end":166,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32156,"byte_end":32159,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"pub fn new(R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32056,"byte_end":32128,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32133,"byte_end":32144,"line_start":176,"line_end":176,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32477,"byte_end":32489,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"pub fn new_with_buf(R, Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32260,"byte_end":32329,"line_start":181,"line_end":181,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32334,"byte_end":32337,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of the intermediate buffer is never increased,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32342,"byte_end":32415,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ and it is recommended for it to be large.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32420,"byte_end":32465,"line_start":184,"line_end":184,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33209,"byte_end":33214,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32687,"byte_end":32756,"line_start":193,"line_end":193,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32761,"byte_end":32784,"line_start":194,"line_end":194,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32789,"byte_end":32792,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32797,"byte_end":32867,"line_start":196,"line_end":196,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32872,"byte_end":32940,"line_start":197,"line_end":197,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32945,"byte_end":33016,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33021,"byte_end":33047,"line_start":199,"line_end":199,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33052,"byte_end":33055,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33060,"byte_end":33132,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33137,"byte_end":33197,"line_start":202,"line_end":202,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33410,"byte_end":33417,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33349,"byte_end":33398,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33683,"byte_end":33690,"line_start":217,"line_end":217,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33483,"byte_end":33540,"line_start":213,"line_end":213,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33545,"byte_end":33548,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33553,"byte_end":33625,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33630,"byte_end":33671,"line_start":216,"line_end":216,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34031,"byte_end":34041,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33764,"byte_end":33823,"line_start":221,"line_end":221,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33828,"byte_end":33831,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33836,"byte_end":33911,"line_start":223,"line_end":223,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33916,"byte_end":33989,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":33994,"byte_end":34019,"line_start":225,"line_end":225,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34338,"byte_end":34346,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34111,"byte_end":34178,"line_start":230,"line_end":230,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34183,"byte_end":34186,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34191,"byte_end":34259,"line_start":232,"line_end":232,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34264,"byte_end":34326,"line_start":233,"line_end":233,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34483,"byte_end":34492,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34404,"byte_end":34471,"line_start":238,"line_end":238,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36077,"byte_end":36091,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":772}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35387,"byte_end":35424,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35425,"byte_end":35428,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35429,"byte_end":35502,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35503,"byte_end":35576,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35577,"byte_end":35580,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35581,"byte_end":35645,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35646,"byte_end":35649,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35650,"byte_end":35664,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35665,"byte_end":35668,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35669,"byte_end":35676,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35677,"byte_end":35705,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35706,"byte_end":35734,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35735,"byte_end":35773,"line_start":24,"line_end":24,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35774,"byte_end":35777,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35778,"byte_end":35856,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35857,"byte_end":35874,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35875,"byte_end":35878,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35879,"byte_end":35951,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35952,"byte_end":35989,"line_start":30,"line_end":30,"column_start":1,"column_end":38}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":35990,"byte_end":36032,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36033,"byte_end":36040,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36041,"byte_end":36048,"line_start":33,"line_end":33,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36421,"byte_end":36424,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"pub fn new(W, ::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36183,"byte_end":36255,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36260,"byte_end":36301,"line_start":41,"line_end":41,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36306,"byte_end":36309,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36314,"byte_end":36389,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36394,"byte_end":36409,"line_start":44,"line_end":44,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36653,"byte_end":36660,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36591,"byte_end":36641,"line_start":51,"line_end":51,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36937,"byte_end":36944,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36716,"byte_end":36774,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36779,"byte_end":36782,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36787,"byte_end":36863,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36868,"byte_end":36925,"line_start":59,"line_end":59,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37822,"byte_end":37827,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37008,"byte_end":37078,"line_start":64,"line_end":64,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37083,"byte_end":37106,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37111,"byte_end":37114,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37119,"byte_end":37193,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams. If the stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37198,"byte_end":37273,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/ cannot be finished an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37278,"byte_end":37322,"line_start":69,"line_end":69,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37327,"byte_end":37330,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37335,"byte_end":37411,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37416,"byte_end":37484,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37489,"byte_end":37563,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37568,"byte_end":37637,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37642,"byte_end":37645,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37650,"byte_end":37662,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37667,"byte_end":37670,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37675,"byte_end":37746,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37751,"byte_end":37810,"line_start":79,"line_end":79,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38592,"byte_end":38602,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":37977,"byte_end":38052,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38057,"byte_end":38060,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38065,"byte_end":38138,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38143,"byte_end":38219,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38224,"byte_end":38267,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38272,"byte_end":38275,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38280,"byte_end":38292,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38297,"byte_end":38300,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38305,"byte_end":38379,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38384,"byte_end":38407,"line_start":95,"line_end":95,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38412,"byte_end":38415,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38420,"byte_end":38432,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38437,"byte_end":38440,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38445,"byte_end":38516,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38521,"byte_end":38580,"line_start":100,"line_end":100,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39437,"byte_end":39443,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38673,"byte_end":38727,"line_start":105,"line_end":105,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38732,"byte_end":38735,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38740,"byte_end":38812,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38817,"byte_end":38876,"line_start":108,"line_end":108,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38881,"byte_end":38884,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38889,"byte_end":38965,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":38970,"byte_end":39045,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39050,"byte_end":39120,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39125,"byte_end":39198,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39203,"byte_end":39252,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39257,"byte_end":39260,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39265,"byte_end":39277,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39282,"byte_end":39285,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39290,"byte_end":39361,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39366,"byte_end":39425,"line_start":119,"line_end":119,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40133,"byte_end":40145,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"pub fn flush_finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39555,"byte_end":39609,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39614,"byte_end":39617,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39622,"byte_end":39698,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39703,"byte_end":39737,"line_start":128,"line_end":128,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39742,"byte_end":39806,"line_start":129,"line_end":129,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39811,"byte_end":39881,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39886,"byte_end":39948,"line_start":131,"line_end":131,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39953,"byte_end":39956,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39961,"byte_end":39973,"line_start":133,"line_end":133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39978,"byte_end":39981,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":39986,"byte_end":40057,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40062,"byte_end":40121,"line_start":136,"line_end":136,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40476,"byte_end":40484,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compresor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40256,"byte_end":40329,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40334,"byte_end":40337,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40342,"byte_end":40414,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40419,"byte_end":40464,"line_start":145,"line_end":145,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40727,"byte_end":40736,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40547,"byte_end":40612,"line_start":150,"line_end":150,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40617,"byte_end":40620,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40625,"byte_end":40697,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40702,"byte_end":40715,"line_start":153,"line_end":153,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":776},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42668,"byte_end":42682,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":778}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41494,"byte_end":41533,"line_start":186,"line_end":186,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41534,"byte_end":41537,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41538,"byte_end":41618,"line_start":188,"line_end":188,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41619,"byte_end":41665,"line_start":189,"line_end":189,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41666,"byte_end":41669,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41670,"byte_end":41733,"line_start":191,"line_end":191,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41734,"byte_end":41737,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41738,"byte_end":41752,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41753,"byte_end":41756,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41757,"byte_end":41764,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41765,"byte_end":41793,"line_start":196,"line_end":196,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41794,"byte_end":41810,"line_start":197,"line_end":197,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41811,"byte_end":41841,"line_start":198,"line_end":198,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41842,"byte_end":41882,"line_start":199,"line_end":199,"column_start":1,"column_end":41}},{"value":"/ use flate2::write::DeflateDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41883,"byte_end":41921,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41922,"byte_end":41925,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41926,"byte_end":41943,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41944,"byte_end":42021,"line_start":203,"line_end":203,"column_start":1,"column_end":78}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42022,"byte_end":42064,"line_start":204,"line_end":204,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42065,"byte_end":42106,"line_start":205,"line_end":205,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_writer(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42107,"byte_end":42162,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42163,"byte_end":42170,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42171,"byte_end":42254,"line_start":208,"line_end":208,"column_start":1,"column_end":84}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42255,"byte_end":42291,"line_start":209,"line_end":209,"column_start":1,"column_end":37}},{"value":"/ fn decode_writer(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42292,"byte_end":42352,"line_start":210,"line_end":210,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42353,"byte_end":42388,"line_start":211,"line_end":211,"column_start":1,"column_end":36}},{"value":"/    let mut deflater = DeflateDecoder::new(writer);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42389,"byte_end":42443,"line_start":212,"line_end":212,"column_start":1,"column_end":55}},{"value":"/    deflater.write(&bytes[..])?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42444,"byte_end":42479,"line_start":213,"line_end":213,"column_start":1,"column_end":36}},{"value":"/    writer = deflater.finish()?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42480,"byte_end":42515,"line_start":214,"line_end":214,"column_start":1,"column_end":36}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42516,"byte_end":42600,"line_start":215,"line_end":215,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42601,"byte_end":42625,"line_start":216,"line_end":216,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42626,"byte_end":42631,"line_start":217,"line_end":217,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42632,"byte_end":42639,"line_start":218,"line_end":218,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42972,"byte_end":42975,"line_start":230,"line_end":230,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"pub fn new(W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42777,"byte_end":42852,"line_start":226,"line_end":226,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42857,"byte_end":42860,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42865,"byte_end":42940,"line_start":228,"line_end":228,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42945,"byte_end":42960,"line_start":229,"line_end":229,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43177,"byte_end":43184,"line_start":237,"line_end":237,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43115,"byte_end":43165,"line_start":236,"line_end":236,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43461,"byte_end":43468,"line_start":245,"line_end":245,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43240,"byte_end":43298,"line_start":241,"line_end":241,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43303,"byte_end":43306,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43311,"byte_end":43387,"line_start":243,"line_end":243,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43392,"byte_end":43449,"line_start":244,"line_end":244,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44249,"byte_end":44254,"line_start":264,"line_end":264,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43532,"byte_end":43602,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43607,"byte_end":43630,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43635,"byte_end":43638,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43643,"byte_end":43717,"line_start":252,"line_end":252,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43722,"byte_end":43783,"line_start":253,"line_end":253,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43788,"byte_end":43791,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This will then reset the internal state of this decoder and replace the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43796,"byte_end":43871,"line_start":255,"line_end":255,"column_start":5,"column_end":80}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43876,"byte_end":43946,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":43951,"byte_end":44024,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44029,"byte_end":44055,"line_start":258,"line_end":258,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44060,"byte_end":44063,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44068,"byte_end":44080,"line_start":260,"line_end":260,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44085,"byte_end":44088,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, and if that I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44093,"byte_end":44165,"line_start":262,"line_end":262,"column_start":5,"column_end":77}},{"value":"/ returns an error then that will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44170,"byte_end":44237,"line_start":263,"line_end":263,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45000,"byte_end":45010,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44421,"byte_end":44496,"line_start":270,"line_end":270,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44501,"byte_end":44504,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44509,"byte_end":44582,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44587,"byte_end":44663,"line_start":273,"line_end":273,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44668,"byte_end":44711,"line_start":274,"line_end":274,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44716,"byte_end":44719,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44724,"byte_end":44736,"line_start":276,"line_end":276,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44741,"byte_end":44744,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44749,"byte_end":44823,"line_start":278,"line_end":278,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44828,"byte_end":44851,"line_start":279,"line_end":279,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44856,"byte_end":44859,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44864,"byte_end":44876,"line_start":281,"line_end":281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44881,"byte_end":44884,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, returning any","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44889,"byte_end":44959,"line_start":283,"line_end":283,"column_start":5,"column_end":75}},{"value":"/ errors which happen.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":44964,"byte_end":44988,"line_start":284,"line_end":284,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45824,"byte_end":45830,"line_start":304,"line_end":304,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45081,"byte_end":45135,"line_start":289,"line_end":289,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45140,"byte_end":45143,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45148,"byte_end":45224,"line_start":291,"line_end":291,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45229,"byte_end":45263,"line_start":292,"line_end":292,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45268,"byte_end":45271,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45276,"byte_end":45352,"line_start":294,"line_end":294,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45357,"byte_end":45432,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45437,"byte_end":45507,"line_start":296,"line_end":296,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45512,"byte_end":45585,"line_start":297,"line_end":297,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45590,"byte_end":45639,"line_start":298,"line_end":298,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45644,"byte_end":45647,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45652,"byte_end":45664,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45669,"byte_end":45672,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45677,"byte_end":45748,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45753,"byte_end":45812,"line_start":303,"line_end":303,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46197,"byte_end":46205,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":45942,"byte_end":46012,"line_start":309,"line_end":309,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46017,"byte_end":46035,"line_start":310,"line_end":310,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46040,"byte_end":46043,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46048,"byte_end":46114,"line_start":312,"line_end":312,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46119,"byte_end":46185,"line_start":313,"line_end":313,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46375,"byte_end":46384,"line_start":320,"line_end":320,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46268,"byte_end":46340,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46345,"byte_end":46363,"line_start":319,"line_end":319,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":782},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70170,"byte_end":70179,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69208,"byte_end":69236,"line_start":113,"line_end":113,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69237,"byte_end":69240,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will read uncompressed data","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69241,"byte_end":69324,"line_start":115,"line_end":115,"column_start":1,"column_end":84}},{"value":"/ from the underlying reader and expose the compressed version as a [`BufRead`]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69325,"byte_end":69406,"line_start":116,"line_end":116,"column_start":1,"column_end":82}},{"value":"/ interface.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69407,"byte_end":69421,"line_start":117,"line_end":117,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69422,"byte_end":69425,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69426,"byte_end":69494,"line_start":119,"line_end":119,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69495,"byte_end":69498,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69499,"byte_end":69513,"line_start":121,"line_end":121,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69514,"byte_end":69517,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69518,"byte_end":69525,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69526,"byte_end":69554,"line_start":124,"line_end":124,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69555,"byte_end":69571,"line_start":125,"line_end":125,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69572,"byte_end":69600,"line_start":126,"line_end":126,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69601,"byte_end":69636,"line_start":127,"line_end":127,"column_start":1,"column_end":36}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69637,"byte_end":69659,"line_start":128,"line_end":128,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69660,"byte_end":69687,"line_start":129,"line_end":129,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69688,"byte_end":69691,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69692,"byte_end":69771,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ // File wrapped in a BufReader implements BufRead","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69772,"byte_end":69825,"line_start":132,"line_end":132,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69826,"byte_end":69829,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69830,"byte_end":69880,"line_start":134,"line_end":134,"column_start":1,"column_end":51}},{"value":"/     let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69881,"byte_end":69937,"line_start":135,"line_end":135,"column_start":1,"column_end":57}},{"value":"/     let b = BufReader::new(f);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69938,"byte_end":69972,"line_start":136,"line_end":136,"column_start":1,"column_end":35}},{"value":"/     let mut gz = GzEncoder::new(b, Compression::fast());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":69973,"byte_end":70033,"line_start":137,"line_end":137,"column_start":1,"column_end":61}},{"value":"/     let mut buffer = Vec::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70034,"byte_end":70070,"line_start":138,"line_end":138,"column_start":1,"column_end":37}},{"value":"/     gz.read_to_end(&mut buffer)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70071,"byte_end":70108,"line_start":139,"line_end":139,"column_start":1,"column_end":38}},{"value":"/     Ok(buffer)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70109,"byte_end":70127,"line_start":140,"line_end":140,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70128,"byte_end":70133,"line_start":141,"line_end":141,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70134,"byte_end":70141,"line_start":142,"line_end":142,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70951,"byte_end":70954,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"pub fn new(R, Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70610,"byte_end":70679,"line_start":164,"line_end":164,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70684,"byte_end":70687,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70692,"byte_end":70763,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70768,"byte_end":70819,"line_start":167,"line_end":167,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70824,"byte_end":70827,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70832,"byte_end":70902,"line_start":169,"line_end":169,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70907,"byte_end":70939,"line_start":170,"line_end":170,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71709,"byte_end":71716,"line_start":196,"line_end":196,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71647,"byte_end":71697,"line_start":195,"line_end":195,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71983,"byte_end":71990,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71782,"byte_end":71840,"line_start":200,"line_end":200,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71845,"byte_end":71848,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71853,"byte_end":71925,"line_start":202,"line_end":202,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71930,"byte_end":71971,"line_start":203,"line_end":203,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":72133,"byte_end":72143,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":72064,"byte_end":72121,"line_start":208,"line_end":208,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":791},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74165,"byte_end":74174,"line_start":283,"line_end":283,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73136,"byte_end":73164,"line_start":249,"line_end":249,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73165,"byte_end":73168,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`ReadBuf`] interface that will consume compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73169,"byte_end":73248,"line_start":251,"line_end":251,"column_start":1,"column_end":80}},{"value":"/ data from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73249,"byte_end":73312,"line_start":252,"line_end":252,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73313,"byte_end":73316,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ [`ReadBuf`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73317,"byte_end":73385,"line_start":254,"line_end":254,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73386,"byte_end":73389,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73390,"byte_end":73404,"line_start":256,"line_end":256,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73405,"byte_end":73408,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73409,"byte_end":73416,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73417,"byte_end":73445,"line_start":259,"line_end":259,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73446,"byte_end":73462,"line_start":260,"line_end":260,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73463,"byte_end":73493,"line_start":261,"line_end":261,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73494,"byte_end":73529,"line_start":262,"line_end":262,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::GzDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73530,"byte_end":73565,"line_start":263,"line_end":263,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73566,"byte_end":73569,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73570,"byte_end":73587,"line_start":265,"line_end":265,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73588,"byte_end":73659,"line_start":266,"line_end":266,"column_start":1,"column_end":72}},{"value":"/ #   e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73660,"byte_end":73701,"line_start":267,"line_end":267,"column_start":1,"column_end":42}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73702,"byte_end":73742,"line_start":268,"line_end":268,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73743,"byte_end":73797,"line_start":269,"line_end":269,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73798,"byte_end":73805,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73806,"byte_end":73811,"line_start":271,"line_end":271,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73812,"byte_end":73890,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73891,"byte_end":73927,"line_start":273,"line_end":273,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73928,"byte_end":73931,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73932,"byte_end":73992,"line_start":275,"line_end":275,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":73993,"byte_end":74040,"line_start":276,"line_end":276,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74041,"byte_end":74074,"line_start":277,"line_end":277,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74075,"byte_end":74109,"line_start":278,"line_end":278,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74110,"byte_end":74122,"line_start":279,"line_end":279,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74123,"byte_end":74128,"line_start":280,"line_end":280,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74129,"byte_end":74136,"line_start":281,"line_end":281,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74438,"byte_end":74441,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"pub fn new(R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74333,"byte_end":74405,"line_start":291,"line_end":291,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74410,"byte_end":74426,"line_start":292,"line_end":292,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":75752,"byte_end":75758,"line_start":337,"line_end":337,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":75673,"byte_end":75740,"line_start":336,"line_end":336,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":75896,"byte_end":75903,"line_start":342,"line_end":342,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":75834,"byte_end":75884,"line_start":341,"line_end":341,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76170,"byte_end":76177,"line_start":350,"line_end":350,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":75969,"byte_end":76027,"line_start":346,"line_end":346,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76032,"byte_end":76035,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76040,"byte_end":76112,"line_start":348,"line_end":348,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76117,"byte_end":76158,"line_start":349,"line_end":349,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76322,"byte_end":76332,"line_start":355,"line_end":355,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76251,"byte_end":76310,"line_start":354,"line_end":354,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":799},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78625,"byte_end":78639,"line_start":429,"line_end":429,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77091,"byte_end":77161,"line_start":388,"line_end":388,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77162,"byte_end":77165,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77166,"byte_end":77246,"line_start":390,"line_end":390,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77247,"byte_end":77328,"line_start":391,"line_end":391,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream. `MultiGzDecoder` will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77329,"byte_end":77400,"line_start":392,"line_end":392,"column_start":1,"column_end":72}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77401,"byte_end":77474,"line_start":393,"line_end":393,"column_start":1,"column_end":74}},{"value":"/ the first gzip member. The multistream format is commonly used in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77475,"byte_end":77544,"line_start":394,"line_end":394,"column_start":1,"column_end":70}},{"value":"/ bioinformatics, for example when using the BGZF compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77545,"byte_end":77613,"line_start":395,"line_end":395,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77614,"byte_end":77617,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will consume all gzip members","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77618,"byte_end":77703,"line_start":397,"line_end":397,"column_start":1,"column_end":86}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77704,"byte_end":77762,"line_start":398,"line_end":398,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77763,"byte_end":77766,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77767,"byte_end":77835,"line_start":400,"line_end":400,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77836,"byte_end":77839,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77840,"byte_end":77854,"line_start":402,"line_end":402,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77855,"byte_end":77858,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77859,"byte_end":77866,"line_start":404,"line_end":404,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77867,"byte_end":77895,"line_start":405,"line_end":405,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77896,"byte_end":77912,"line_start":406,"line_end":406,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77913,"byte_end":77943,"line_start":407,"line_end":407,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77944,"byte_end":77979,"line_start":408,"line_end":408,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::MultiGzDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":77980,"byte_end":78020,"line_start":409,"line_end":409,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78021,"byte_end":78024,"line_start":410,"line_end":410,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78025,"byte_end":78042,"line_start":411,"line_end":411,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78043,"byte_end":78114,"line_start":412,"line_end":412,"column_start":1,"column_end":72}},{"value":"/ #   e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78115,"byte_end":78156,"line_start":413,"line_end":413,"column_start":1,"column_end":42}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78157,"byte_end":78197,"line_start":414,"line_end":414,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78198,"byte_end":78252,"line_start":415,"line_end":415,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78253,"byte_end":78260,"line_start":416,"line_end":416,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78261,"byte_end":78266,"line_start":417,"line_end":417,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78267,"byte_end":78345,"line_start":418,"line_end":418,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78346,"byte_end":78382,"line_start":419,"line_end":419,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78383,"byte_end":78386,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78387,"byte_end":78447,"line_start":421,"line_end":421,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78448,"byte_end":78500,"line_start":422,"line_end":422,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78501,"byte_end":78534,"line_start":423,"line_end":423,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78535,"byte_end":78569,"line_start":424,"line_end":424,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78570,"byte_end":78582,"line_start":425,"line_end":425,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78583,"byte_end":78588,"line_start":426,"line_end":426,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78589,"byte_end":78596,"line_start":427,"line_end":427,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78990,"byte_end":78993,"line_start":440,"line_end":440,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"pub fn new(R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78803,"byte_end":78875,"line_start":437,"line_end":437,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78880,"byte_end":78958,"line_start":438,"line_end":438,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78963,"byte_end":78978,"line_start":439,"line_end":439,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":80806,"byte_end":80812,"line_start":498,"line_end":498,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":80721,"byte_end":80794,"line_start":497,"line_end":497,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":80950,"byte_end":80957,"line_start":503,"line_end":503,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":80888,"byte_end":80938,"line_start":502,"line_end":502,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81224,"byte_end":81231,"line_start":511,"line_end":511,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81023,"byte_end":81081,"line_start":507,"line_end":507,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81086,"byte_end":81089,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81094,"byte_end":81166,"line_start":509,"line_end":509,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81171,"byte_end":81212,"line_start":510,"line_end":510,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81376,"byte_end":81386,"line_start":516,"line_end":516,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81305,"byte_end":81364,"line_start":515,"line_end":515,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":807},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83195,"byte_end":83204,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":809}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82367,"byte_end":82395,"line_start":9,"line_end":9,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82396,"byte_end":82399,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will read uncompressed data","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82400,"byte_end":82480,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ from the underlying reader and expose the compressed version as a [`Read`]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82481,"byte_end":82559,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ interface.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82560,"byte_end":82574,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82575,"byte_end":82578,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82579,"byte_end":82641,"line_start":15,"line_end":15,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82642,"byte_end":82645,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82646,"byte_end":82660,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82661,"byte_end":82664,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82665,"byte_end":82672,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82673,"byte_end":82701,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82702,"byte_end":82718,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82719,"byte_end":82747,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82748,"byte_end":82780,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82781,"byte_end":82784,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // Return a vector containing the GZ compressed version of hello world","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82785,"byte_end":82859,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82860,"byte_end":82863,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ fn gzencode_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82864,"byte_end":82918,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/     let mut ret_vec = [0;100];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82919,"byte_end":82953,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/     let bytestring = b\"hello world\";","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82954,"byte_end":82994,"line_start":29,"line_end":29,"column_start":1,"column_end":41}},{"value":"/     let mut gz = GzEncoder::new(&bytestring[..], Compression::fast());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":82995,"byte_end":83069,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/     let count = gz.read(&mut ret_vec)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83070,"byte_end":83113,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/     Ok(ret_vec[0..count].to_vec())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83114,"byte_end":83152,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83153,"byte_end":83158,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83159,"byte_end":83166,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83756,"byte_end":83759,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"pub fn new(R, Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83415,"byte_end":83484,"line_start":47,"line_end":47,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83489,"byte_end":83492,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83497,"byte_end":83568,"line_start":49,"line_end":49,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83573,"byte_end":83624,"line_start":50,"line_end":50,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83629,"byte_end":83632,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83637,"byte_end":83707,"line_start":52,"line_end":52,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83712,"byte_end":83744,"line_start":53,"line_end":53,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83942,"byte_end":83949,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83880,"byte_end":83930,"line_start":60,"line_end":60,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84216,"byte_end":84223,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84015,"byte_end":84073,"line_start":65,"line_end":65,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84078,"byte_end":84081,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84086,"byte_end":84158,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84163,"byte_end":84204,"line_start":68,"line_end":68,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84366,"byte_end":84376,"line_start":74,"line_end":74,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84297,"byte_end":84354,"line_start":73,"line_end":73,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":813},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85837,"byte_end":85846,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":815}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84815,"byte_end":84843,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84844,"byte_end":84847,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84848,"byte_end":84924,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ data from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84925,"byte_end":84988,"line_start":98,"line_end":98,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84989,"byte_end":84992,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84993,"byte_end":85055,"line_start":100,"line_end":100,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85056,"byte_end":85059,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85060,"byte_end":85074,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85075,"byte_end":85078,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85079,"byte_end":85086,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85087,"byte_end":85090,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85091,"byte_end":85119,"line_start":106,"line_end":106,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85120,"byte_end":85136,"line_start":107,"line_end":107,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85137,"byte_end":85167,"line_start":108,"line_end":108,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85168,"byte_end":85203,"line_start":109,"line_end":109,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::GzDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85204,"byte_end":85236,"line_start":110,"line_end":110,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85237,"byte_end":85240,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85241,"byte_end":85258,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85259,"byte_end":85331,"line_start":113,"line_end":113,"column_start":1,"column_end":73}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85332,"byte_end":85374,"line_start":114,"line_end":114,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85375,"byte_end":85416,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85417,"byte_end":85472,"line_start":116,"line_end":116,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85473,"byte_end":85480,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85481,"byte_end":85486,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85487,"byte_end":85565,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85566,"byte_end":85599,"line_start":120,"line_end":120,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85600,"byte_end":85603,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85604,"byte_end":85664,"line_start":122,"line_end":122,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85665,"byte_end":85712,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85713,"byte_end":85746,"line_start":124,"line_end":124,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85747,"byte_end":85781,"line_start":125,"line_end":125,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85782,"byte_end":85794,"line_start":126,"line_end":126,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85795,"byte_end":85800,"line_start":127,"line_end":127,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85801,"byte_end":85808,"line_start":128,"line_end":128,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86038,"byte_end":86041,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"pub fn new(R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85933,"byte_end":86005,"line_start":135,"line_end":135,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86010,"byte_end":86026,"line_start":136,"line_end":136,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86275,"byte_end":86281,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86195,"byte_end":86263,"line_start":145,"line_end":145,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86413,"byte_end":86420,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86351,"byte_end":86401,"line_start":150,"line_end":150,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86687,"byte_end":86694,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86486,"byte_end":86544,"line_start":155,"line_end":155,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86549,"byte_end":86552,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86557,"byte_end":86629,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86634,"byte_end":86675,"line_start":158,"line_end":158,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86839,"byte_end":86849,"line_start":164,"line_end":164,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86768,"byte_end":86827,"line_start":163,"line_end":163,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":819},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88812,"byte_end":88826,"line_start":226,"line_end":226,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":821}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87288,"byte_end":87358,"line_start":185,"line_end":185,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87359,"byte_end":87362,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87363,"byte_end":87443,"line_start":187,"line_end":187,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87444,"byte_end":87525,"line_start":188,"line_end":188,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream.  `MultiGzDecoder` will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87526,"byte_end":87598,"line_start":189,"line_end":189,"column_start":1,"column_end":73}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87599,"byte_end":87676,"line_start":190,"line_end":190,"column_start":1,"column_end":78}},{"value":"/ first gzip member. The multistream format is commonly used in bioinformatics,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87677,"byte_end":87758,"line_start":191,"line_end":191,"column_start":1,"column_end":82}},{"value":"/ for example when using the BGZF compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87759,"byte_end":87811,"line_start":192,"line_end":192,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87812,"byte_end":87815,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume all gzip members","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87816,"byte_end":87898,"line_start":194,"line_end":194,"column_start":1,"column_end":83}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87899,"byte_end":87957,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87958,"byte_end":87961,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87962,"byte_end":88024,"line_start":197,"line_end":197,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88025,"byte_end":88028,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88029,"byte_end":88043,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88044,"byte_end":88047,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88048,"byte_end":88055,"line_start":201,"line_end":201,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88056,"byte_end":88084,"line_start":202,"line_end":202,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88085,"byte_end":88101,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88102,"byte_end":88132,"line_start":204,"line_end":204,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88133,"byte_end":88168,"line_start":205,"line_end":205,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::MultiGzDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88169,"byte_end":88206,"line_start":206,"line_end":206,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88207,"byte_end":88210,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88211,"byte_end":88228,"line_start":208,"line_end":208,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88229,"byte_end":88301,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88302,"byte_end":88344,"line_start":210,"line_end":210,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88345,"byte_end":88386,"line_start":211,"line_end":211,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88387,"byte_end":88442,"line_start":212,"line_end":212,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88443,"byte_end":88450,"line_start":213,"line_end":213,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88451,"byte_end":88456,"line_start":214,"line_end":214,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88457,"byte_end":88535,"line_start":215,"line_end":215,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88536,"byte_end":88569,"line_start":216,"line_end":216,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88570,"byte_end":88573,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88574,"byte_end":88634,"line_start":218,"line_end":218,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88635,"byte_end":88687,"line_start":219,"line_end":219,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88688,"byte_end":88721,"line_start":220,"line_end":220,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88722,"byte_end":88756,"line_start":221,"line_end":221,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88757,"byte_end":88769,"line_start":222,"line_end":222,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88770,"byte_end":88775,"line_start":223,"line_end":223,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88776,"byte_end":88783,"line_start":224,"line_end":224,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89110,"byte_end":89113,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"pub fn new(R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88923,"byte_end":88995,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89000,"byte_end":89078,"line_start":232,"line_end":232,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89083,"byte_end":89098,"line_start":233,"line_end":233,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89373,"byte_end":89379,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89287,"byte_end":89361,"line_start":242,"line_end":242,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89511,"byte_end":89518,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89449,"byte_end":89499,"line_start":247,"line_end":247,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89785,"byte_end":89792,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89584,"byte_end":89642,"line_start":252,"line_end":252,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89647,"byte_end":89650,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89655,"byte_end":89727,"line_start":254,"line_end":254,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89732,"byte_end":89773,"line_start":255,"line_end":255,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89937,"byte_end":89947,"line_start":261,"line_end":261,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89866,"byte_end":89925,"line_start":260,"line_end":260,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91258,"byte_end":91267,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90621,"byte_end":90649,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90650,"byte_end":90653,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Write`] interface that will emit compressed data","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90654,"byte_end":90733,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ to the underlying writer `W`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90734,"byte_end":90767,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90768,"byte_end":90771,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90772,"byte_end":90836,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90837,"byte_end":90840,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90841,"byte_end":90855,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90856,"byte_end":90859,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90860,"byte_end":90867,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90868,"byte_end":90896,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90897,"byte_end":90925,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::GzEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90926,"byte_end":90959,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90960,"byte_end":90963,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":90964,"byte_end":91042,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91043,"byte_end":91060,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91061,"byte_end":91064,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91065,"byte_end":91132,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/ e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91133,"byte_end":91170,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91171,"byte_end":91213,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91214,"byte_end":91221,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91222,"byte_end":91229,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92014,"byte_end":92017,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"pub fn new(W, Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91673,"byte_end":91742,"line_start":54,"line_end":54,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91747,"byte_end":91750,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91755,"byte_end":91826,"line_start":56,"line_end":56,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91831,"byte_end":91882,"line_start":57,"line_end":57,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91887,"byte_end":91890,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91895,"byte_end":91967,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ written to the stream `w`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91972,"byte_end":92002,"line_start":60,"line_end":60,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92176,"byte_end":92183,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92114,"byte_end":92164,"line_start":65,"line_end":65,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92440,"byte_end":92447,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92239,"byte_end":92297,"line_start":70,"line_end":70,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92302,"byte_end":92305,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92310,"byte_end":92382,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92387,"byte_end":92428,"line_start":73,"line_end":73,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":93126,"byte_end":93136,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92511,"byte_end":92586,"line_start":78,"line_end":78,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92591,"byte_end":92594,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92599,"byte_end":92672,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92677,"byte_end":92753,"line_start":81,"line_end":81,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92758,"byte_end":92801,"line_start":82,"line_end":82,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92806,"byte_end":92809,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92814,"byte_end":92826,"line_start":84,"line_end":84,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92831,"byte_end":92834,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92839,"byte_end":92913,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92918,"byte_end":92941,"line_start":87,"line_end":87,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92946,"byte_end":92949,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92954,"byte_end":92966,"line_start":89,"line_end":89,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92971,"byte_end":92974,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":92979,"byte_end":93050,"line_start":91,"line_end":91,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":93055,"byte_end":93114,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94524,"byte_end":94530,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[{"value":"/ Finish encoding this stream, returning the underlying writer once the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":93864,"byte_end":93937,"line_start":116,"line_end":116,"column_start":5,"column_end":78}},{"value":"/ encoding is done.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":93942,"byte_end":93963,"line_start":117,"line_end":117,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":93968,"byte_end":93971,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":93976,"byte_end":94052,"line_start":119,"line_end":119,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94057,"byte_end":94132,"line_start":120,"line_end":120,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94137,"byte_end":94207,"line_start":121,"line_end":121,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94212,"byte_end":94285,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94290,"byte_end":94339,"line_start":123,"line_end":123,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94344,"byte_end":94347,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94352,"byte_end":94364,"line_start":125,"line_end":125,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94369,"byte_end":94372,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94377,"byte_end":94448,"line_start":127,"line_end":127,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94453,"byte_end":94512,"line_start":128,"line_end":128,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":834},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55416,"byte_end":55424,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[{"value":"/ A structure representing the header of a gzip stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55220,"byte_end":55277,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55278,"byte_end":55281,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The header can contain metadata about the file that was compressed, if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55282,"byte_end":55356,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ present.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55357,"byte_end":55369,"line_start":21,"line_end":21,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55667,"byte_end":55675,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"pub fn filename(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `filename` field of this gzip stream's header, if present.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55581,"byte_end":55655,"line_start":32,"line_end":32,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55843,"byte_end":55848,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"pub fn extra(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `extra` field of this gzip stream's header, if present.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55760,"byte_end":55831,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56015,"byte_end":56022,"line_start":43,"line_end":43,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"pub fn comment(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `comment` field of this gzip stream's header, if present.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55930,"byte_end":56003,"line_start":42,"line_end":42,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56308,"byte_end":56324,"line_start":51,"line_end":51,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"pub fn operating_system(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[{"value":"/ Returns the `operating_system` field of this gzip stream's header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56106,"byte_end":56176,"line_start":47,"line_end":47,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56181,"byte_end":56184,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ There are predefined values for various operating systems.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56189,"byte_end":56251,"line_start":49,"line_end":49,"column_start":5,"column_end":67}},{"value":"/ 255 means that the value is unknown.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56256,"byte_end":56296,"line_start":50,"line_end":50,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56946,"byte_end":56951,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"pub fn mtime(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[{"value":"/ This gives the most recent modification time of the original file being compressed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56381,"byte_end":56468,"line_start":55,"line_end":55,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56473,"byte_end":56476,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ The time is in Unix format, i.e., seconds since 00:00:00 GMT, Jan. 1, 1970.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56481,"byte_end":56560,"line_start":57,"line_end":57,"column_start":5,"column_end":84}},{"value":"/ (Note that this may cause problems for MS-DOS and other systems that use local","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56565,"byte_end":56647,"line_start":58,"line_end":58,"column_start":5,"column_end":87}},{"value":"/ rather than Universal time.) If the compressed data did not come from a file,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56652,"byte_end":56733,"line_start":59,"line_end":59,"column_start":5,"column_end":86}},{"value":"/ `mtime` is set to the time at which compression started.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56738,"byte_end":56798,"line_start":60,"line_end":60,"column_start":5,"column_end":65}},{"value":"/ `mtime` = 0 means no time stamp is available.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56803,"byte_end":56852,"line_start":61,"line_end":61,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56857,"byte_end":56860,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ The usage of `mtime` is discouraged because of Year 2038 problem.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56865,"byte_end":56934,"line_start":63,"line_end":63,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57346,"byte_end":57363,"line_start":75,"line_end":75,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"pub fn mtime_as_datetime(&Self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[{"value":"/ Returns the most recent modification time represented by a date-time type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":56998,"byte_end":57076,"line_start":68,"line_end":68,"column_start":5,"column_end":83}},{"value":"/ Returns `None` if the value of the underlying counter is 0,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57081,"byte_end":57144,"line_start":69,"line_end":69,"column_start":5,"column_end":68}},{"value":"/ indicating no time stamp is available.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57149,"byte_end":57191,"line_start":70,"line_end":70,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57196,"byte_end":57199,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57204,"byte_end":57207,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ The time is measured as seconds since 00:00:00 GMT, Jan. 1 1970.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57212,"byte_end":57280,"line_start":73,"line_end":73,"column_start":5,"column_end":73}},{"value":"/ See [`mtime`](#method.mtime) for more detail.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57285,"byte_end":57334,"line_start":74,"line_end":74,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":848},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58432,"byte_end":58441,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[{"value":"/ A builder structure to create a new gzip Encoder.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57640,"byte_end":57693,"line_start":86,"line_end":86,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57694,"byte_end":57697,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ This structure controls header configuration options such as the filename.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57698,"byte_end":57776,"line_start":88,"line_end":88,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57777,"byte_end":57780,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57781,"byte_end":57795,"line_start":90,"line_end":90,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57796,"byte_end":57799,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57800,"byte_end":57807,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57808,"byte_end":57836,"line_start":93,"line_end":93,"column_start":1,"column_end":29}},{"value":"/ # use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57837,"byte_end":57855,"line_start":94,"line_end":94,"column_start":1,"column_end":19}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57856,"byte_end":57878,"line_start":95,"line_end":95,"column_start":1,"column_end":23}},{"value":"/ use flate2::GzBuilder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57879,"byte_end":57905,"line_start":96,"line_end":96,"column_start":1,"column_end":27}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57906,"byte_end":57934,"line_start":97,"line_end":97,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57935,"byte_end":57938,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // GzBuilder opens a file and writes a sample string using GzBuilder pattern","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":57939,"byte_end":58019,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58020,"byte_end":58023,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ # fn sample_builder() -> Result<(), io::Error> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58024,"byte_end":58076,"line_start":101,"line_end":101,"column_start":1,"column_end":53}},{"value":"/ let f = File::create(\"examples/hello_world.gz\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58077,"byte_end":58130,"line_start":102,"line_end":102,"column_start":1,"column_end":54}},{"value":"/ let mut gz = GzBuilder::new()","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58131,"byte_end":58164,"line_start":103,"line_end":103,"column_start":1,"column_end":34}},{"value":"/                 .filename(\"hello_world.txt\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58165,"byte_end":58213,"line_start":104,"line_end":104,"column_start":1,"column_end":49}},{"value":"/                 .comment(\"test file, please delete\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58214,"byte_end":58270,"line_start":105,"line_end":105,"column_start":1,"column_end":57}},{"value":"/                 .write(f, Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58271,"byte_end":58325,"line_start":106,"line_end":106,"column_start":1,"column_end":55}},{"value":"/ gz.write(b\"hello world\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58326,"byte_end":58356,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/ gz.finish()?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58357,"byte_end":58374,"line_start":108,"line_end":108,"column_start":1,"column_end":18}},{"value":"/ # Ok(())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58375,"byte_end":58387,"line_start":109,"line_end":109,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58388,"byte_end":58395,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58396,"byte_end":58403,"line_start":111,"line_end":111,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58676,"byte_end":58679,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"pub fn new() -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[{"value":"/ Create a new blank builder with no header by default.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58607,"byte_end":58664,"line_start":122,"line_end":122,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58939,"byte_end":58944,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"pub fn mtime(Self, u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `mtime` field in the gzip header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58876,"byte_end":58927,"line_start":133,"line_end":133,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59108,"byte_end":59124,"line_start":140,"line_end":140,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"pub fn operating_system(Self, u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `operating_system` field in the gzip header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59034,"byte_end":59096,"line_start":139,"line_end":139,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59287,"byte_end":59292,"line_start":146,"line_end":146,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"pub fn extra<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `extra` field in the gzip header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59224,"byte_end":59275,"line_start":145,"line_end":145,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59566,"byte_end":59574,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"pub fn filename<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `filename` field in the gzip header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59411,"byte_end":59465,"line_start":151,"line_end":151,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59470,"byte_end":59473,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59478,"byte_end":59490,"line_start":153,"line_end":153,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59495,"byte_end":59498,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics if the `filename` slice contains a zero.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59503,"byte_end":59554,"line_start":155,"line_end":155,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59878,"byte_end":59885,"line_start":166,"line_end":166,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"pub fn comment<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `comment` field in the gzip header.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59725,"byte_end":59778,"line_start":161,"line_end":161,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59783,"byte_end":59786,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59791,"byte_end":59803,"line_start":163,"line_end":163,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59808,"byte_end":59811,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Panics if the `comment` slice contains a zero.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":59816,"byte_end":59866,"line_start":165,"line_end":165,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60248,"byte_end":60253,"line_start":175,"line_end":175,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"pub fn write<W: Write>(Self, W, Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a writer encoder in the process.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60033,"byte_end":60100,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60105,"byte_end":60108,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60113,"byte_end":60185,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ written out to the supplied parameter `w`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60190,"byte_end":60236,"line_start":174,"line_end":174,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60597,"byte_end":60601,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"pub fn read<R: Read>(Self, R, Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60387,"byte_end":60454,"line_start":179,"line_end":179,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60459,"byte_end":60462,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60467,"byte_end":60540,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60545,"byte_end":60585,"line_start":182,"line_end":182,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60950,"byte_end":60958,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"pub fn buf_read<R>(Self, R, Compression) -> bufread::GzEncoder<R> where\nR: BufRead","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60740,"byte_end":60807,"line_start":187,"line_end":187,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60812,"byte_end":60815,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60820,"byte_end":60893,"line_start":189,"line_end":189,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":60898,"byte_end":60938,"line_start":190,"line_end":190,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":463},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":96190,"byte_end":96195,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":866},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104051,"byte_end":104059,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":867}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory compression stream for blocks of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103446,"byte_end":103502,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103503,"byte_end":103506,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103507,"byte_end":103582,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103583,"byte_end":103660,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103661,"byte_end":103737,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103738,"byte_end":103788,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103789,"byte_end":103792,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103793,"byte_end":103871,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103872,"byte_end":103890,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103891,"byte_end":103894,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103895,"byte_end":103957,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":103958,"byte_end":104022,"line_start":23,"line_end":23,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":870},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104704,"byte_end":104714,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":871}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory decompression stream for blocks of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104097,"byte_end":104155,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104156,"byte_end":104159,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104160,"byte_end":104235,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104236,"byte_end":104313,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104314,"byte_end":104390,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104391,"byte_end":104441,"line_start":34,"line_end":34,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104442,"byte_end":104445,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104446,"byte_end":104524,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104525,"byte_end":104543,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104544,"byte_end":104547,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104548,"byte_end":104610,"line_start":39,"line_end":39,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104611,"byte_end":104675,"line_start":40,"line_end":40,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":890},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105579,"byte_end":105583,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105345,"byte_end":105420,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105425,"byte_end":105497,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105502,"byte_end":105574,"line_start":72,"line_end":72,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":893},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106034,"byte_end":106038,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105618,"byte_end":105690,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105695,"byte_end":105768,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105773,"byte_end":105799,"line_start":77,"line_end":77,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105804,"byte_end":105807,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105812,"byte_end":105887,"line_start":79,"line_end":79,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105892,"byte_end":105965,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105970,"byte_end":106029,"line_start":81,"line_end":81,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":896},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106571,"byte_end":106578,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer, but the output is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106075,"byte_end":106148,"line_start":84,"line_end":84,"column_start":5,"column_end":78}},{"value":"/ not aligned to a byte boundary.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106153,"byte_end":106188,"line_start":85,"line_end":85,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106193,"byte_end":106196,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ All of the input data so far will be available to the decompressor (as","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106201,"byte_end":106275,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/ with `Flush::Sync`. This completes the current deflate block and follows","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106280,"byte_end":106356,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/ it with an empty fixed codes block that is 10 bites long, and it assures","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106361,"byte_end":106437,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ that enough bytes are output in order for the decompessor to finish the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106442,"byte_end":106517,"line_start":90,"line_end":90,"column_start":5,"column_end":80}},{"value":"/ block before the empty fixed code block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106522,"byte_end":106566,"line_start":91,"line_end":91,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":899},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106922,"byte_end":106926,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[{"value":"/ All output is flushed as with `Flush::Sync` and the compression state is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106618,"byte_end":106694,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ reset so decompression can restart from this point if previous","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106699,"byte_end":106765,"line_start":95,"line_end":95,"column_start":5,"column_end":71}},{"value":"/ compressed data has been damaged or if random access is desired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106770,"byte_end":106838,"line_start":96,"line_end":96,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106843,"byte_end":106846,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Using this option too often can seriously degrade compression.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106851,"byte_end":106917,"line_start":98,"line_end":98,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":902},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107154,"byte_end":107160,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":106963,"byte_end":107024,"line_start":101,"line_end":101,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107029,"byte_end":107032,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107037,"byte_end":107111,"line_start":103,"line_end":103,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107116,"byte_end":107149,"line_start":104,"line_end":104,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":905},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107212,"byte_end":107226,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":889},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105325,"byte_end":105338,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"pub enum FlushCompress {\n\n    /// A typical parameter for passing to compression/decompression functions,\n    /// this indicates that the underlying stream to decide how much data to\n    /// accumulate before producing output in order to maximize compression.\n    None = ,\n\n    /// All pending output is flushed to the output buffer and the output is\n    /// aligned on a byte boundary so that the decompressor can get all input\n    /// data available so far.\n    ///\n    /// Flushing may degrade compression for some compression algorithms and so\n    /// it should only be used when necessary. This will complete the current\n    /// deflate block and follow it with an empty stored block.\n    Sync = ,\n\n    /// All pending output is flushed to the output buffer, but the output is\n    /// not aligned to a byte boundary.\n    ///\n    /// All of the input data so far will be available to the decompressor (as\n    /// with `Flush::Sync`. This completes the current deflate block and follows\n    /// it with an empty fixed codes block that is 10 bites long, and it assures\n    /// that enough bytes are output in order for the decompessor to finish the\n    /// block before the empty fixed code block.\n    Partial = ,\n\n    /// All output is flushed as with `Flush::Sync` and the compression state is\n    /// reset so decompression can restart from this point if previous\n    /// compressed data has been damaged or if random access is desired.\n    ///\n    /// Using this option too often can seriously degrade compression.\n    Full = ,\n\n    /// Pending input is processed and pending output is flushed.\n    ///\n    /// The return value may indicate that the stream is not yet done and more\n    /// data has yet to be processed.\n    Finish = ,\n\n    #[doc(hidden)]\n    _Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when compressing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105221,"byte_end":105295,"line_start":67,"line_end":67,"column_start":1,"column_end":75}},{"value":"/ in-memory data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105296,"byte_end":105315,"line_start":68,"line_end":68,"column_start":1,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107637,"byte_end":107641,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107403,"byte_end":107478,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107483,"byte_end":107555,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107560,"byte_end":107632,"line_start":117,"line_end":117,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":922},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108092,"byte_end":108096,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107676,"byte_end":107748,"line_start":120,"line_end":120,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107753,"byte_end":107826,"line_start":121,"line_end":121,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107831,"byte_end":107857,"line_start":122,"line_end":122,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107862,"byte_end":107865,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107870,"byte_end":107945,"line_start":124,"line_end":124,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107950,"byte_end":108023,"line_start":125,"line_end":125,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108028,"byte_end":108087,"line_start":126,"line_end":126,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":925},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108324,"byte_end":108330,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108133,"byte_end":108194,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108199,"byte_end":108202,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108207,"byte_end":108281,"line_start":131,"line_end":131,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108286,"byte_end":108319,"line_start":132,"line_end":132,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108382,"byte_end":108396,"line_start":136,"line_end":136,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":918},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107381,"byte_end":107396,"line_start":114,"line_end":114,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"pub enum FlushDecompress {\n\n    /// A typical parameter for passing to compression/decompression functions,\n    /// this indicates that the underlying stream to decide how much data to\n    /// accumulate before producing output in order to maximize compression.\n    None = ,\n\n    /// All pending output is flushed to the output buffer and the output is\n    /// aligned on a byte boundary so that the decompressor can get all input\n    /// data available so far.\n    ///\n    /// Flushing may degrade compression for some compression algorithms and so\n    /// it should only be used when necessary. This will complete the current\n    /// deflate block and follow it with an empty stored block.\n    Sync = ,\n\n    /// Pending input is processed and pending output is flushed.\n    ///\n    /// The return value may indicate that the stream is not yet done and more\n    /// data has yet to be processed.\n    Finish = ,\n\n    #[doc(hidden)]\n    _Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107275,"byte_end":107337,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"/ decompressing in-memory data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":107338,"byte_end":107371,"line_start":113,"line_end":113,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108555,"byte_end":108570,"line_start":142,"line_end":142,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[{"value":"/ Error returned when a decompression object finds that the input stream of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108400,"byte_end":108477,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ bytes was not a valid input stream of bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108478,"byte_end":108526,"line_start":140,"line_end":140,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":946},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108707,"byte_end":108720,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[{"value":"/ Error returned when a compression object is used incorrectly or otherwise","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108577,"byte_end":108654,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/ generates an error.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108655,"byte_end":108678,"line_start":145,"line_end":145,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":952},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109077,"byte_end":109079,"line_start":157,"line_end":157,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":951},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[{"value":"/ Indicates success.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108898,"byte_end":108920,"line_start":153,"line_end":153,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108925,"byte_end":108928,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Means that more input may be needed but isn't available","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108933,"byte_end":108992,"line_start":155,"line_end":155,"column_start":5,"column_end":64}},{"value":"/ and/or there's more output to be written but the output buffer is full.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108997,"byte_end":109072,"line_start":156,"line_end":156,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":954},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109558,"byte_end":109566,"line_start":168,"line_end":168,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":951},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[{"value":"/ Indicates that forward progress is not possible due to input or output","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109086,"byte_end":109160,"line_start":159,"line_end":159,"column_start":5,"column_end":79}},{"value":"/ buffers being empty.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109165,"byte_end":109189,"line_start":160,"line_end":160,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109194,"byte_end":109197,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ For compression it means the input buffer needs some more data or the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109202,"byte_end":109275,"line_start":162,"line_end":162,"column_start":5,"column_end":78}},{"value":"/ output buffer needs to be freed up before trying again.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109280,"byte_end":109339,"line_start":163,"line_end":163,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109344,"byte_end":109347,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ For decompression this means that more input is needed to continue or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109352,"byte_end":109425,"line_start":165,"line_end":165,"column_start":5,"column_end":78}},{"value":"/ the output buffer isn't large enough to contain the result. The function","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109430,"byte_end":109506,"line_start":166,"line_end":166,"column_start":5,"column_end":81}},{"value":"/ can be called again after fixing both.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109511,"byte_end":109553,"line_start":167,"line_end":167,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":956},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109848,"byte_end":109857,"line_start":175,"line_end":175,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":951},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[{"value":"/ Indicates that all input has been consumed and all output bytes have","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109573,"byte_end":109645,"line_start":170,"line_end":170,"column_start":5,"column_end":77}},{"value":"/ been written. Decompression/compression should not be called again.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109650,"byte_end":109721,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109726,"byte_end":109729,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ For decompression with zlib streams the adler-32 of the decompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109734,"byte_end":109806,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ data has also been verified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109811,"byte_end":109843,"line_start":174,"line_end":174,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":951},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108885,"byte_end":108891,"line_start":152,"line_end":152,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"pub enum Status {\n\n    /// Indicates success.\n    ///\n    /// Means that more input may be needed but isn't available\n    /// and/or there's more output to be written but the output buffer is full.\n    Ok,\n\n    /// Indicates that forward progress is not possible due to input or output\n    /// buffers being empty.\n    ///\n    /// For compression it means the input buffer needs some more data or the\n    /// output buffer needs to be freed up before trying again.\n    ///\n    /// For decompression this means that more input is needed to continue or\n    /// the output buffer isn't large enough to contain the result. The function\n    /// can be called again after fixing both.\n    BufError,\n\n    /// Indicates that all input has been consumed and all output bytes have\n    /// been written. Decompression/compression should not be called again.\n    ///\n    /// For decompression with zlib streams the adler-32 of the decompressed\n    /// data has also been verified.\n    StreamEnd,\n}","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"/ Possible status results of compressing some data or successfully","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108727,"byte_end":108795,"line_start":149,"line_end":149,"column_start":1,"column_end":69}},{"value":"/ decompressing a block of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":108796,"byte_end":108830,"line_start":150,"line_end":150,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":110181,"byte_end":110184,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"pub fn new(Compression, bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for compressing data that it's given.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109882,"byte_end":109950,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109955,"byte_end":109958,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here indicates what level of compression is going","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109963,"byte_end":110037,"line_start":181,"line_end":181,"column_start":5,"column_end":79}},{"value":"/ to be performed, and the `zlib_header` argument indicates whether the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":110042,"byte_end":110115,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ output data should have a zlib header or not.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":110120,"byte_end":110169,"line_start":183,"line_end":183,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111341,"byte_end":111349,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111224,"byte_end":111296,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111301,"byte_end":111329,"line_start":210,"line_end":210,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111522,"byte_end":111531,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111405,"byte_end":111477,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111482,"byte_end":111510,"line_start":216,"line_end":216,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111761,"byte_end":111766,"line_start":224,"line_end":224,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[{"value":"/ Quickly resets this compressor without having to reallocate anything.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111588,"byte_end":111661,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111666,"byte_end":111669,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to dropping this object and then creating a new one.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111674,"byte_end":111749,"line_start":223,"line_end":223,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":112379,"byte_end":112387,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"pub fn compress(&mut Self, &[u8], &mut [u8], FlushCompress)\n-> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the output, consuming only as much","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":111978,"byte_end":112047,"line_start":232,"line_end":232,"column_start":5,"column_end":74}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":112052,"byte_end":112111,"line_start":233,"line_end":233,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":112116,"byte_end":112119,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushCompress` parameters.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":112124,"byte_end":112200,"line_start":235,"line_end":235,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":112205,"byte_end":112208,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":112213,"byte_end":112289,"line_start":237,"line_end":237,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":112294,"byte_end":112367,"line_start":238,"line_end":238,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114079,"byte_end":114091,"line_start":276,"line_end":276,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"pub fn compress_vec(&mut Self, &[u8], &mut Vec<u8>, FlushCompress)\n-> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the extra space of the output, consuming","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":113580,"byte_end":113655,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/ only as much input as needed and writing as much output as possible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":113660,"byte_end":113732,"line_start":269,"line_end":269,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":113737,"byte_end":113740,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `compress`, except that the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":113745,"byte_end":113816,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":113821,"byte_end":113894,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":113899,"byte_end":113974,"line_start":273,"line_end":273,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":113979,"byte_end":114049,"line_start":274,"line_end":274,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114054,"byte_end":114067,"line_start":275,"line_end":275,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114991,"byte_end":114994,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"pub fn new(bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for decompressing data that it's given.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114783,"byte_end":114853,"line_start":298,"line_end":298,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114858,"byte_end":114861,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ The `zlib_header` argument indicates whether the input data is expected","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114866,"byte_end":114941,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ to have a zlib header or not.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114946,"byte_end":114979,"line_start":301,"line_end":301,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":115900,"byte_end":115908,"line_start":325,"line_end":325,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":115781,"byte_end":115853,"line_start":323,"line_end":323,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":115858,"byte_end":115888,"line_start":324,"line_end":324,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116083,"byte_end":116092,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":115964,"byte_end":116036,"line_start":329,"line_end":329,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116041,"byte_end":116071,"line_start":330,"line_end":330,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":117289,"byte_end":117299,"line_start":357,"line_end":357,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"pub fn decompress(&mut Self, &[u8], &mut [u8], FlushDecompress)\n-> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the output, consuming only as much","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116149,"byte_end":116220,"line_start":335,"line_end":335,"column_start":5,"column_end":76}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116225,"byte_end":116284,"line_start":336,"line_end":336,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116289,"byte_end":116292,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushDecompress` parameters.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116297,"byte_end":116375,"line_start":338,"line_end":338,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116380,"byte_end":116383,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ If the first call passes `FlushDecompress::Finish` it is assumed that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116388,"byte_end":116461,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ the input and output buffers are both sized large enough to decompress","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116466,"byte_end":116540,"line_start":341,"line_end":341,"column_start":5,"column_end":79}},{"value":"/ the entire stream in a single call.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116545,"byte_end":116584,"line_start":342,"line_end":342,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116589,"byte_end":116592,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ A flush value of `FlushDecompress::Finish` indicates that there are no","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116597,"byte_end":116671,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ more source bytes available beside what's already in the input buffer,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116676,"byte_end":116750,"line_start":345,"line_end":345,"column_start":5,"column_end":79}},{"value":"/ and the output buffer is large enough to hold the rest of the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116755,"byte_end":116820,"line_start":346,"line_end":346,"column_start":5,"column_end":70}},{"value":"/ decompressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116825,"byte_end":116847,"line_start":347,"line_end":347,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116852,"byte_end":116855,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116860,"byte_end":116936,"line_start":349,"line_end":349,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":116941,"byte_end":117014,"line_start":350,"line_end":350,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":117019,"byte_end":117022,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":117027,"byte_end":117039,"line_start":352,"line_end":352,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":117044,"byte_end":117047,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":117052,"byte_end":117121,"line_start":354,"line_end":354,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":117126,"byte_end":117194,"line_start":355,"line_end":355,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":117199,"byte_end":117277,"line_start":356,"line_end":356,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":119256,"byte_end":119270,"line_start":401,"line_end":401,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"pub fn decompress_vec(&mut Self, &[u8], &mut Vec<u8>, FlushDecompress)\n-> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the extra space in the output vector","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118540,"byte_end":118613,"line_start":387,"line_end":387,"column_start":5,"column_end":78}},{"value":"/ specified by `output`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118618,"byte_end":118644,"line_start":388,"line_end":388,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118649,"byte_end":118652,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `decompress`, except that the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118657,"byte_end":118730,"line_start":390,"line_end":390,"column_start":5,"column_end":78}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118735,"byte_end":118808,"line_start":391,"line_end":391,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118813,"byte_end":118888,"line_start":392,"line_end":392,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118893,"byte_end":118963,"line_start":393,"line_end":393,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118968,"byte_end":118981,"line_start":394,"line_end":394,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118986,"byte_end":118989,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":118994,"byte_end":119006,"line_start":396,"line_end":396,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":119011,"byte_end":119014,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":119019,"byte_end":119088,"line_start":398,"line_end":398,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":119093,"byte_end":119161,"line_start":399,"line_end":399,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":119166,"byte_end":119244,"line_start":400,"line_end":400,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120336,"byte_end":120341,"line_start":429,"line_end":429,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"pub fn reset(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[{"value":"/ Performs the equivalent of replacing this decompression state with a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":119956,"byte_end":120028,"line_start":421,"line_end":421,"column_start":5,"column_end":77}},{"value":"/ freshly allocated copy.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120033,"byte_end":120060,"line_start":422,"line_end":422,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120065,"byte_end":120068,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This function may not allocate memory, though, and attempts to reuse any","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120073,"byte_end":120149,"line_start":424,"line_end":424,"column_start":5,"column_end":81}},{"value":"/ previously existing resources.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120154,"byte_end":120188,"line_start":425,"line_end":425,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120193,"byte_end":120196,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ The argument provided here indicates whether the reset state will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120201,"byte_end":120270,"line_start":427,"line_end":427,"column_start":5,"column_end":74}},{"value":"/ attempt to decode a zlib header first or not.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120275,"byte_end":120324,"line_start":428,"line_end":428,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":969},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130730,"byte_end":130741,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":129888,"byte_end":129922,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":129923,"byte_end":129926,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and will read uncompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":129927,"byte_end":130007,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130008,"byte_end":130080,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130081,"byte_end":130084,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130085,"byte_end":130153,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130154,"byte_end":130157,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130158,"byte_end":130172,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130173,"byte_end":130176,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130177,"byte_end":130184,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130185,"byte_end":130213,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130214,"byte_end":130242,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::ZlibEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130243,"byte_end":130280,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130281,"byte_end":130303,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130304,"byte_end":130331,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130332,"byte_end":130335,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Use a buffered file to compress contents into a Vec<u8>","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130336,"byte_end":130398,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130399,"byte_end":130402,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130403,"byte_end":130460,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130461,"byte_end":130513,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/ let b = BufReader::new(f);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130514,"byte_end":130544,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ let mut z = ZlibEncoder::new(b, Compression::fast());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130545,"byte_end":130602,"line_start":34,"line_end":34,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = Vec::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130603,"byte_end":130635,"line_start":35,"line_end":35,"column_start":1,"column_end":33}},{"value":"/ z.read_to_end(&mut buffer)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130636,"byte_end":130668,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ # Ok(buffer)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130669,"byte_end":130685,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130686,"byte_end":130693,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130694,"byte_end":130701,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130954,"byte_end":130957,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"pub fn new(R, ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130821,"byte_end":130895,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130900,"byte_end":130942,"line_start":49,"line_end":49,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131604,"byte_end":131609,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131225,"byte_end":131294,"line_start":63,"line_end":63,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131299,"byte_end":131322,"line_start":64,"line_end":64,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131327,"byte_end":131330,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131335,"byte_end":131410,"line_start":66,"line_end":66,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131415,"byte_end":131487,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131492,"byte_end":131561,"line_start":68,"line_end":68,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131566,"byte_end":131592,"line_start":69,"line_end":69,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131779,"byte_end":131786,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131718,"byte_end":131767,"line_start":75,"line_end":75,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132031,"byte_end":132038,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131831,"byte_end":131888,"line_start":80,"line_end":80,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131893,"byte_end":131896,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131901,"byte_end":131973,"line_start":82,"line_end":82,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131978,"byte_end":132019,"line_start":83,"line_end":83,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132166,"byte_end":132176,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132095,"byte_end":132154,"line_start":88,"line_end":88,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132447,"byte_end":132455,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132218,"byte_end":132291,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132296,"byte_end":132299,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132304,"byte_end":132380,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132385,"byte_end":132435,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132689,"byte_end":132698,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132512,"byte_end":132577,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132582,"byte_end":132585,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132590,"byte_end":132659,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132664,"byte_end":132677,"line_start":104,"line_end":104,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134486,"byte_end":134497,"line_start":170,"line_end":170,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133429,"byte_end":133465,"line_start":136,"line_end":136,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133466,"byte_end":133469,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and takes a stream of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133470,"byte_end":133545,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133546,"byte_end":133623,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133624,"byte_end":133627,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133628,"byte_end":133696,"line_start":141,"line_end":141,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133697,"byte_end":133700,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133701,"byte_end":133715,"line_start":143,"line_end":143,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133716,"byte_end":133719,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133720,"byte_end":133727,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133728,"byte_end":133756,"line_start":146,"line_end":146,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133757,"byte_end":133773,"line_start":147,"line_end":147,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133774,"byte_end":133804,"line_start":148,"line_end":148,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133805,"byte_end":133842,"line_start":149,"line_end":149,"column_start":1,"column_end":38}},{"value":"/ use flate2::bufread::ZlibDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133843,"byte_end":133880,"line_start":150,"line_end":150,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133881,"byte_end":133884,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133885,"byte_end":133902,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133903,"byte_end":133974,"line_start":153,"line_end":153,"column_start":1,"column_end":72}},{"value":"/ # e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133975,"byte_end":134014,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134015,"byte_end":134053,"line_start":155,"line_end":155,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_bufreader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134054,"byte_end":134109,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134110,"byte_end":134117,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134118,"byte_end":134123,"line_start":158,"line_end":158,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134124,"byte_end":134204,"line_start":159,"line_end":159,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134205,"byte_end":134241,"line_start":160,"line_end":160,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134242,"byte_end":134245,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ fn decode_bufreader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134246,"byte_end":134309,"line_start":162,"line_end":162,"column_start":1,"column_end":64}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134310,"byte_end":134359,"line_start":163,"line_end":163,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134360,"byte_end":134394,"line_start":164,"line_end":164,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134395,"byte_end":134429,"line_start":165,"line_end":165,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134430,"byte_end":134443,"line_start":166,"line_end":166,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134444,"byte_end":134449,"line_start":167,"line_end":167,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134450,"byte_end":134457,"line_start":168,"line_end":168,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134678,"byte_end":134681,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"pub fn new(R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134578,"byte_end":134650,"line_start":176,"line_end":176,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134655,"byte_end":134666,"line_start":177,"line_end":177,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135311,"byte_end":135316,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134939,"byte_end":135008,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135013,"byte_end":135036,"line_start":192,"line_end":192,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135041,"byte_end":135044,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135049,"byte_end":135119,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135124,"byte_end":135192,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135197,"byte_end":135268,"line_start":196,"line_end":196,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135273,"byte_end":135299,"line_start":197,"line_end":197,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135486,"byte_end":135493,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135425,"byte_end":135474,"line_start":203,"line_end":203,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135738,"byte_end":135745,"line_start":212,"line_end":212,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135538,"byte_end":135595,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135600,"byte_end":135603,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135608,"byte_end":135680,"line_start":210,"line_end":210,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135685,"byte_end":135726,"line_start":211,"line_end":211,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135873,"byte_end":135883,"line_start":217,"line_end":217,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135802,"byte_end":135861,"line_start":216,"line_end":216,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136152,"byte_end":136160,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135925,"byte_end":135992,"line_start":221,"line_end":221,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":135997,"byte_end":136000,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136005,"byte_end":136073,"line_start":223,"line_end":223,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136078,"byte_end":136140,"line_start":224,"line_end":224,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136296,"byte_end":136305,"line_start":230,"line_end":230,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136217,"byte_end":136284,"line_start":229,"line_end":229,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":983},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138045,"byte_end":138056,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":985}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137235,"byte_end":137269,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137270,"byte_end":137273,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137274,"byte_end":137351,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137352,"byte_end":137424,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137425,"byte_end":137428,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137429,"byte_end":137491,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137492,"byte_end":137495,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137496,"byte_end":137510,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137511,"byte_end":137514,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137515,"byte_end":137522,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137523,"byte_end":137551,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137552,"byte_end":137580,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::ZlibEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137581,"byte_end":137615,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137616,"byte_end":137638,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137639,"byte_end":137642,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // Open example file and compress the contents using Read interface","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137643,"byte_end":137714,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137715,"byte_end":137718,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137719,"byte_end":137776,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137777,"byte_end":137829,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/ let mut z = ZlibEncoder::new(f, Compression::fast());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137830,"byte_end":137887,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = [0;50];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137888,"byte_end":137916,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/ let byte_count = z.read(&mut buffer)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137917,"byte_end":137959,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/ # Ok(buffer[0..byte_count].to_vec())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":137960,"byte_end":138000,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138001,"byte_end":138008,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138009,"byte_end":138016,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138280,"byte_end":138283,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"pub fn new(R, ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138147,"byte_end":138221,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138226,"byte_end":138268,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139003,"byte_end":139008,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138474,"byte_end":138543,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138548,"byte_end":138571,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138576,"byte_end":138579,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138584,"byte_end":138659,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138664,"byte_end":138736,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138741,"byte_end":138810,"line_start":58,"line_end":58,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138815,"byte_end":138841,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138846,"byte_end":138849,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138854,"byte_end":138926,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138931,"byte_end":138991,"line_start":62,"line_end":62,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139204,"byte_end":139211,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139143,"byte_end":139192,"line_start":68,"line_end":68,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139477,"byte_end":139484,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139277,"byte_end":139334,"line_start":73,"line_end":73,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139339,"byte_end":139342,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139347,"byte_end":139419,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139424,"byte_end":139465,"line_start":76,"line_end":76,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139825,"byte_end":139835,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139558,"byte_end":139617,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139622,"byte_end":139625,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139630,"byte_end":139705,"line_start":83,"line_end":83,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139710,"byte_end":139783,"line_start":84,"line_end":84,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139788,"byte_end":139813,"line_start":85,"line_end":85,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140134,"byte_end":140142,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139905,"byte_end":139978,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139983,"byte_end":139986,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":139991,"byte_end":140067,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140072,"byte_end":140122,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140377,"byte_end":140386,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140200,"byte_end":140265,"line_start":98,"line_end":98,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140270,"byte_end":140273,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140278,"byte_end":140347,"line_start":100,"line_end":100,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140352,"byte_end":140365,"line_start":101,"line_end":101,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":989},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142115,"byte_end":142126,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":991}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141079,"byte_end":141115,"line_start":133,"line_end":133,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141116,"byte_end":141119,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141120,"byte_end":141192,"line_start":135,"line_end":135,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141193,"byte_end":141270,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141271,"byte_end":141274,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141275,"byte_end":141337,"line_start":138,"line_end":138,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141338,"byte_end":141341,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141342,"byte_end":141356,"line_start":140,"line_end":140,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141357,"byte_end":141360,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141361,"byte_end":141368,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141369,"byte_end":141397,"line_start":143,"line_end":143,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141398,"byte_end":141414,"line_start":144,"line_end":144,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141415,"byte_end":141445,"line_start":145,"line_end":145,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141446,"byte_end":141483,"line_start":146,"line_end":146,"column_start":1,"column_end":38}},{"value":"/ use flate2::read::ZlibDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141484,"byte_end":141518,"line_start":147,"line_end":147,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141519,"byte_end":141522,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141523,"byte_end":141540,"line_start":149,"line_end":149,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141541,"byte_end":141612,"line_start":150,"line_end":150,"column_start":1,"column_end":72}},{"value":"/ # e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141613,"byte_end":141652,"line_start":151,"line_end":151,"column_start":1,"column_end":40}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141653,"byte_end":141691,"line_start":152,"line_end":152,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141692,"byte_end":141744,"line_start":153,"line_end":153,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141745,"byte_end":141752,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141753,"byte_end":141758,"line_start":155,"line_end":155,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141759,"byte_end":141839,"line_start":156,"line_end":156,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141840,"byte_end":141873,"line_start":157,"line_end":157,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141874,"byte_end":141877,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141878,"byte_end":141938,"line_start":159,"line_end":159,"column_start":1,"column_end":61}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141939,"byte_end":141988,"line_start":160,"line_end":160,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":141989,"byte_end":142023,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142024,"byte_end":142058,"line_start":162,"line_end":162,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142059,"byte_end":142072,"line_start":163,"line_end":163,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142073,"byte_end":142078,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142079,"byte_end":142086,"line_start":165,"line_end":165,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142318,"byte_end":142321,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"pub fn new(R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142218,"byte_end":142290,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142295,"byte_end":142306,"line_start":174,"line_end":174,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142648,"byte_end":142660,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"pub fn new_with_buf(R, Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142416,"byte_end":142485,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142490,"byte_end":142493,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Note that the specified buffer will only be used up to its current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142498,"byte_end":142568,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"/ length. The buffer's capacity will also not grow over time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142573,"byte_end":142636,"line_start":182,"line_end":182,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143368,"byte_end":143373,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142846,"byte_end":142915,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142920,"byte_end":142943,"line_start":192,"line_end":192,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142948,"byte_end":142951,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142956,"byte_end":143026,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143031,"byte_end":143099,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143104,"byte_end":143175,"line_start":196,"line_end":196,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143180,"byte_end":143206,"line_start":197,"line_end":197,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143211,"byte_end":143214,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143219,"byte_end":143291,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143296,"byte_end":143356,"line_start":200,"line_end":200,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143569,"byte_end":143576,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143508,"byte_end":143557,"line_start":206,"line_end":206,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143842,"byte_end":143849,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143642,"byte_end":143699,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143704,"byte_end":143707,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143712,"byte_end":143784,"line_start":213,"line_end":213,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143789,"byte_end":143830,"line_start":214,"line_end":214,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144190,"byte_end":144200,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143923,"byte_end":143982,"line_start":219,"line_end":219,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143987,"byte_end":143990,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":143995,"byte_end":144070,"line_start":221,"line_end":221,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144075,"byte_end":144148,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144153,"byte_end":144178,"line_start":223,"line_end":223,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144497,"byte_end":144505,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144270,"byte_end":144337,"line_start":228,"line_end":228,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144342,"byte_end":144345,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144350,"byte_end":144418,"line_start":230,"line_end":230,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144423,"byte_end":144485,"line_start":231,"line_end":231,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144642,"byte_end":144651,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144563,"byte_end":144630,"line_start":236,"line_end":236,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":995},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146245,"byte_end":146256,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":997}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145534,"byte_end":145568,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145569,"byte_end":145572,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145573,"byte_end":145646,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145647,"byte_end":145720,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145721,"byte_end":145724,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145725,"byte_end":145789,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145790,"byte_end":145793,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145794,"byte_end":145808,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145809,"byte_end":145812,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145813,"byte_end":145820,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145821,"byte_end":145849,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145850,"byte_end":145878,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145879,"byte_end":145914,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145915,"byte_end":145918,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write, assigning the compressed bytes of sample string","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":145919,"byte_end":145999,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146000,"byte_end":146003,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # fn zlib_encoding() -> std::io::Result<()> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146004,"byte_end":146053,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/ let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146054,"byte_end":146123,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ e.write(b\"Hello World\")?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146124,"byte_end":146153,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"/ let compressed = e.finish()?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146154,"byte_end":146187,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/ # Ok(())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146188,"byte_end":146200,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146201,"byte_end":146208,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146209,"byte_end":146216,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146584,"byte_end":146587,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"pub fn new(W, ::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146346,"byte_end":146418,"line_start":42,"line_end":42,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146423,"byte_end":146464,"line_start":43,"line_end":43,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146469,"byte_end":146472,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146477,"byte_end":146552,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146557,"byte_end":146572,"line_start":46,"line_end":46,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146809,"byte_end":146816,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146747,"byte_end":146797,"line_start":53,"line_end":53,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147093,"byte_end":147100,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146872,"byte_end":146930,"line_start":58,"line_end":58,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146935,"byte_end":146938,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146943,"byte_end":147019,"line_start":60,"line_end":60,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147024,"byte_end":147081,"line_start":61,"line_end":61,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147915,"byte_end":147920,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147164,"byte_end":147234,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147239,"byte_end":147262,"line_start":67,"line_end":67,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147267,"byte_end":147270,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147275,"byte_end":147349,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147354,"byte_end":147415,"line_start":70,"line_end":70,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147420,"byte_end":147423,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147428,"byte_end":147504,"line_start":72,"line_end":72,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147509,"byte_end":147577,"line_start":73,"line_end":73,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147582,"byte_end":147656,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147661,"byte_end":147730,"line_start":75,"line_end":75,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147735,"byte_end":147738,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147743,"byte_end":147755,"line_start":77,"line_end":77,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147760,"byte_end":147763,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147768,"byte_end":147839,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":147844,"byte_end":147903,"line_start":80,"line_end":80,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148685,"byte_end":148695,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148070,"byte_end":148145,"line_start":87,"line_end":87,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148150,"byte_end":148153,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148158,"byte_end":148231,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148236,"byte_end":148312,"line_start":90,"line_end":90,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148317,"byte_end":148360,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148365,"byte_end":148368,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148373,"byte_end":148385,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148390,"byte_end":148393,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148398,"byte_end":148472,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148477,"byte_end":148500,"line_start":96,"line_end":96,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148505,"byte_end":148508,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148513,"byte_end":148525,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148530,"byte_end":148533,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148538,"byte_end":148609,"line_start":100,"line_end":100,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148614,"byte_end":148673,"line_start":101,"line_end":101,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149530,"byte_end":149536,"line_start":121,"line_end":121,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148766,"byte_end":148820,"line_start":106,"line_end":106,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148825,"byte_end":148828,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148833,"byte_end":148905,"line_start":108,"line_end":108,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148910,"byte_end":148969,"line_start":109,"line_end":109,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148974,"byte_end":148977,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":148982,"byte_end":149058,"line_start":111,"line_end":111,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149063,"byte_end":149138,"line_start":112,"line_end":112,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149143,"byte_end":149213,"line_start":113,"line_end":113,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149218,"byte_end":149291,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149296,"byte_end":149345,"line_start":115,"line_end":115,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149350,"byte_end":149353,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149358,"byte_end":149370,"line_start":117,"line_end":117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149375,"byte_end":149378,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149383,"byte_end":149454,"line_start":119,"line_end":119,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149459,"byte_end":149518,"line_start":120,"line_end":120,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150226,"byte_end":150238,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"pub fn flush_finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149648,"byte_end":149702,"line_start":126,"line_end":126,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149707,"byte_end":149710,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149715,"byte_end":149791,"line_start":128,"line_end":128,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149796,"byte_end":149830,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149835,"byte_end":149899,"line_start":130,"line_end":130,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149904,"byte_end":149974,"line_start":131,"line_end":131,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":149979,"byte_end":150041,"line_start":132,"line_end":132,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150046,"byte_end":150049,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150054,"byte_end":150066,"line_start":134,"line_end":134,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150071,"byte_end":150074,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150079,"byte_end":150150,"line_start":136,"line_end":136,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150155,"byte_end":150214,"line_start":137,"line_end":137,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150569,"byte_end":150577,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compresor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150349,"byte_end":150422,"line_start":143,"line_end":143,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150427,"byte_end":150430,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150435,"byte_end":150507,"line_start":145,"line_end":145,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150512,"byte_end":150557,"line_start":146,"line_end":146,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150820,"byte_end":150829,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150640,"byte_end":150705,"line_start":151,"line_end":151,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150710,"byte_end":150713,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150718,"byte_end":150790,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150795,"byte_end":150808,"line_start":154,"line_end":154,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1001},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152708,"byte_end":152719,"line_start":224,"line_end":224,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1003}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151562,"byte_end":151598,"line_start":188,"line_end":188,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151599,"byte_end":151602,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151603,"byte_end":151683,"line_start":190,"line_end":190,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151684,"byte_end":151730,"line_start":191,"line_end":191,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151731,"byte_end":151734,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151735,"byte_end":151799,"line_start":193,"line_end":193,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151800,"byte_end":151803,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151804,"byte_end":151818,"line_start":195,"line_end":195,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151819,"byte_end":151822,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151823,"byte_end":151830,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151831,"byte_end":151859,"line_start":198,"line_end":198,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151860,"byte_end":151876,"line_start":199,"line_end":199,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151877,"byte_end":151907,"line_start":200,"line_end":200,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151908,"byte_end":151945,"line_start":201,"line_end":201,"column_start":1,"column_end":38}},{"value":"/ use flate2::write::ZlibDecoder;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151946,"byte_end":151981,"line_start":202,"line_end":202,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151982,"byte_end":151985,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151986,"byte_end":152003,"line_start":204,"line_end":204,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152004,"byte_end":152078,"line_start":205,"line_end":205,"column_start":1,"column_end":75}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152079,"byte_end":152121,"line_start":206,"line_end":206,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152122,"byte_end":152163,"line_start":207,"line_end":207,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152164,"byte_end":152219,"line_start":208,"line_end":208,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152220,"byte_end":152227,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152228,"byte_end":152233,"line_start":210,"line_end":210,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152234,"byte_end":152314,"line_start":211,"line_end":211,"column_start":1,"column_end":81}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152315,"byte_end":152351,"line_start":212,"line_end":212,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152352,"byte_end":152355,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152356,"byte_end":152416,"line_start":214,"line_end":214,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152417,"byte_end":152452,"line_start":215,"line_end":215,"column_start":1,"column_end":36}},{"value":"/    let mut z = ZlibDecoder::new(writer);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152453,"byte_end":152497,"line_start":216,"line_end":216,"column_start":1,"column_end":45}},{"value":"/    z.write(&bytes[..])?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152498,"byte_end":152526,"line_start":217,"line_end":217,"column_start":1,"column_end":29}},{"value":"/    writer = z.finish()?;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152527,"byte_end":152555,"line_start":218,"line_end":218,"column_start":1,"column_end":29}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152556,"byte_end":152640,"line_start":219,"line_end":219,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152641,"byte_end":152665,"line_start":220,"line_end":220,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152666,"byte_end":152671,"line_start":221,"line_end":221,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152672,"byte_end":152679,"line_start":222,"line_end":222,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153006,"byte_end":153009,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"pub fn new(W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152811,"byte_end":152886,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152891,"byte_end":152894,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ When this decoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152899,"byte_end":152974,"line_start":232,"line_end":232,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152979,"byte_end":152994,"line_start":233,"line_end":233,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153204,"byte_end":153211,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153142,"byte_end":153192,"line_start":240,"line_end":240,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153488,"byte_end":153495,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153267,"byte_end":153325,"line_start":245,"line_end":245,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153330,"byte_end":153333,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153338,"byte_end":153414,"line_start":247,"line_end":247,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153419,"byte_end":153476,"line_start":248,"line_end":248,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154109,"byte_end":154114,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153559,"byte_end":153629,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153634,"byte_end":153657,"line_start":254,"line_end":254,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153662,"byte_end":153665,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153670,"byte_end":153740,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153745,"byte_end":153815,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153820,"byte_end":153893,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153898,"byte_end":153924,"line_start":259,"line_end":259,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153929,"byte_end":153932,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153937,"byte_end":153949,"line_start":261,"line_end":261,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153954,"byte_end":153957,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":153962,"byte_end":154033,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154038,"byte_end":154097,"line_start":264,"line_end":264,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154895,"byte_end":154905,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154280,"byte_end":154355,"line_start":271,"line_end":271,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154360,"byte_end":154363,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154368,"byte_end":154441,"line_start":273,"line_end":273,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154446,"byte_end":154522,"line_start":274,"line_end":274,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154527,"byte_end":154570,"line_start":275,"line_end":275,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154575,"byte_end":154578,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154583,"byte_end":154595,"line_start":277,"line_end":277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154600,"byte_end":154603,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154608,"byte_end":154682,"line_start":279,"line_end":279,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154687,"byte_end":154710,"line_start":280,"line_end":280,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154715,"byte_end":154718,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154723,"byte_end":154735,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154740,"byte_end":154743,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154748,"byte_end":154819,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154824,"byte_end":154883,"line_start":285,"line_end":285,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155719,"byte_end":155725,"line_start":305,"line_end":305,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":154976,"byte_end":155030,"line_start":290,"line_end":290,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155035,"byte_end":155038,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155043,"byte_end":155119,"line_start":292,"line_end":292,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155124,"byte_end":155158,"line_start":293,"line_end":293,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155163,"byte_end":155166,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155171,"byte_end":155247,"line_start":295,"line_end":295,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155252,"byte_end":155327,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155332,"byte_end":155402,"line_start":297,"line_end":297,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155407,"byte_end":155480,"line_start":298,"line_end":298,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155485,"byte_end":155534,"line_start":299,"line_end":299,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155539,"byte_end":155542,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155547,"byte_end":155559,"line_start":301,"line_end":301,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155564,"byte_end":155567,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155572,"byte_end":155643,"line_start":303,"line_end":303,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155648,"byte_end":155707,"line_start":304,"line_end":304,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156092,"byte_end":156100,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155837,"byte_end":155907,"line_start":310,"line_end":310,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155912,"byte_end":155930,"line_start":311,"line_end":311,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155935,"byte_end":155938,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":155943,"byte_end":156009,"line_start":313,"line_end":313,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156014,"byte_end":156080,"line_start":314,"line_end":314,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156270,"byte_end":156279,"line_start":321,"line_end":321,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156163,"byte_end":156235,"line_start":319,"line_end":319,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156240,"byte_end":156258,"line_start":320,"line_end":320,"column_start":5,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":699},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3756,"byte_end":3760,"line_start":109,"line_end":109,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Read`] streams, both encoders and decoders for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3582,"byte_end":3659,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/ various formats.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3660,"byte_end":3680,"line_start":106,"line_end":106,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3681,"byte_end":3684,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":3685,"byte_end":3747,"line_start":108,"line_end":108,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":707},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4207,"byte_end":4212,"line_start":123,"line_end":123,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Write`] streams, both encoders and decoders for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4030,"byte_end":4108,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ various formats.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4109,"byte_end":4129,"line_start":120,"line_end":120,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4130,"byte_end":4133,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4134,"byte_end":4198,"line_start":122,"line_end":122,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":713},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4599,"byte_end":4606,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`BufRead`] streams, both encoders and decoders for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4416,"byte_end":4496,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/ various formats.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4497,"byte_end":4517,"line_start":132,"line_end":132,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4518,"byte_end":4521,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":4522,"byte_end":4590,"line_start":134,"line_end":134,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5783,"byte_end":5794,"line_start":165,"line_end":165,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"/ When compressing data, the compression level can be specified by a value in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5632,"byte_end":5711,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/ this enum.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5712,"byte_end":5726,"line_start":163,"line_end":163,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6082,"byte_end":6085,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<Compression>::new","value":"pub fn new(u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[{"value":"/ Creates a new description of the compression level with an explicitly","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5825,"byte_end":5898,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ specified integer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5903,"byte_end":5925,"line_start":169,"line_end":169,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5930,"byte_end":5933,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The integer here is typically on a scale of 0-9 where 0 means \"no","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5938,"byte_end":6007,"line_start":171,"line_end":171,"column_start":5,"column_end":74}},{"value":"/ compression\" and 9 means \"take as long as you'd like\".","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6012,"byte_end":6070,"line_start":172,"line_end":172,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6266,"byte_end":6270,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"none","qualname":"<Compression>::none","value":"pub fn none() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[{"value":"/ No compression is to be performed, this may actually inflate data","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6153,"byte_end":6222,"line_start":177,"line_end":177,"column_start":5,"column_end":74}},{"value":"/ slightly when encoding.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6227,"byte_end":6254,"line_start":178,"line_end":178,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6380,"byte_end":6384,"line_start":184,"line_end":184,"column_start":12,"column_end":16},"name":"fast","qualname":"<Compression>::fast","value":"pub fn fast() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[{"value":"/ Optimize for the best speed of encoding.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6324,"byte_end":6368,"line_start":183,"line_end":183,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6498,"byte_end":6502,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"best","qualname":"<Compression>::best","value":"pub fn best() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[{"value":"/ Optimize for the size of data being encoded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6438,"byte_end":6486,"line_start":188,"line_end":188,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6662,"byte_end":6667,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"pub fn level(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[{"value":"/ Returns an integer representing the compression level, typically on a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6556,"byte_end":6629,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ scale of 0-9","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6634,"byte_end":6650,"line_start":194,"line_end":194,"column_start":5,"column_end":21}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":7464,"byte_end":7473,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":7806,"byte_end":7815,"line_start":32,"line_end":32,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":8142,"byte_end":8151,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":8518,"byte_end":8527,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":9078,"byte_end":9087,"line_start":84,"line_end":84,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10030,"byte_end":10033,"line_start":27,"line_end":27,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11226,"byte_end":11235,"line_start":69,"line_end":69,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11410,"byte_end":11419,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":12056,"byte_end":12065,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":12274,"byte_end":12283,"line_start":114,"line_end":114,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20119,"byte_end":20133,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20537,"byte_end":20551,"line_start":66,"line_end":66,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22116,"byte_end":22130,"line_start":114,"line_end":114,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22387,"byte_end":22401,"line_start":123,"line_end":123,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24033,"byte_end":24047,"line_start":181,"line_end":181,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24304,"byte_end":24318,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":26023,"byte_end":26037,"line_start":245,"line_end":245,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":26296,"byte_end":26310,"line_start":254,"line_end":254,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27897,"byte_end":27911,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28236,"byte_end":28250,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30252,"byte_end":30266,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30485,"byte_end":30499,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32032,"byte_end":32046,"line_start":174,"line_end":174,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32663,"byte_end":32677,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34572,"byte_end":34586,"line_start":244,"line_end":244,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34807,"byte_end":34821,"line_start":253,"line_end":253,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36159,"byte_end":36173,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40823,"byte_end":40837,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41270,"byte_end":41284,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42753,"byte_end":42767,"line_start":225,"line_end":225,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46471,"byte_end":46485,"line_start":325,"line_end":325,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46918,"byte_end":46932,"line_start":343,"line_end":343,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":51556,"byte_end":51569,"line_start":143,"line_end":143,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":51735,"byte_end":51748,"line_start":149,"line_end":149,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":51917,"byte_end":51930,"line_start":157,"line_end":157,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":52073,"byte_end":52086,"line_start":165,"line_end":165,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70591,"byte_end":70600,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71628,"byte_end":71637,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":72237,"byte_end":72246,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":72936,"byte_end":72945,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74314,"byte_end":74323,"line_start":290,"line_end":290,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":75654,"byte_end":75663,"line_start":335,"line_end":335,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76426,"byte_end":76435,"line_start":360,"line_end":360,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76890,"byte_end":76899,"line_start":376,"line_end":376,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78779,"byte_end":78793,"line_start":436,"line_end":436,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":80697,"byte_end":80711,"line_start":496,"line_end":496,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81480,"byte_end":81494,"line_start":521,"line_end":521,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":82026,"byte_end":82040,"line_start":538,"line_end":538,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83396,"byte_end":83405,"line_start":46,"line_end":46,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83861,"byte_end":83870,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84467,"byte_end":84476,"line_start":79,"line_end":79,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84616,"byte_end":84625,"line_start":85,"line_end":85,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85914,"byte_end":85923,"line_start":134,"line_end":134,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86176,"byte_end":86185,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86940,"byte_end":86949,"line_start":169,"line_end":169,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87089,"byte_end":87098,"line_start":175,"line_end":175,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88899,"byte_end":88913,"line_start":230,"line_end":230,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89263,"byte_end":89277,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":90038,"byte_end":90052,"line_start":266,"line_end":266,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":90192,"byte_end":90206,"line_start":272,"line_end":272,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91654,"byte_end":91663,"line_start":53,"line_end":53,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94888,"byte_end":94897,"line_start":143,"line_end":143,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":95546,"byte_end":95555,"line_start":167,"line_end":167,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":95778,"byte_end":95787,"line_start":176,"line_end":176,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55566,"byte_end":55574,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58591,"byte_end":58600,"line_start":121,"line_end":121,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":96538,"byte_end":96546,"line_start":24,"line_end":24,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":97090,"byte_end":97100,"line_start":38,"line_end":38,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":97722,"byte_end":97735,"line_start":58,"line_end":58,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":97936,"byte_end":97951,"line_start":72,"line_end":72,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":99573,"byte_end":99579,"line_start":127,"line_end":127,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":101144,"byte_end":101150,"line_start":187,"line_end":187,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":103181,"byte_end":103187,"line_start":237,"line_end":237,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104955,"byte_end":104961,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105003,"byte_end":105009,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109867,"byte_end":109875,"line_start":178,"line_end":178,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114766,"byte_end":114776,"line_start":297,"line_end":297,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120957,"byte_end":120972,"line_start":453,"line_end":453,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121081,"byte_end":121086,"line_start":457,"line_end":457,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121221,"byte_end":121236,"line_start":463,"line_end":463,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121356,"byte_end":121369,"line_start":469,"line_end":469,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121474,"byte_end":121479,"line_start":473,"line_end":473,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121612,"byte_end":121625,"line_start":479,"line_end":479,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121749,"byte_end":121760,"line_start":485,"line_end":485,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121887,"byte_end":121900,"line_start":490,"line_end":490,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":122037,"byte_end":122043,"line_start":496,"line_end":496,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130800,"byte_end":130811,"line_start":47,"line_end":47,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131204,"byte_end":131215,"line_start":62,"line_end":62,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132780,"byte_end":132791,"line_start":110,"line_end":110,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133045,"byte_end":133056,"line_start":119,"line_end":119,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134557,"byte_end":134568,"line_start":175,"line_end":175,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134918,"byte_end":134929,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136387,"byte_end":136398,"line_start":235,"line_end":235,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136654,"byte_end":136665,"line_start":244,"line_end":244,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138126,"byte_end":138137,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138453,"byte_end":138464,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140466,"byte_end":140477,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140693,"byte_end":140704,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142197,"byte_end":142208,"line_start":172,"line_end":172,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142825,"byte_end":142836,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144731,"byte_end":144742,"line_start":242,"line_end":242,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144960,"byte_end":144971,"line_start":251,"line_end":251,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146325,"byte_end":146336,"line_start":41,"line_end":41,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150916,"byte_end":150927,"line_start":160,"line_end":160,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151349,"byte_end":151360,"line_start":178,"line_end":178,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152790,"byte_end":152801,"line_start":229,"line_end":229,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156366,"byte_end":156377,"line_start":326,"line_end":326,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156807,"byte_end":156818,"line_start":344,"line_end":344,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5807,"byte_end":5818,"line_start":167,"line_end":167,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6725,"byte_end":6736,"line_start":200,"line_end":200,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":7464,"byte_end":7473,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":7806,"byte_end":7815,"line_start":32,"line_end":32,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":8142,"byte_end":8151,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":8518,"byte_end":8527,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":23},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/bufreader.rs","byte_start":9078,"byte_end":9087,"line_start":84,"line_end":84,"column_start":27,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":23},"to":{"krate":1,"index":3151}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":10030,"byte_end":10033,"line_start":27,"line_end":27,"column_start":6,"column_end":9},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11226,"byte_end":11235,"line_start":69,"line_end":69,"column_start":15,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":11410,"byte_end":11419,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":12056,"byte_end":12065,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":737},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/crc.rs","byte_start":12274,"byte_end":12283,"line_start":114,"line_end":114,"column_start":30,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":737},"to":{"krate":1,"index":3151}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20119,"byte_end":20133,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":20537,"byte_end":20551,"line_start":66,"line_end":66,"column_start":9,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22116,"byte_end":22130,"line_start":114,"line_end":114,"column_start":27,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":22387,"byte_end":22401,"line_start":123,"line_end":123,"column_start":36,"column_end":50},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":744},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24033,"byte_end":24047,"line_start":181,"line_end":181,"column_start":18,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":24304,"byte_end":24318,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":26023,"byte_end":26037,"line_start":245,"line_end":245,"column_start":27,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":751},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/bufread.rs","byte_start":26296,"byte_end":26310,"line_start":254,"line_end":254,"column_start":36,"column_end":50},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":751},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":27897,"byte_end":27911,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":28236,"byte_end":28250,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30252,"byte_end":30266,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":758},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":30485,"byte_end":30499,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":758},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32032,"byte_end":32046,"line_start":174,"line_end":174,"column_start":15,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":32663,"byte_end":32677,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34572,"byte_end":34586,"line_start":244,"line_end":244,"column_start":24,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":764},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/read.rs","byte_start":34807,"byte_end":34821,"line_start":253,"line_end":253,"column_start":33,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":764},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":36159,"byte_end":36173,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":40823,"byte_end":40837,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":41270,"byte_end":41284,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":42753,"byte_end":42767,"line_start":225,"line_end":225,"column_start":16,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46471,"byte_end":46485,"line_start":325,"line_end":325,"column_start":26,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":776},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/deflate/write.rs","byte_start":46918,"byte_end":46932,"line_start":343,"line_end":343,"column_start":32,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":776},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":51556,"byte_end":51569,"line_start":143,"line_end":143,"column_start":32,"column_end":45},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":51735,"byte_end":51748,"line_start":149,"line_end":149,"column_start":22,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":51917,"byte_end":51930,"line_start":157,"line_end":157,"column_start":20,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","byte_start":52073,"byte_end":52086,"line_start":165,"line_end":165,"column_start":23,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":2244}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":70591,"byte_end":70600,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":71628,"byte_end":71637,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":72237,"byte_end":72246,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":782},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":72936,"byte_end":72945,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":782},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":74314,"byte_end":74323,"line_start":290,"line_end":290,"column_start":18,"column_end":27},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":75654,"byte_end":75663,"line_start":335,"line_end":335,"column_start":9,"column_end":18},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76426,"byte_end":76435,"line_start":360,"line_end":360,"column_start":27,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":791},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":76890,"byte_end":76899,"line_start":376,"line_end":376,"column_start":36,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":791},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":78779,"byte_end":78793,"line_start":436,"line_end":436,"column_start":18,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":80697,"byte_end":80711,"line_start":496,"line_end":496,"column_start":9,"column_end":23},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":81480,"byte_end":81494,"line_start":521,"line_end":521,"column_start":27,"column_end":41},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":799},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/bufread.rs","byte_start":82026,"byte_end":82040,"line_start":538,"line_end":538,"column_start":36,"column_end":50},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":799},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83396,"byte_end":83405,"line_start":46,"line_end":46,"column_start":15,"column_end":24},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":83861,"byte_end":83870,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84467,"byte_end":84476,"line_start":79,"line_end":79,"column_start":24,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":84616,"byte_end":84625,"line_start":85,"line_end":85,"column_start":33,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":85914,"byte_end":85923,"line_start":134,"line_end":134,"column_start":15,"column_end":24},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86176,"byte_end":86185,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":86940,"byte_end":86949,"line_start":169,"line_end":169,"column_start":24,"column_end":33},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":813},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":87089,"byte_end":87098,"line_start":175,"line_end":175,"column_start":33,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":813},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":88899,"byte_end":88913,"line_start":230,"line_end":230,"column_start":15,"column_end":29},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":89263,"byte_end":89277,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":90038,"byte_end":90052,"line_start":266,"line_end":266,"column_start":24,"column_end":38},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/read.rs","byte_start":90192,"byte_end":90206,"line_start":272,"line_end":272,"column_start":33,"column_end":47},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":819},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":91654,"byte_end":91663,"line_start":53,"line_end":53,"column_start":16,"column_end":25},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":94888,"byte_end":94897,"line_start":143,"line_end":143,"column_start":26,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":825},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":95546,"byte_end":95555,"line_start":167,"line_end":167,"column_start":32,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":825},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/write.rs","byte_start":95778,"byte_end":95787,"line_start":176,"line_end":176,"column_start":25,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":825},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":55566,"byte_end":55574,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/gz/mod.rs","byte_start":58591,"byte_end":58600,"line_start":121,"line_end":121,"column_start":6,"column_end":15},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":96538,"byte_end":96546,"line_start":24,"line_end":24,"column_start":14,"column_end":22},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":866},"to":{"krate":0,"index":462}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":97090,"byte_end":97100,"line_start":38,"line_end":38,"column_start":14,"column_end":24},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":870},"to":{"krate":0,"index":462}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":97722,"byte_end":97735,"line_start":58,"line_end":58,"column_start":16,"column_end":29},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":889},"to":{"krate":0,"index":480}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":97936,"byte_end":97951,"line_start":72,"line_end":72,"column_start":16,"column_end":31},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":918},"to":{"krate":0,"index":480}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":99573,"byte_end":99579,"line_start":127,"line_end":127,"column_start":24,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":101144,"byte_end":101150,"line_start":187,"line_end":187,"column_start":34,"column_end":40},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":856},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zio.rs","byte_start":103181,"byte_end":103187,"line_start":237,"line_end":237,"column_start":33,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":856},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":104955,"byte_end":104961,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":105003,"byte_end":105009,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":109867,"byte_end":109875,"line_start":178,"line_end":178,"column_start":6,"column_end":14},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":114766,"byte_end":114776,"line_start":297,"line_end":297,"column_start":6,"column_end":16},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":120957,"byte_end":120972,"line_start":453,"line_end":453,"column_start":16,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":941},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121081,"byte_end":121086,"line_start":457,"line_end":457,"column_start":36,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":2659},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121221,"byte_end":121236,"line_start":463,"line_end":463,"column_start":23,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":941},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121356,"byte_end":121369,"line_start":469,"line_end":469,"column_start":16,"column_end":29},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":946},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121474,"byte_end":121479,"line_start":473,"line_end":473,"column_start":34,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":2659},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121612,"byte_end":121625,"line_start":479,"line_end":479,"column_start":23,"column_end":36},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":946},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121749,"byte_end":121760,"line_start":485,"line_end":485,"column_start":20,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":883},"to":{"krate":0,"index":530}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":121887,"byte_end":121900,"line_start":490,"line_end":490,"column_start":20,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":886},"to":{"krate":0,"index":530}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/mem.rs","byte_start":122037,"byte_end":122043,"line_start":496,"line_end":496,"column_start":29,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":130800,"byte_end":130811,"line_start":47,"line_end":47,"column_start":18,"column_end":29},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":131204,"byte_end":131215,"line_start":62,"line_end":62,"column_start":9,"column_end":20},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":132780,"byte_end":132791,"line_start":110,"line_end":110,"column_start":27,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":969},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":133045,"byte_end":133056,"line_start":119,"line_end":119,"column_start":36,"column_end":47},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":969},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134557,"byte_end":134568,"line_start":175,"line_end":175,"column_start":18,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":134918,"byte_end":134929,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136387,"byte_end":136398,"line_start":235,"line_end":235,"column_start":27,"column_end":38},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":976},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/bufread.rs","byte_start":136654,"byte_end":136665,"line_start":244,"line_end":244,"column_start":36,"column_end":47},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":976},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138126,"byte_end":138137,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":138453,"byte_end":138464,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140466,"byte_end":140477,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":983},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":140693,"byte_end":140704,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":983},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142197,"byte_end":142208,"line_start":172,"line_end":172,"column_start":15,"column_end":26},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":142825,"byte_end":142836,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144731,"byte_end":144742,"line_start":242,"line_end":242,"column_start":24,"column_end":35},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/read.rs","byte_start":144960,"byte_end":144971,"line_start":251,"line_end":251,"column_start":33,"column_end":44},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":146325,"byte_end":146336,"line_start":41,"line_end":41,"column_start":16,"column_end":27},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":995},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":150916,"byte_end":150927,"line_start":160,"line_end":160,"column_start":26,"column_end":37},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":995},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":151349,"byte_end":151360,"line_start":178,"line_end":178,"column_start":32,"column_end":43},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":995},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":152790,"byte_end":152801,"line_start":229,"line_end":229,"column_start":16,"column_end":27},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1001},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156366,"byte_end":156377,"line_start":326,"line_end":326,"column_start":26,"column_end":37},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1001},"to":{"krate":1,"index":3127}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/zlib/write.rs","byte_start":156807,"byte_end":156818,"line_start":344,"line_end":344,"column_start":32,"column_end":43},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1001},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":5807,"byte_end":5818,"line_start":167,"line_end":167,"column_start":6,"column_end":17},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","byte_start":6725,"byte_end":6736,"line_start":200,"line_end":200,"column_start":18,"column_end":29},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1007},"to":{"krate":2,"index":2022}}]}