{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4","program":"/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","parking_lot","/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"owning_ref\"","-C","metadata=44d781d287c681d2","-C","extra-filename=-44d781d287c681d2","--out-dir","/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","-L","dependency=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","--extern","owning_ref=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libowning_ref-194ef8b50c57a90d.rmeta","--extern","parking_lot_core=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libparking_lot_core-6fd2f73d6b83a051.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libparking_lot-44d781d287c681d2.rmeta"},"prelude":{"crate_id":{"name":"parking_lot","disambiguator":[10506412194566014744,5356546038010244498]},"crate_root":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src","external_crates":[{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":16,"id":{"name":"owning_ref","disambiguator":[17474200199922494482,2403595965018194842]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":17,"id":{"name":"stable_deref_trait","disambiguator":[18308454576481566026,3614472565272176724]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":18,"id":{"name":"parking_lot_core","disambiguator":[11784301432788962401,16902298075578928742]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":19,"id":{"name":"rand","disambiguator":[12935295990718815645,1114038091553806569]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":20,"id":{"name":"libc","disambiguator":[8000104344433599533,15219794654319678357]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","num":21,"id":{"name":"smallvec","disambiguator":[7327706963203420483,12948725154870857443]}}],"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":333,"byte_end":2402,"line_start":8,"line_end":66,"column_start":1,"column_end":52}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":566},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1089,"byte_end":1093,"line_start":38,"line_end":38,"column_start":16,"column_end":20},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":656},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1095,"byte_end":1104,"line_start":38,"line_end":38,"column_start":22,"column_end":31},"alias_span":null,"name":"OnceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":569},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1106,"byte_end":1115,"line_start":38,"line_end":38,"column_start":33,"column_end":42},"alias_span":null,"name":"ONCE_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":245},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1134,"byte_end":1139,"line_start":39,"line_end":39,"column_start":17,"column_end":22},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1141,"byte_end":1151,"line_start":39,"line_end":39,"column_start":24,"column_end":34},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":322},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1172,"byte_end":1186,"line_start":40,"line_end":40,"column_start":19,"column_end":33},"alias_span":null,"name":"ReentrantMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":330},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1188,"byte_end":1207,"line_start":40,"line_end":40,"column_start":35,"column_end":54},"alias_span":null,"name":"ReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1228,"byte_end":1235,"line_start":41,"line_end":41,"column_start":19,"column_end":26},"alias_span":null,"name":"Condvar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1237,"byte_end":1254,"line_start":41,"line_end":41,"column_start":28,"column_end":45},"alias_span":null,"name":"WaitTimeoutResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1274,"byte_end":1280,"line_start":42,"line_end":42,"column_start":18,"column_end":24},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1282,"byte_end":1297,"line_start":42,"line_end":42,"column_start":26,"column_end":41},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1299,"byte_end":1324,"line_start":42,"line_end":42,"column_start":43,"column_end":68},"alias_span":null,"name":"RwLockUpgradableReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1326,"byte_end":1342,"line_start":42,"line_end":42,"column_start":70,"column_end":86},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":333,"byte_end":2402,"line_start":8,"line_end":66,"column_start":1,"column_end":52},"name":"","qualname":"::","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":14},{"krate":0,"index":25},{"krate":0,"index":62},{"krate":0,"index":91},{"krate":0,"index":185},{"krate":0,"index":232},{"krate":0,"index":311},{"krate":0,"index":381},{"krate":0,"index":544},{"krate":0,"index":594},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":621},{"krate":0,"index":625},{"krate":0,"index":629},{"krate":0,"index":633}],"decl_id":null,"docs":" This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n `Once` that are smaller, faster and more flexible than those in the Rust\n standard library. It also provides a `ReentrantMutex` type.\n","sig":null,"attributes":[{"value":"/ This library provides implementations of `Mutex`, `RwLock`, `Condvar` and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":333,"byte_end":410,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ `Once` that are smaller, faster and more flexible than those in the Rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":411,"byte_end":487,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ standard library. It also provides a `ReentrantMutex` type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":488,"byte_end":551,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":553,"byte_end":575,"line_start":12,"line_end":12,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":17},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/elision.rs","byte_start":3760,"byte_end":3767,"line_start":12,"line_end":12,"column_start":10,"column_end":17},"name":"IntType","qualname":"::elision::AtomicElisionExt::IntType","value":"type IntType;","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":641},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":63969,"byte_end":63986,"line_start":19,"line_end":19,"column_start":12,"column_end":29},"name":"WaitTimeoutResult","qualname":"::condvar::WaitTimeoutResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type indicating whether a timed wait on a condition variable returned\n due to a time out or not.\n","sig":null,"attributes":[{"value":"/ A type indicating whether a timed wait on a condition variable returned","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":63807,"byte_end":63882,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ due to a time out or not.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":63883,"byte_end":63912,"line_start":17,"line_end":17,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64107,"byte_end":64116,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"timed_out","qualname":"<WaitTimeoutResult>::timed_out","value":"pub fn timed_out(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the wait was known to have timed out.\n","sig":null,"attributes":[{"value":"/ Returns whether the wait was known to have timed out.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64024,"byte_end":64081,"line_start":22,"line_end":22,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64086,"byte_end":64095,"line_start":23,"line_end":23,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":209},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66267,"byte_end":66274,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"Condvar","qualname":"::condvar::Condvar","value":"Condvar {  }","parent":null,"children":[{"krate":0,"index":210}],"decl_id":null,"docs":" A Condition Variable","sig":null,"attributes":[{"value":"/ A Condition Variable","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64158,"byte_end":64182,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64183,"byte_end":64186,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Condition variables represent the ability to block a thread such that it","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64187,"byte_end":64263,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/ consumes no CPU time while waiting for an event to occur. Condition","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64264,"byte_end":64335,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ variables are typically associated with a boolean predicate (a condition)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64336,"byte_end":64413,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ and a mutex. The predicate is always verified inside of the mutex before","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64414,"byte_end":64490,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ determining that thread must block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64491,"byte_end":64530,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64531,"byte_end":64534,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Note that this module places one additional restriction over the system","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64535,"byte_end":64610,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ condition variables: each condvar can be used with only one mutex at a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64611,"byte_end":64685,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ time. Any attempt to use multiple mutexes on the same condition variable","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64686,"byte_end":64762,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ simultaneously will result in a runtime panic. However it is possible to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64763,"byte_end":64839,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ switch to a different mutex if there are no threads currently waiting on","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64840,"byte_end":64916,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ the condition variable.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64917,"byte_end":64944,"line_start":42,"line_end":42,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64945,"byte_end":64948,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Condvar`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64949,"byte_end":65002,"line_start":44,"line_end":44,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65003,"byte_end":65006,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ - No spurious wakeups: A wait will only return a non-timeout result if it","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65007,"byte_end":65084,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/   was woken up by `notify_one` or `notify_all`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65085,"byte_end":65136,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/ - `Condvar::notify_all` will only wake up a single thread, the rest are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65137,"byte_end":65212,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/   requeued to wait for the `Mutex` to be unlocked by the thread that was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65213,"byte_end":65289,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/   woken up.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65290,"byte_end":65305,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65306,"byte_end":65381,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/   `Condvar` due to platform limitations.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65382,"byte_end":65426,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65427,"byte_end":65505,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65506,"byte_end":65556,"line_start":54,"line_end":54,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65557,"byte_end":65605,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65606,"byte_end":65609,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65610,"byte_end":65624,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65625,"byte_end":65628,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65629,"byte_end":65636,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Mutex, Condvar};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65637,"byte_end":65675,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65676,"byte_end":65699,"line_start":61,"line_end":61,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65700,"byte_end":65720,"line_start":62,"line_end":62,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65721,"byte_end":65724,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let pair = Arc::new((Mutex::new(false), Condvar::new()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65725,"byte_end":65786,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/ let pair2 = pair.clone();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65787,"byte_end":65816,"line_start":65,"line_end":65,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65817,"byte_end":65820,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // Inside of our lock, spawn a new thread, and then wait for it to start","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65821,"byte_end":65897,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/ thread::spawn(move|| {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65898,"byte_end":65924,"line_start":68,"line_end":68,"column_start":1,"column_end":27}},{"value":"/     let &(ref lock, ref cvar) = &*pair2;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65925,"byte_end":65969,"line_start":69,"line_end":69,"column_start":1,"column_end":45}},{"value":"/     let mut started = lock.lock();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":65970,"byte_end":66008,"line_start":70,"line_end":70,"column_start":1,"column_end":39}},{"value":"/     *started = true;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66009,"byte_end":66033,"line_start":71,"line_end":71,"column_start":1,"column_end":25}},{"value":"/     cvar.notify_one();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66034,"byte_end":66060,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/ });","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66061,"byte_end":66068,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66069,"byte_end":66072,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // wait for the thread to start up","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66073,"byte_end":66111,"line_start":75,"line_end":75,"column_start":1,"column_end":39}},{"value":"/ let &(ref lock, ref cvar) = &*pair;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66112,"byte_end":66151,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ let mut started = lock.lock();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66152,"byte_end":66186,"line_start":77,"line_end":77,"column_start":1,"column_end":35}},{"value":"/ while !*started {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66187,"byte_end":66208,"line_start":78,"line_end":78,"column_start":1,"column_end":22}},{"value":"/     cvar.wait(&mut started);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66209,"byte_end":66241,"line_start":79,"line_end":79,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66242,"byte_end":66247,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66248,"byte_end":66255,"line_start":81,"line_end":81,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66746,"byte_end":66749,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Condvar>::new","value":"pub fn new() -> Condvar","parent":null,"children":[],"decl_id":null,"docs":" Creates a new condition variable which is ready to be waited on and\n notified.\n","sig":null,"attributes":[{"value":"/ Creates a new condition variable which is ready to be waited on and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66594,"byte_end":66665,"line_start":97,"line_end":97,"column_start":5,"column_end":76}},{"value":"/ notified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66670,"byte_end":66683,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66688,"byte_end":66720,"line_start":99,"line_end":99,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66725,"byte_end":66734,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":67198,"byte_end":67208,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Condvar>::notify_one","value":"pub fn notify_one(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Wakes up one blocked thread on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up one blocked thread on this condvar.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66856,"byte_end":66904,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66909,"byte_end":66912,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ If there is a blocked thread on this condition variable, then it will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66917,"byte_end":66990,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/ be woken up from its call to `wait` or `wait_timeout`. Calls to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66995,"byte_end":67062,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ `notify_one` are not buffered in any way.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":67067,"byte_end":67112,"line_start":111,"line_end":111,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":67117,"byte_end":67120,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ To wake up all threads, see `notify_all()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":67125,"byte_end":67172,"line_start":113,"line_end":113,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":67177,"byte_end":67186,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68265,"byte_end":68275,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Condvar>::notify_all","value":"pub fn notify_all(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Wakes up all blocked threads on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up all blocked threads on this condvar.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":67954,"byte_end":68003,"line_start":141,"line_end":141,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68008,"byte_end":68011,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ This method will ensure that any current waiters on the condition","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68016,"byte_end":68085,"line_start":143,"line_end":143,"column_start":5,"column_end":74}},{"value":"/ variable are awoken. Calls to `notify_all()` are not buffered in any","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68090,"byte_end":68162,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ way.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68167,"byte_end":68175,"line_start":145,"line_end":145,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68180,"byte_end":68183,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ To wake up only one thread, see `notify_one()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68188,"byte_end":68239,"line_start":147,"line_end":147,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":68244,"byte_end":68253,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71219,"byte_end":71223,"line_start":218,"line_end":218,"column_start":12,"column_end":16},"name":"wait","qualname":"<Condvar>::wait","value":"pub fn wait<T: ?Sized>(&Self, &mut MutexGuard<, T>)","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification.","sig":null,"attributes":[{"value":"/ Blocks the current thread until this condition variable receives a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70570,"byte_end":70640,"line_start":204,"line_end":204,"column_start":5,"column_end":75}},{"value":"/ notification.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70645,"byte_end":70662,"line_start":205,"line_end":205,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70667,"byte_end":70670,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This function will atomically unlock the mutex specified (represented by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70675,"byte_end":70751,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ `mutex_guard`) and block the current thread. This means that any calls","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70756,"byte_end":70830,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ to `notify_*()` which happen logically after the mutex is unlocked are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70835,"byte_end":70909,"line_start":209,"line_end":209,"column_start":5,"column_end":79}},{"value":"/ candidates to wake this thread up. When this function call returns, the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70914,"byte_end":70989,"line_start":210,"line_end":210,"column_start":5,"column_end":80}},{"value":"/ lock specified will have been re-acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":70994,"byte_end":71040,"line_start":211,"line_end":211,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71045,"byte_end":71048,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71053,"byte_end":71065,"line_start":213,"line_end":213,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71070,"byte_end":71073,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71078,"byte_end":71152,"line_start":215,"line_end":215,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71157,"byte_end":71193,"line_start":216,"line_end":216,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71198,"byte_end":71207,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72470,"byte_end":72480,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"wait_until","qualname":"<Condvar>::wait_until","value":"pub fn wait_until<T: ?Sized>(&Self, &mut MutexGuard<, T>, Instant)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71353,"byte_end":71426,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ the specified time instant.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71431,"byte_end":71462,"line_start":223,"line_end":223,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71467,"byte_end":71470,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71475,"byte_end":71548,"line_start":225,"line_end":225,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked roughly until `timeout` is reached. This","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71553,"byte_end":71624,"line_start":226,"line_end":226,"column_start":5,"column_end":76}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71629,"byte_end":71702,"line_start":227,"line_end":227,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71707,"byte_end":71776,"line_start":228,"line_end":228,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71781,"byte_end":71833,"line_start":229,"line_end":229,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71838,"byte_end":71841,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71846,"byte_end":71917,"line_start":231,"line_end":231,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":71922,"byte_end":71998,"line_start":232,"line_end":232,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72003,"byte_end":72023,"line_start":233,"line_end":233,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72028,"byte_end":72031,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72036,"byte_end":72106,"line_start":235,"line_end":235,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72111,"byte_end":72137,"line_start":236,"line_end":236,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72142,"byte_end":72145,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72150,"byte_end":72224,"line_start":238,"line_end":238,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72229,"byte_end":72291,"line_start":239,"line_end":239,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72296,"byte_end":72299,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72304,"byte_end":72316,"line_start":241,"line_end":241,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72321,"byte_end":72324,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72329,"byte_end":72403,"line_start":243,"line_end":243,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72408,"byte_end":72444,"line_start":244,"line_end":244,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":72449,"byte_end":72458,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76526,"byte_end":76534,"line_start":341,"line_end":341,"column_start":12,"column_end":20},"name":"wait_for","qualname":"<Condvar>::wait_for","value":"pub fn wait_for<T: ?Sized>(&Self, &mut MutexGuard<, T>, Duration)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75566,"byte_end":75641,"line_start":322,"line_end":322,"column_start":5,"column_end":80}},{"value":"/ specified duration.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75646,"byte_end":75669,"line_start":323,"line_end":323,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75674,"byte_end":75677,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75682,"byte_end":75755,"line_start":325,"line_end":325,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked for roughly no longer than `timeout`. This","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75760,"byte_end":75833,"line_start":326,"line_end":326,"column_start":5,"column_end":78}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75838,"byte_end":75911,"line_start":327,"line_end":327,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75916,"byte_end":75985,"line_start":328,"line_end":328,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":75990,"byte_end":76042,"line_start":329,"line_end":329,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76047,"byte_end":76050,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76055,"byte_end":76126,"line_start":331,"line_end":331,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76131,"byte_end":76207,"line_start":332,"line_end":332,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76212,"byte_end":76232,"line_start":333,"line_end":333,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76237,"byte_end":76240,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76245,"byte_end":76315,"line_start":335,"line_end":335,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76320,"byte_end":76346,"line_start":336,"line_end":336,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76351,"byte_end":76354,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76359,"byte_end":76433,"line_start":338,"line_end":338,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76438,"byte_end":76500,"line_start":339,"line_end":339,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76505,"byte_end":76514,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":245},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84947,"byte_end":84952,"line_start":96,"line_end":96,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":81558,"byte_end":81624,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":81625,"byte_end":81628,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":81629,"byte_end":81708,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":81709,"byte_end":81776,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":81777,"byte_end":81856,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":81857,"byte_end":81932,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":81933,"byte_end":82012,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82013,"byte_end":82056,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82057,"byte_end":82060,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82061,"byte_end":82075,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82076,"byte_end":82079,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82080,"byte_end":82159,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same mutex in succession, which can starve","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82160,"byte_end":82240,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/ other threads waiting to acquire the mutex. While this improves performance","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82241,"byte_end":82320,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82321,"byte_end":82400,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ a mutex it has just released, this can starve other threads.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82401,"byte_end":82465,"line_start":34,"line_end":34,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82466,"byte_end":82469,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ This mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82470,"byte_end":82551,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82552,"byte_end":82623,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/ performance. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82624,"byte_end":82702,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ which will force the lock to go to the next thread waiting for the mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82703,"byte_end":82780,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82781,"byte_end":82784,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82785,"byte_end":82862,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible performance impact compared to the length of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82863,"byte_end":82942,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ the critical section.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82943,"byte_end":82968,"line_start":43,"line_end":43,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82969,"byte_end":82972,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `MutexGuard::unlock_fair` when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":82973,"byte_end":83051,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ unlocking a mutex instead of simply dropping the `MutexGuard`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83052,"byte_end":83118,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83119,"byte_end":83122,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83123,"byte_end":83174,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83175,"byte_end":83178,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83179,"byte_end":83238,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83239,"byte_end":83314,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/   `Mutex` due to platform limitations.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83315,"byte_end":83357,"line_start":52,"line_end":52,"column_start":1,"column_end":43}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83358,"byte_end":83436,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83437,"byte_end":83487,"line_start":54,"line_end":54,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83488,"byte_end":83536,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83537,"byte_end":83606,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83607,"byte_end":83660,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the mutex is fair on average.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83661,"byte_end":83731,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ - Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83732,"byte_end":83815,"line_start":59,"line_end":59,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83816,"byte_end":83819,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83820,"byte_end":83834,"line_start":61,"line_end":61,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83835,"byte_end":83838,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83839,"byte_end":83846,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83847,"byte_end":83870,"line_start":64,"line_end":64,"column_start":1,"column_end":24}},{"value":"/ use parking_lot::Mutex;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83871,"byte_end":83898,"line_start":65,"line_end":65,"column_start":1,"column_end":28}},{"value":"/ use std::thread;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83899,"byte_end":83919,"line_start":66,"line_end":66,"column_start":1,"column_end":21}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83920,"byte_end":83953,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83954,"byte_end":83957,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83958,"byte_end":83982,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83983,"byte_end":83986,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":83987,"byte_end":84066,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84067,"byte_end":84128,"line_start":72,"line_end":72,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84129,"byte_end":84135,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84136,"byte_end":84217,"line_start":74,"line_end":74,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84218,"byte_end":84259,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(Mutex::new(0));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84260,"byte_end":84299,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84300,"byte_end":84303,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84304,"byte_end":84333,"line_start":78,"line_end":78,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84334,"byte_end":84354,"line_start":79,"line_end":79,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (data.clone(), tx.clone());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84355,"byte_end":84407,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84408,"byte_end":84439,"line_start":81,"line_end":81,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84440,"byte_end":84515,"line_start":82,"line_end":82,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84516,"byte_end":84593,"line_start":83,"line_end":83,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84594,"byte_end":84665,"line_start":84,"line_end":84,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84666,"byte_end":84705,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84706,"byte_end":84729,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84730,"byte_end":84757,"line_start":87,"line_end":87,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84758,"byte_end":84795,"line_start":88,"line_end":88,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84796,"byte_end":84809,"line_start":89,"line_end":89,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84810,"byte_end":84881,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84882,"byte_end":84893,"line_start":91,"line_end":91,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84894,"byte_end":84899,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84900,"byte_end":84903,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84904,"byte_end":84927,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":84928,"byte_end":84935,"line_start":95,"line_end":95,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":253},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85408,"byte_end":85418,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85116,"byte_end":85196,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85197,"byte_end":85257,"line_start":105,"line_end":105,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85258,"byte_end":85261,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85262,"byte_end":85340,"line_start":107,"line_end":107,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85341,"byte_end":85384,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85385,"byte_end":85396,"line_start":109,"line_end":109,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85996,"byte_end":85999,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<T>>::new","value":"pub fn new(T) -> Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85874,"byte_end":85933,"line_start":129,"line_end":129,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85938,"byte_end":85970,"line_start":130,"line_end":130,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85975,"byte_end":85984,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86214,"byte_end":86224,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86133,"byte_end":86188,"line_start":139,"line_end":139,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86193,"byte_end":86202,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87045,"byte_end":87049,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86507,"byte_end":86583,"line_start":156,"line_end":156,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86588,"byte_end":86591,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86596,"byte_end":86674,"line_start":158,"line_end":158,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86679,"byte_end":86754,"line_start":159,"line_end":159,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86759,"byte_end":86835,"line_start":160,"line_end":160,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86840,"byte_end":86900,"line_start":161,"line_end":161,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86905,"byte_end":86908,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86913,"byte_end":86989,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86994,"byte_end":87019,"line_start":164,"line_end":164,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87024,"byte_end":87033,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87435,"byte_end":87443,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87133,"byte_end":87167,"line_start":171,"line_end":171,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87172,"byte_end":87175,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87180,"byte_end":87256,"line_start":173,"line_end":173,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87261,"byte_end":87337,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87342,"byte_end":87363,"line_start":175,"line_end":175,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87368,"byte_end":87371,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87376,"byte_end":87409,"line_start":177,"line_end":177,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87414,"byte_end":87423,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87894,"byte_end":87906,"line_start":193,"line_end":193,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<T>>::try_lock_for","value":"pub fn try_lock_for(&Self, Duration) -> Option<MutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87597,"byte_end":87658,"line_start":187,"line_end":187,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87663,"byte_end":87666,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87671,"byte_end":87741,"line_start":189,"line_end":189,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87746,"byte_end":87821,"line_start":190,"line_end":190,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87826,"byte_end":87868,"line_start":191,"line_end":191,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":87873,"byte_end":87882,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88387,"byte_end":88401,"line_start":207,"line_end":207,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<T>>::try_lock_until","value":"pub fn try_lock_until(&Self, Instant) -> Option<MutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88090,"byte_end":88151,"line_start":201,"line_end":201,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88156,"byte_end":88159,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88164,"byte_end":88234,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88239,"byte_end":88314,"line_start":204,"line_end":204,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88319,"byte_end":88361,"line_start":205,"line_end":205,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88366,"byte_end":88375,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88833,"byte_end":88840,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88586,"byte_end":88641,"line_start":215,"line_end":215,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88646,"byte_end":88649,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88654,"byte_end":88729,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88734,"byte_end":88807,"line_start":218,"line_end":218,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88812,"byte_end":88821,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89224,"byte_end":89234,"line_start":232,"line_end":232,"column_start":19,"column_end":29},"name":"raw_unlock","qualname":"<Mutex<T>>::raw_unlock","value":"pub unsafe fn raw_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases the mutex.","sig":null,"attributes":[{"value":"/ Releases the mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88916,"byte_end":88939,"line_start":224,"line_end":224,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88944,"byte_end":88947,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88952,"byte_end":88964,"line_start":226,"line_end":226,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88969,"byte_end":88972,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the mutex was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":88977,"byte_end":89044,"line_start":228,"line_end":228,"column_start":5,"column_end":72}},{"value":"/ `raw_lock` or `raw_try_lock`, or if a `MutexGuard` from this mutex was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89049,"byte_end":89123,"line_start":229,"line_end":229,"column_start":5,"column_end":79}},{"value":"/ leaked (e.g. with `mem::forget`). The mutex must be locked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89128,"byte_end":89191,"line_start":230,"line_end":230,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89196,"byte_end":89205,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89671,"byte_end":89686,"line_start":246,"line_end":246,"column_start":19,"column_end":34},"name":"raw_unlock_fair","qualname":"<Mutex<T>>::raw_unlock_fair","value":"pub unsafe fn raw_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases the mutex using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89287,"byte_end":89339,"line_start":236,"line_end":236,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89344,"byte_end":89347,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ See `MutexGuard::unlock_fair`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89352,"byte_end":89386,"line_start":238,"line_end":238,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89391,"byte_end":89394,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89399,"byte_end":89411,"line_start":240,"line_end":240,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89416,"byte_end":89419,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the mutex was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89424,"byte_end":89491,"line_start":242,"line_end":242,"column_start":5,"column_end":72}},{"value":"/ `raw_lock` or `raw_try_lock`, or if a `MutexGuard` from this mutex was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89496,"byte_end":89570,"line_start":243,"line_end":243,"column_start":5,"column_end":79}},{"value":"/ leaked (e.g. with `mem::forget`). The mutex must be locked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89575,"byte_end":89638,"line_start":244,"line_end":244,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89643,"byte_end":89652,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90018,"byte_end":90026,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"raw_lock","qualname":"<Mutex<()>>::raw_lock","value":"pub fn raw_lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89756,"byte_end":89832,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89837,"byte_end":89840,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is similar to `lock`, except that a `MutexGuard` is not returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89845,"byte_end":89919,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ Instead you will need to call `raw_unlock` to release the mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89924,"byte_end":89992,"line_start":254,"line_end":254,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89997,"byte_end":90006,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90304,"byte_end":90316,"line_start":266,"line_end":266,"column_start":12,"column_end":24},"name":"raw_try_lock","qualname":"<Mutex<()>>::raw_try_lock","value":"pub fn raw_try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90072,"byte_end":90106,"line_start":260,"line_end":260,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90111,"byte_end":90114,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This is similar to `try_lock`, except that a `MutexGuard` is not","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90119,"byte_end":90187,"line_start":262,"line_end":262,"column_start":5,"column_end":73}},{"value":"/ returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90192,"byte_end":90263,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90268,"byte_end":90278,"line_start":264,"line_end":264,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90283,"byte_end":90292,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91636,"byte_end":91647,"line_start":301,"line_end":301,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90855,"byte_end":90906,"line_start":288,"line_end":288,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90911,"byte_end":90914,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90919,"byte_end":90993,"line_start":290,"line_end":290,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90998,"byte_end":91070,"line_start":291,"line_end":291,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91075,"byte_end":91149,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91154,"byte_end":91229,"line_start":293,"line_end":293,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91234,"byte_end":91305,"line_start":294,"line_end":294,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91310,"byte_end":91367,"line_start":295,"line_end":295,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91372,"byte_end":91375,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91380,"byte_end":91456,"line_start":297,"line_end":297,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91461,"byte_end":91537,"line_start":298,"line_end":298,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91542,"byte_end":91610,"line_start":299,"line_end":299,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91615,"byte_end":91624,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92124,"byte_end":92127,"line_start":315,"line_end":315,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MutexGuard where F: FnOnce(&mut T) ->\n&mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MutexGuard` for a component of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91725,"byte_end":91788,"line_start":306,"line_end":306,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91793,"byte_end":91796,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91801,"byte_end":91858,"line_start":308,"line_end":308,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91863,"byte_end":91895,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91900,"byte_end":91903,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91908,"byte_end":91959,"line_start":311,"line_end":311,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":91964,"byte_end":92040,"line_start":312,"line_end":312,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92045,"byte_end":92098,"line_start":313,"line_end":313,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92103,"byte_end":92112,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":322},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98736,"byte_end":98750,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98218,"byte_end":98281,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98282,"byte_end":98285,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98286,"byte_end":98356,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98357,"byte_end":98360,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98361,"byte_end":98441,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98442,"byte_end":98460,"line_start":24,"line_end":24,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98461,"byte_end":98541,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98542,"byte_end":98581,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ - `ReentrantMutexGuard` is not `Send`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98582,"byte_end":98624,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98625,"byte_end":98628,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98629,"byte_end":98709,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98710,"byte_end":98724,"line_start":30,"line_end":30,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":330},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99227,"byte_end":99246,"line_start":45,"line_end":45,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98941,"byte_end":99028,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99029,"byte_end":99092,"line_start":40,"line_end":40,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99093,"byte_end":99096,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99097,"byte_end":99175,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99176,"byte_end":99203,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"must_use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99204,"byte_end":99215,"line_start":44,"line_end":44,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99896,"byte_end":99899,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<T>>::new","value":"pub fn new(T) -> ReentrantMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99764,"byte_end":99833,"line_start":64,"line_end":64,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99838,"byte_end":99870,"line_start":65,"line_end":65,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99875,"byte_end":99884,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100151,"byte_end":100161,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this reentrant mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this reentrant mutex, returning the underlying data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100060,"byte_end":100125,"line_start":74,"line_end":74,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100130,"byte_end":100139,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101110,"byte_end":101114,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100471,"byte_end":100547,"line_start":91,"line_end":91,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100552,"byte_end":100565,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100570,"byte_end":100573,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100578,"byte_end":100654,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100659,"byte_end":100735,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100740,"byte_end":100816,"line_start":96,"line_end":96,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100821,"byte_end":100885,"line_start":97,"line_end":97,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100890,"byte_end":100961,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100966,"byte_end":101041,"line_start":99,"line_end":99,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101046,"byte_end":101084,"line_start":100,"line_end":100,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101089,"byte_end":101098,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101509,"byte_end":101517,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101207,"byte_end":101241,"line_start":107,"line_end":107,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101246,"byte_end":101249,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101254,"byte_end":101330,"line_start":109,"line_end":109,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101335,"byte_end":101411,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101416,"byte_end":101437,"line_start":111,"line_end":111,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101442,"byte_end":101445,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101450,"byte_end":101483,"line_start":113,"line_end":113,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101488,"byte_end":101497,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101977,"byte_end":101989,"line_start":129,"line_end":129,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<T>>::try_lock_for","value":"pub fn try_lock_for(&Self, Duration) -> Option<ReentrantMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101680,"byte_end":101741,"line_start":123,"line_end":123,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101746,"byte_end":101749,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101754,"byte_end":101824,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101829,"byte_end":101904,"line_start":126,"line_end":126,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101909,"byte_end":101951,"line_start":127,"line_end":127,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":101956,"byte_end":101965,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102479,"byte_end":102493,"line_start":143,"line_end":143,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<T>>::try_lock_until","value":"pub fn try_lock_until(&Self, Instant) -> Option<ReentrantMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102182,"byte_end":102243,"line_start":137,"line_end":137,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102248,"byte_end":102251,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102256,"byte_end":102326,"line_start":139,"line_end":139,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102331,"byte_end":102406,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102411,"byte_end":102453,"line_start":141,"line_end":141,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102458,"byte_end":102467,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102943,"byte_end":102950,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102687,"byte_end":102742,"line_start":151,"line_end":151,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102747,"byte_end":102750,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102755,"byte_end":102839,"line_start":153,"line_end":153,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102844,"byte_end":102917,"line_start":154,"line_end":154,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":102922,"byte_end":102931,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103343,"byte_end":103353,"line_start":168,"line_end":168,"column_start":19,"column_end":29},"name":"raw_unlock","qualname":"<ReentrantMutex<T>>::raw_unlock","value":"pub unsafe fn raw_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases the mutex.","sig":null,"attributes":[{"value":"/ Releases the mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103026,"byte_end":103049,"line_start":160,"line_end":160,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103054,"byte_end":103057,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103062,"byte_end":103074,"line_start":162,"line_end":162,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103079,"byte_end":103082,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the mutex was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103087,"byte_end":103154,"line_start":164,"line_end":164,"column_start":5,"column_end":72}},{"value":"/ `raw_lock` or `raw_try_lock`, or if a `ReentrantMutexGuard` from this mutex was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103159,"byte_end":103242,"line_start":165,"line_end":165,"column_start":5,"column_end":88}},{"value":"/ leaked (e.g. with `mem::forget`). The mutex must be locked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103247,"byte_end":103310,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103315,"byte_end":103324,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103808,"byte_end":103823,"line_start":182,"line_end":182,"column_start":19,"column_end":34},"name":"raw_unlock_fair","qualname":"<ReentrantMutex<T>>::raw_unlock_fair","value":"pub unsafe fn raw_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases the mutex using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103406,"byte_end":103458,"line_start":172,"line_end":172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103463,"byte_end":103466,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ See `ReentrantMutexGuard::unlock_fair`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103471,"byte_end":103514,"line_start":174,"line_end":174,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103519,"byte_end":103522,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103527,"byte_end":103539,"line_start":176,"line_end":176,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103544,"byte_end":103547,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the mutex was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103552,"byte_end":103619,"line_start":178,"line_end":178,"column_start":5,"column_end":72}},{"value":"/ `raw_lock` or `raw_try_lock`, or if a `ReentrantMutexGuard` from this mutex was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103624,"byte_end":103707,"line_start":179,"line_end":179,"column_start":5,"column_end":88}},{"value":"/ leaked (e.g. with `mem::forget`). The mutex must be locked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103712,"byte_end":103775,"line_start":180,"line_end":180,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103780,"byte_end":103789,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104173,"byte_end":104181,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"raw_lock","qualname":"<ReentrantMutex<()>>::raw_lock","value":"pub fn raw_lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103902,"byte_end":103978,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103983,"byte_end":103986,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ This is similar to `lock`, except that a `ReentrantMutexGuard` is not returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103991,"byte_end":104074,"line_start":189,"line_end":189,"column_start":5,"column_end":88}},{"value":"/ Instead you will need to call `raw_unlock` to release the mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104079,"byte_end":104147,"line_start":190,"line_end":190,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104152,"byte_end":104161,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104468,"byte_end":104480,"line_start":202,"line_end":202,"column_start":12,"column_end":24},"name":"raw_try_lock","qualname":"<ReentrantMutex<()>>::raw_try_lock","value":"pub fn raw_try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104227,"byte_end":104261,"line_start":196,"line_end":196,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104266,"byte_end":104269,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This is similar to `try_lock`, except that a `ReentrantMutexGuard` is not","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104274,"byte_end":104351,"line_start":198,"line_end":198,"column_start":5,"column_end":82}},{"value":"/ returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104356,"byte_end":104427,"line_start":199,"line_end":199,"column_start":5,"column_end":76}},{"value":"/ mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104432,"byte_end":104442,"line_start":200,"line_end":200,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104447,"byte_end":104456,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105872,"byte_end":105883,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105082,"byte_end":105133,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105138,"byte_end":105141,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105146,"byte_end":105220,"line_start":226,"line_end":226,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105225,"byte_end":105297,"line_start":227,"line_end":227,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105302,"byte_end":105376,"line_start":228,"line_end":228,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105381,"byte_end":105456,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105461,"byte_end":105532,"line_start":230,"line_end":230,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105537,"byte_end":105594,"line_start":231,"line_end":231,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105599,"byte_end":105602,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105607,"byte_end":105683,"line_start":233,"line_end":233,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105688,"byte_end":105764,"line_start":234,"line_end":234,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105769,"byte_end":105846,"line_start":235,"line_end":235,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105851,"byte_end":105860,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106387,"byte_end":106390,"line_start":251,"line_end":251,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> ReentrantMutexGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `ReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `ReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105961,"byte_end":106033,"line_start":242,"line_end":242,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106038,"byte_end":106041,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106046,"byte_end":106112,"line_start":244,"line_end":244,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106117,"byte_end":106149,"line_start":245,"line_end":245,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106154,"byte_end":106157,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106162,"byte_end":106213,"line_start":247,"line_end":247,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106218,"byte_end":106292,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ methods of the same name on the contents of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106297,"byte_end":106361,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106366,"byte_end":106375,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112596,"byte_end":112602,"line_start":97,"line_end":97,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109035,"byte_end":109059,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109060,"byte_end":109063,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109064,"byte_end":109141,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109142,"byte_end":109221,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109222,"byte_end":109301,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109302,"byte_end":109360,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109361,"byte_end":109364,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This lock uses a task-fair locking policy which avoids both reader and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109365,"byte_end":109439,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ writer starvation. This means that readers trying to acquire the lock will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109440,"byte_end":109518,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ block even if the lock is unlocked when there are writers waiting to acquire","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109519,"byte_end":109599,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ the lock. Because of this, attempts to recursively acquire a read lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109600,"byte_end":109674,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ within a single thread may result in a deadlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109675,"byte_end":109727,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109728,"byte_end":109731,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109732,"byte_end":109809,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109810,"byte_end":109890,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109891,"byte_end":109969,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":109970,"byte_end":110048,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110049,"byte_end":110098,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110099,"byte_end":110102,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110103,"byte_end":110117,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110118,"byte_end":110121,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110122,"byte_end":110201,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same lock in succession, which can starve","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110202,"byte_end":110281,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ other threads waiting to acquire the rwlock. While this improves performance","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110282,"byte_end":110362,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110363,"byte_end":110442,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ a rwlock it has just released, this can starve other threads.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110443,"byte_end":110508,"line_start":44,"line_end":44,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110509,"byte_end":110512,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110513,"byte_end":110595,"line_start":46,"line_end":46,"column_start":1,"column_end":83}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110596,"byte_end":110667,"line_start":47,"line_end":47,"column_start":1,"column_end":72}},{"value":"/ performance. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110668,"byte_end":110746,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/ which will force the lock to go to the next thread waiting for the rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110747,"byte_end":110825,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110826,"byte_end":110829,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110830,"byte_end":110907,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible performance impact compared to the length of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110908,"byte_end":110987,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ the critical section.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":110988,"byte_end":111013,"line_start":53,"line_end":53,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111014,"byte_end":111017,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111018,"byte_end":111096,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ or `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111097,"byte_end":111176,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/ dropping the guard.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111177,"byte_end":111200,"line_start":57,"line_end":57,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111201,"byte_end":111204,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `RwLock`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111205,"byte_end":111257,"line_start":59,"line_end":59,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111258,"byte_end":111261,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ - Supports atomically downgrading a write lock into a read lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111262,"byte_end":111330,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"/ - Task-fair locking policy instead of an unspecified platform default.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111331,"byte_end":111405,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111406,"byte_end":111465,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111466,"byte_end":111541,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/   `RwLock` due to platform limitations.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111542,"byte_end":111585,"line_start":65,"line_end":65,"column_start":1,"column_end":44}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111586,"byte_end":111664,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111665,"byte_end":111715,"line_start":67,"line_end":67,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111716,"byte_end":111764,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111765,"byte_end":111834,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111835,"byte_end":111888,"line_start":70,"line_end":70,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the rwlock is fair on average.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111889,"byte_end":111960,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/ - Optionally allows making the rwlock fair by calling","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":111961,"byte_end":112018,"line_start":72,"line_end":72,"column_start":1,"column_end":58}},{"value":"/   `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112019,"byte_end":112092,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112093,"byte_end":112096,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112097,"byte_end":112111,"line_start":75,"line_end":75,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112112,"byte_end":112115,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112116,"byte_end":112123,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::RwLock;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112124,"byte_end":112152,"line_start":78,"line_end":78,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112153,"byte_end":112156,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112157,"byte_end":112187,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112188,"byte_end":112191,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112192,"byte_end":112236,"line_start":82,"line_end":82,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112237,"byte_end":112242,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112243,"byte_end":112272,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112273,"byte_end":112302,"line_start":85,"line_end":85,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112303,"byte_end":112330,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112331,"byte_end":112358,"line_start":87,"line_end":87,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112359,"byte_end":112404,"line_start":88,"line_end":88,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112405,"byte_end":112408,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112409,"byte_end":112456,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112457,"byte_end":112462,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112463,"byte_end":112496,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112497,"byte_end":112513,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112514,"byte_end":112540,"line_start":94,"line_end":94,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112541,"byte_end":112576,"line_start":95,"line_end":95,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112577,"byte_end":112584,"line_start":96,"line_end":96,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":402},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112885,"byte_end":112900,"line_start":108,"line_end":108,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112776,"byte_end":112848,"line_start":105,"line_end":105,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112849,"byte_end":112861,"line_start":106,"line_end":106,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112862,"byte_end":112873,"line_start":107,"line_end":107,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113190,"byte_end":113206,"line_start":119,"line_end":119,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113077,"byte_end":113153,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113154,"byte_end":113166,"line_start":117,"line_end":117,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113167,"byte_end":113178,"line_start":118,"line_end":118,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":420},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113499,"byte_end":113524,"line_start":130,"line_end":130,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113386,"byte_end":113462,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113463,"byte_end":113475,"line_start":128,"line_end":128,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113476,"byte_end":113487,"line_start":129,"line_end":129,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114396,"byte_end":114399,"line_start":168,"line_end":168,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<T>>::new","value":"pub fn new(T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114135,"byte_end":114198,"line_start":157,"line_end":157,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114203,"byte_end":114206,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114211,"byte_end":114225,"line_start":159,"line_end":159,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114230,"byte_end":114233,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114238,"byte_end":114245,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::RwLock;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114250,"byte_end":114278,"line_start":162,"line_end":162,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114283,"byte_end":114286,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114291,"byte_end":114321,"line_start":164,"line_end":164,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114326,"byte_end":114333,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114338,"byte_end":114370,"line_start":166,"line_end":166,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114375,"byte_end":114384,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114620,"byte_end":114630,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114536,"byte_end":114594,"line_start":175,"line_end":175,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114599,"byte_end":114608,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115968,"byte_end":115972,"line_start":223,"line_end":223,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115362,"byte_end":115436,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115441,"byte_end":115470,"line_start":211,"line_end":211,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115475,"byte_end":115478,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115483,"byte_end":115559,"line_start":213,"line_end":213,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115564,"byte_end":115640,"line_start":214,"line_end":214,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115645,"byte_end":115669,"line_start":215,"line_end":215,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115674,"byte_end":115677,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115682,"byte_end":115758,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115763,"byte_end":115829,"line_start":218,"line_end":218,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115834,"byte_end":115837,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115842,"byte_end":115914,"line_start":220,"line_end":220,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115919,"byte_end":115942,"line_start":221,"line_end":221,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":115947,"byte_end":115956,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116410,"byte_end":116418,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116078,"byte_end":116138,"line_start":228,"line_end":228,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116143,"byte_end":116146,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116151,"byte_end":116228,"line_start":230,"line_end":230,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116233,"byte_end":116310,"line_start":231,"line_end":231,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116315,"byte_end":116338,"line_start":232,"line_end":232,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116343,"byte_end":116346,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116351,"byte_end":116384,"line_start":234,"line_end":234,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116389,"byte_end":116398,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116929,"byte_end":116941,"line_start":251,"line_end":251,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<T>>::try_read_for","value":"pub fn try_read_for(&Self, Duration) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access until a timeout","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116594,"byte_end":116669,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/ is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116674,"byte_end":116689,"line_start":245,"line_end":245,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116694,"byte_end":116697,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116702,"byte_end":116773,"line_start":247,"line_end":247,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116778,"byte_end":116849,"line_start":248,"line_end":248,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116854,"byte_end":116903,"line_start":249,"line_end":249,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":116908,"byte_end":116917,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117484,"byte_end":117498,"line_start":266,"line_end":266,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<T>>::try_read_until","value":"pub fn try_read_until(&Self, Instant) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access until a timeout","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117149,"byte_end":117224,"line_start":259,"line_end":259,"column_start":5,"column_end":80}},{"value":"/ is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117229,"byte_end":117244,"line_start":260,"line_end":260,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117249,"byte_end":117252,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117257,"byte_end":117328,"line_start":262,"line_end":262,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117333,"byte_end":117404,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117409,"byte_end":117458,"line_start":264,"line_end":264,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117463,"byte_end":117472,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118498,"byte_end":118512,"line_start":290,"line_end":290,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117707,"byte_end":117781,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117786,"byte_end":117815,"line_start":275,"line_end":275,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117820,"byte_end":117823,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117828,"byte_end":117904,"line_start":277,"line_end":277,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117909,"byte_end":117985,"line_start":278,"line_end":278,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":117990,"byte_end":118014,"line_start":279,"line_end":279,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118019,"byte_end":118022,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118027,"byte_end":118102,"line_start":281,"line_end":281,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118107,"byte_end":118182,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118187,"byte_end":118258,"line_start":283,"line_end":283,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118263,"byte_end":118337,"line_start":284,"line_end":284,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118342,"byte_end":118359,"line_start":285,"line_end":285,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118364,"byte_end":118367,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118372,"byte_end":118444,"line_start":287,"line_end":287,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118449,"byte_end":118472,"line_start":288,"line_end":288,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118477,"byte_end":118486,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119120,"byte_end":119138,"line_start":306,"line_end":306,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118617,"byte_end":118677,"line_start":295,"line_end":295,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118682,"byte_end":118685,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118690,"byte_end":118767,"line_start":297,"line_end":297,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118772,"byte_end":118849,"line_start":298,"line_end":298,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118854,"byte_end":118877,"line_start":299,"line_end":299,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118882,"byte_end":118885,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118890,"byte_end":118966,"line_start":301,"line_end":301,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":118971,"byte_end":119048,"line_start":302,"line_end":302,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119053,"byte_end":119056,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119061,"byte_end":119094,"line_start":304,"line_end":304,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119099,"byte_end":119108,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119844,"byte_end":119866,"line_start":325,"line_end":325,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, Duration) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access until a timeout","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119313,"byte_end":119388,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119393,"byte_end":119408,"line_start":315,"line_end":315,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119413,"byte_end":119416,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119421,"byte_end":119492,"line_start":317,"line_end":317,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119497,"byte_end":119568,"line_start":318,"line_end":318,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119573,"byte_end":119622,"line_start":319,"line_end":319,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119627,"byte_end":119630,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119635,"byte_end":119708,"line_start":321,"line_end":321,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119713,"byte_end":119780,"line_start":322,"line_end":322,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119785,"byte_end":119818,"line_start":323,"line_end":323,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":119823,"byte_end":119832,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120408,"byte_end":120432,"line_start":340,"line_end":340,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, Instant)\n-> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access until a timeout","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120073,"byte_end":120148,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120153,"byte_end":120168,"line_start":334,"line_end":334,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120173,"byte_end":120176,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120181,"byte_end":120252,"line_start":336,"line_end":336,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120257,"byte_end":120328,"line_start":337,"line_end":337,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120333,"byte_end":120382,"line_start":338,"line_end":338,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120387,"byte_end":120396,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121012,"byte_end":121017,"line_start":357,"line_end":357,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with exclusive write access, blocking the current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120640,"byte_end":120711,"line_start":348,"line_end":348,"column_start":5,"column_end":76}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120716,"byte_end":120752,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120757,"byte_end":120760,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120765,"byte_end":120835,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120840,"byte_end":120878,"line_start":352,"line_end":352,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120883,"byte_end":120886,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this rwlock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120891,"byte_end":120964,"line_start":354,"line_end":354,"column_start":5,"column_end":78}},{"value":"/ when dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120969,"byte_end":120986,"line_start":355,"line_end":355,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":120991,"byte_end":121000,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121446,"byte_end":121455,"line_start":370,"line_end":370,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this rwlock with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this rwlock with exclusive write access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121123,"byte_end":121184,"line_start":362,"line_end":362,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121189,"byte_end":121192,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121197,"byte_end":121273,"line_start":364,"line_end":364,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121278,"byte_end":121351,"line_start":365,"line_end":365,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121356,"byte_end":121374,"line_start":366,"line_end":366,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121379,"byte_end":121382,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121387,"byte_end":121420,"line_start":368,"line_end":368,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121425,"byte_end":121434,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121973,"byte_end":121986,"line_start":385,"line_end":385,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<T>>::try_write_for","value":"pub fn try_write_for(&Self, Duration) -> Option<RwLockWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with exclusive write access until a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121631,"byte_end":121702,"line_start":378,"line_end":378,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121707,"byte_end":121730,"line_start":379,"line_end":379,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121735,"byte_end":121738,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121743,"byte_end":121814,"line_start":381,"line_end":381,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121819,"byte_end":121890,"line_start":382,"line_end":382,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121895,"byte_end":121947,"line_start":383,"line_end":383,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":121952,"byte_end":121961,"line_start":384,"line_end":384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122534,"byte_end":122549,"line_start":400,"line_end":400,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<T>>::try_write_until","value":"pub fn try_write_until(&Self, Instant) -> Option<RwLockWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with exclusive write access until a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122192,"byte_end":122263,"line_start":393,"line_end":393,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122268,"byte_end":122291,"line_start":394,"line_end":394,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122296,"byte_end":122299,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122304,"byte_end":122375,"line_start":396,"line_end":396,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122380,"byte_end":122451,"line_start":397,"line_end":397,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122456,"byte_end":122508,"line_start":398,"line_end":398,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122513,"byte_end":122522,"line_start":399,"line_end":399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123232,"byte_end":123247,"line_start":418,"line_end":418,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with upgradable read access, blocking the current thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122756,"byte_end":122834,"line_start":408,"line_end":408,"column_start":5,"column_end":83}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122839,"byte_end":122868,"line_start":409,"line_end":409,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122873,"byte_end":122876,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122881,"byte_end":122960,"line_start":411,"line_end":411,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":122965,"byte_end":123043,"line_start":412,"line_end":412,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123048,"byte_end":123093,"line_start":413,"line_end":413,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123098,"byte_end":123101,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123106,"byte_end":123178,"line_start":415,"line_end":415,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123183,"byte_end":123206,"line_start":416,"line_end":416,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123211,"byte_end":123220,"line_start":417,"line_end":417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123704,"byte_end":123723,"line_start":431,"line_end":431,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with upgradable read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123368,"byte_end":123432,"line_start":423,"line_end":423,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123437,"byte_end":123440,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123445,"byte_end":123522,"line_start":425,"line_end":425,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123527,"byte_end":123604,"line_start":426,"line_end":426,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123609,"byte_end":123632,"line_start":427,"line_end":427,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123637,"byte_end":123640,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123645,"byte_end":123678,"line_start":429,"line_end":429,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123683,"byte_end":123692,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124253,"byte_end":124276,"line_start":446,"line_end":446,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, Duration)\n-> Option<RwLockUpgradableReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with upgradable read access until a timeout","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123914,"byte_end":123993,"line_start":439,"line_end":439,"column_start":5,"column_end":84}},{"value":"/ is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":123998,"byte_end":124013,"line_start":440,"line_end":440,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124018,"byte_end":124021,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124026,"byte_end":124097,"line_start":442,"line_end":442,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124102,"byte_end":124173,"line_start":443,"line_end":443,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124178,"byte_end":124227,"line_start":444,"line_end":444,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124232,"byte_end":124241,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124859,"byte_end":124884,"line_start":464,"line_end":464,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, Instant)\n-> Option<RwLockUpgradableReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with upgradable read access until a timeout","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124520,"byte_end":124599,"line_start":457,"line_end":457,"column_start":5,"column_end":84}},{"value":"/ is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124604,"byte_end":124619,"line_start":458,"line_end":458,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124624,"byte_end":124627,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124632,"byte_end":124703,"line_start":460,"line_end":460,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124708,"byte_end":124779,"line_start":461,"line_end":461,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124784,"byte_end":124833,"line_start":462,"line_end":462,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":124838,"byte_end":124847,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125377,"byte_end":125384,"line_start":480,"line_end":480,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125129,"byte_end":125184,"line_start":475,"line_end":475,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125189,"byte_end":125192,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125197,"byte_end":125273,"line_start":477,"line_end":477,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125278,"byte_end":125351,"line_start":478,"line_end":478,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125356,"byte_end":125365,"line_start":479,"line_end":479,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125832,"byte_end":125847,"line_start":493,"line_end":493,"column_start":19,"column_end":34},"name":"raw_unlock_read","qualname":"<RwLock<T>>::raw_unlock_read","value":"pub unsafe fn raw_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases shared read access of the rwlock.","sig":null,"attributes":[{"value":"/ Releases shared read access of the rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125460,"byte_end":125506,"line_start":484,"line_end":484,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125511,"byte_end":125514,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125519,"byte_end":125531,"line_start":486,"line_end":486,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125536,"byte_end":125539,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125544,"byte_end":125612,"line_start":488,"line_end":488,"column_start":5,"column_end":73}},{"value":"/ `raw_read` or `raw_try_read`, or if an `RwLockReadGuard` from this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125617,"byte_end":125687,"line_start":489,"line_end":489,"column_start":5,"column_end":75}},{"value":"/ rwlock was leaked (e.g. with `mem::forget`). The rwlock must be locked","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125692,"byte_end":125766,"line_start":490,"line_end":490,"column_start":5,"column_end":79}},{"value":"/ with shared read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125771,"byte_end":125799,"line_start":491,"line_end":491,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125804,"byte_end":125813,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126290,"byte_end":126306,"line_start":506,"line_end":506,"column_start":19,"column_end":35},"name":"raw_unlock_write","qualname":"<RwLock<T>>::raw_unlock_write","value":"pub unsafe fn raw_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases exclusive write access of the rwlock.","sig":null,"attributes":[{"value":"/ Releases exclusive write access of the rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125907,"byte_end":125957,"line_start":497,"line_end":497,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125962,"byte_end":125965,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125970,"byte_end":125982,"line_start":499,"line_end":499,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125987,"byte_end":125990,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":125995,"byte_end":126063,"line_start":501,"line_end":501,"column_start":5,"column_end":73}},{"value":"/ `raw_write` or `raw_try_write`, or if an `RwLockWriteGuard` from this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126068,"byte_end":126141,"line_start":502,"line_end":502,"column_start":5,"column_end":78}},{"value":"/ rwlock was leaked (e.g. with `mem::forget`). The rwlock must be locked","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126146,"byte_end":126220,"line_start":503,"line_end":503,"column_start":5,"column_end":79}},{"value":"/ with exclusive write access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126225,"byte_end":126257,"line_start":504,"line_end":504,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126262,"byte_end":126271,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126781,"byte_end":126807,"line_start":519,"line_end":519,"column_start":19,"column_end":45},"name":"raw_unlock_upgradable_read","qualname":"<RwLock<T>>::raw_unlock_upgradable_read","value":"pub unsafe fn raw_unlock_upgradable_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases upgradable read access of the rwlock.","sig":null,"attributes":[{"value":"/ Releases upgradable read access of the rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126369,"byte_end":126419,"line_start":510,"line_end":510,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126424,"byte_end":126427,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126432,"byte_end":126444,"line_start":512,"line_end":512,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126449,"byte_end":126452,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126457,"byte_end":126525,"line_start":514,"line_end":514,"column_start":5,"column_end":73}},{"value":"/ `raw_upgradable_read` or `raw_try_upgradable_read`, or if an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126530,"byte_end":126594,"line_start":515,"line_end":515,"column_start":5,"column_end":69}},{"value":"/ `RwLockUpgradableReadGuard` from this rwlock was leaked (e.g. with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126599,"byte_end":126669,"line_start":516,"line_end":516,"column_start":5,"column_end":75}},{"value":"/ `mem::forget`). The rwlock must be locked with upgradable read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126674,"byte_end":126748,"line_start":517,"line_end":517,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126753,"byte_end":126762,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127421,"byte_end":127441,"line_start":535,"line_end":535,"column_start":19,"column_end":39},"name":"raw_unlock_read_fair","qualname":"<RwLock<T>>::raw_unlock_read_fair","value":"pub unsafe fn raw_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases shared read access of the rwlock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases shared read access of the rwlock using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126871,"byte_end":126946,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126951,"byte_end":126954,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ See `RwLockReadGuard::unlock_fair`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":126959,"byte_end":126998,"line_start":525,"line_end":525,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127003,"byte_end":127006,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127011,"byte_end":127023,"line_start":527,"line_end":527,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127028,"byte_end":127031,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127036,"byte_end":127104,"line_start":529,"line_end":529,"column_start":5,"column_end":73}},{"value":"/ `raw_write` or `raw_try_write`, a raw upgradable read lock was upgraded","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127109,"byte_end":127184,"line_start":530,"line_end":530,"column_start":5,"column_end":80}},{"value":"/ using `raw_upgrade` or `raw_try_upgrade`, or if an `RwLockWriteGuard`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127189,"byte_end":127262,"line_start":531,"line_end":531,"column_start":5,"column_end":78}},{"value":"/ from this rwlock was leaked (e.g. with `mem::forget`). The rwlock must","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127267,"byte_end":127341,"line_start":532,"line_end":532,"column_start":5,"column_end":79}},{"value":"/ be locked with exclusive write access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127346,"byte_end":127388,"line_start":533,"line_end":533,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127393,"byte_end":127402,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128063,"byte_end":128084,"line_start":552,"line_end":552,"column_start":19,"column_end":40},"name":"raw_unlock_write_fair","qualname":"<RwLock<T>>::raw_unlock_write_fair","value":"pub unsafe fn raw_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases exclusive write access of the rwlock using a fair unlock\n protocol.","sig":null,"attributes":[{"value":"/ Releases exclusive write access of the rwlock using a fair unlock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127500,"byte_end":127569,"line_start":539,"line_end":539,"column_start":5,"column_end":74}},{"value":"/ protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127574,"byte_end":127587,"line_start":540,"line_end":540,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127592,"byte_end":127595,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ See `RwLockWriteGuard::unlock_fair`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127600,"byte_end":127640,"line_start":542,"line_end":542,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127645,"byte_end":127648,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127653,"byte_end":127665,"line_start":544,"line_end":544,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127670,"byte_end":127673,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127678,"byte_end":127746,"line_start":546,"line_end":546,"column_start":5,"column_end":73}},{"value":"/ `raw_write` or `raw_try_write`, a raw upgradable read lock was upgraded","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127751,"byte_end":127826,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"/ using `raw_upgrade` or `raw_try_upgrade`, or if an `RwLockWriteGuard`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127831,"byte_end":127904,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/ from this rwlock was leaked (e.g. with `mem::forget`). The rwlock must","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127909,"byte_end":127983,"line_start":549,"line_end":549,"column_start":5,"column_end":79}},{"value":"/ be locked with exclusive write access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":127988,"byte_end":128030,"line_start":550,"line_end":550,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128035,"byte_end":128044,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128595,"byte_end":128626,"line_start":566,"line_end":566,"column_start":19,"column_end":50},"name":"raw_unlock_upgradable_read_fair","qualname":"<RwLock<T>>::raw_unlock_upgradable_read_fair","value":"pub unsafe fn raw_unlock_upgradable_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Releases upgradable read access of the rwlock using a fair unlock\n protocol.","sig":null,"attributes":[{"value":"/ Releases upgradable read access of the rwlock using a fair unlock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128146,"byte_end":128215,"line_start":556,"line_end":556,"column_start":5,"column_end":74}},{"value":"/ protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128220,"byte_end":128233,"line_start":557,"line_end":557,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128238,"byte_end":128241,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128246,"byte_end":128258,"line_start":559,"line_end":559,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128263,"byte_end":128266,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128271,"byte_end":128339,"line_start":561,"line_end":561,"column_start":5,"column_end":73}},{"value":"/ `raw_upgradable_read` or `raw_try_upgradable_read`, or if an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128344,"byte_end":128408,"line_start":562,"line_end":562,"column_start":5,"column_end":69}},{"value":"/ `RwLockUpgradableReadGuard` from this rwlock was leaked (e.g. with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128413,"byte_end":128483,"line_start":563,"line_end":563,"column_start":5,"column_end":75}},{"value":"/ `mem::forget`). The rwlock must be locked with upgradable read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128488,"byte_end":128562,"line_start":564,"line_end":564,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128567,"byte_end":128576,"line_start":565,"line_end":565,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129226,"byte_end":129239,"line_start":582,"line_end":582,"column_start":19,"column_end":32},"name":"raw_downgrade","qualname":"<RwLock<T>>::raw_downgrade","value":"pub unsafe fn raw_downgrade(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a shared read lock without\n allowing any writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a shared read lock without","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128689,"byte_end":128759,"line_start":570,"line_end":570,"column_start":5,"column_end":75}},{"value":"/ allowing any writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128764,"byte_end":128842,"line_start":571,"line_end":571,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128847,"byte_end":128850,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ See `RwLockWriteGuard::downgrade`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128855,"byte_end":128893,"line_start":573,"line_end":573,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128898,"byte_end":128901,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128906,"byte_end":128918,"line_start":575,"line_end":575,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128923,"byte_end":128926,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":128931,"byte_end":128999,"line_start":577,"line_end":577,"column_start":5,"column_end":73}},{"value":"/ `raw_write` or `raw_try_write`, or if an `RwLockWriteGuard` from this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129004,"byte_end":129077,"line_start":578,"line_end":578,"column_start":5,"column_end":78}},{"value":"/ rwlock was leaked (e.g. with `mem::forget`). The rwlock must be locked","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129082,"byte_end":129156,"line_start":579,"line_end":579,"column_start":5,"column_end":79}},{"value":"/ with exclusive write access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129161,"byte_end":129193,"line_start":580,"line_end":580,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129198,"byte_end":129207,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129894,"byte_end":129923,"line_start":599,"line_end":599,"column_start":19,"column_end":48},"name":"raw_downgrade_upgradable_read","qualname":"<RwLock<T>>::raw_downgrade_upgradable_read","value":"pub unsafe fn raw_downgrade_upgradable_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in\n the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock into a shared read lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129300,"byte_end":129373,"line_start":586,"line_end":586,"column_start":5,"column_end":78}},{"value":"/ without allowing any writers to take exclusive access of the lock in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129378,"byte_end":129450,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/ the meantime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129455,"byte_end":129472,"line_start":588,"line_end":588,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129477,"byte_end":129480,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ See `RwLockUpgradableReadGuard::downgrade`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129485,"byte_end":129532,"line_start":590,"line_end":590,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129537,"byte_end":129540,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129545,"byte_end":129557,"line_start":592,"line_end":592,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129562,"byte_end":129565,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129570,"byte_end":129638,"line_start":594,"line_end":594,"column_start":5,"column_end":73}},{"value":"/ `raw_upgradable_read` or `raw_try_upgradable_read`, or if an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129643,"byte_end":129707,"line_start":595,"line_end":595,"column_start":5,"column_end":69}},{"value":"/ `RwLockUpgradableReadGuard` from this rwlock was leaked (e.g. with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129712,"byte_end":129782,"line_start":596,"line_end":596,"column_start":5,"column_end":75}},{"value":"/ `mem::forget`). The rwlock must be locked with upgradable read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129787,"byte_end":129861,"line_start":597,"line_end":597,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129866,"byte_end":129875,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130313,"byte_end":130321,"line_start":612,"line_end":612,"column_start":12,"column_end":20},"name":"raw_read","qualname":"<RwLock<()>>::raw_read","value":"pub fn raw_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130005,"byte_end":130079,"line_start":605,"line_end":605,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130084,"byte_end":130113,"line_start":606,"line_end":606,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130118,"byte_end":130121,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ This is similar to `read`, except that a `RwLockReadGuard` is not","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130126,"byte_end":130195,"line_start":608,"line_end":608,"column_start":5,"column_end":74}},{"value":"/ returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130200,"byte_end":130271,"line_start":609,"line_end":609,"column_start":5,"column_end":76}},{"value":"/ rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130276,"byte_end":130287,"line_start":610,"line_end":610,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130292,"byte_end":130301,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130643,"byte_end":130655,"line_start":622,"line_end":622,"column_start":12,"column_end":24},"name":"raw_try_read","qualname":"<RwLock<()>>::raw_try_read","value":"pub fn raw_try_read(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130379,"byte_end":130439,"line_start":616,"line_end":616,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130444,"byte_end":130447,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ This is similar to `try_read`, except that a `RwLockReadGuard` is not","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130452,"byte_end":130525,"line_start":618,"line_end":618,"column_start":5,"column_end":78}},{"value":"/ returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130530,"byte_end":130601,"line_start":619,"line_end":619,"column_start":5,"column_end":76}},{"value":"/ rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130606,"byte_end":130617,"line_start":620,"line_end":620,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130622,"byte_end":130631,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131042,"byte_end":131060,"line_start":633,"line_end":633,"column_start":12,"column_end":30},"name":"raw_read_recursive","qualname":"<RwLock<()>>::raw_read_recursive","value":"pub fn raw_read_recursive(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130724,"byte_end":130798,"line_start":626,"line_end":626,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130803,"byte_end":130832,"line_start":627,"line_end":627,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130837,"byte_end":130840,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ This is similar to `read_recursive`, except that a `RwLockReadGuard` is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130845,"byte_end":130920,"line_start":629,"line_end":629,"column_start":5,"column_end":80}},{"value":"/ not returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":130925,"byte_end":131000,"line_start":630,"line_end":630,"column_start":5,"column_end":80}},{"value":"/ rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131005,"byte_end":131016,"line_start":631,"line_end":631,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131021,"byte_end":131030,"line_start":632,"line_end":632,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131391,"byte_end":131413,"line_start":643,"line_end":643,"column_start":12,"column_end":34},"name":"raw_try_read_recursive","qualname":"<RwLock<()>>::raw_try_read_recursive","value":"pub fn raw_try_read_recursive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with shared read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131117,"byte_end":131177,"line_start":637,"line_end":637,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131182,"byte_end":131185,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ This is similar to `try_read_recursive`, except that a `RwLockReadGuard` is not","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131190,"byte_end":131273,"line_start":639,"line_end":639,"column_start":5,"column_end":88}},{"value":"/ returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131278,"byte_end":131349,"line_start":640,"line_end":640,"column_start":5,"column_end":76}},{"value":"/ rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131354,"byte_end":131365,"line_start":641,"line_end":641,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131370,"byte_end":131379,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131794,"byte_end":131803,"line_start":654,"line_end":654,"column_start":12,"column_end":21},"name":"raw_write","qualname":"<RwLock<()>>::raw_write","value":"pub fn raw_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with exclusive write access, blocking the current","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131481,"byte_end":131552,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131557,"byte_end":131593,"line_start":648,"line_end":648,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131598,"byte_end":131601,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This is similar to `write`, except that a `RwLockReadGuard` is not","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131606,"byte_end":131676,"line_start":650,"line_end":650,"column_start":5,"column_end":75}},{"value":"/ returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131681,"byte_end":131752,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/ rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131757,"byte_end":131768,"line_start":652,"line_end":652,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131773,"byte_end":131782,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132125,"byte_end":132138,"line_start":664,"line_end":664,"column_start":12,"column_end":25},"name":"raw_try_write","qualname":"<RwLock<()>>::raw_try_write","value":"pub fn raw_try_write(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this rwlock with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this rwlock with exclusive write access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131859,"byte_end":131920,"line_start":658,"line_end":658,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131925,"byte_end":131928,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ This is similar to `try_write`, except that a `RwLockReadGuard` is not","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":131933,"byte_end":132007,"line_start":660,"line_end":660,"column_start":5,"column_end":79}},{"value":"/ returned. Instead you will need to call `raw_unlock` to release the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132012,"byte_end":132083,"line_start":661,"line_end":661,"column_start":5,"column_end":76}},{"value":"/ rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132088,"byte_end":132099,"line_start":662,"line_end":662,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132104,"byte_end":132113,"line_start":663,"line_end":663,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132538,"byte_end":132557,"line_start":675,"line_end":675,"column_start":12,"column_end":31},"name":"raw_upgradable_read","qualname":"<RwLock<()>>::raw_upgradable_read","value":"pub fn raw_upgradable_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with upgradable read access, blocking the current thread","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132205,"byte_end":132283,"line_start":668,"line_end":668,"column_start":5,"column_end":83}},{"value":"/ until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132288,"byte_end":132317,"line_start":669,"line_end":669,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132322,"byte_end":132325,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ This is similar to `upgradable_read`, except that a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132330,"byte_end":132385,"line_start":671,"line_end":671,"column_start":5,"column_end":60}},{"value":"/ `RwLockUpgradableReadGuard` is not returned. Instead you will need to call","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132390,"byte_end":132468,"line_start":672,"line_end":672,"column_start":5,"column_end":83}},{"value":"/ `raw_unlock` to release the rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132473,"byte_end":132512,"line_start":673,"line_end":673,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132517,"byte_end":132526,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132903,"byte_end":132926,"line_start":685,"line_end":685,"column_start":12,"column_end":35},"name":"raw_try_upgradable_read","qualname":"<RwLock<()>>::raw_try_upgradable_read","value":"pub fn raw_try_upgradable_read(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this rwlock with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this rwlock with upgradable read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132614,"byte_end":132678,"line_start":679,"line_end":679,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132683,"byte_end":132686,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ This is similar to `try_upgradable_read`, except that a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132691,"byte_end":132750,"line_start":681,"line_end":681,"column_start":5,"column_end":64}},{"value":"/ `RwLockUpgradableReadGuard` is not returned. Instead you will need to call","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132755,"byte_end":132833,"line_start":682,"line_end":682,"column_start":5,"column_end":83}},{"value":"/ `raw_unlock` to release the rwlock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132838,"byte_end":132877,"line_start":683,"line_end":683,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132882,"byte_end":132891,"line_start":684,"line_end":684,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133555,"byte_end":133566,"line_start":701,"line_end":701,"column_start":19,"column_end":30},"name":"raw_upgrade","qualname":"<RwLock<()>>::raw_upgrade","value":"pub unsafe fn raw_upgrade(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Upgrades this rwlock from upgradable read access to exclusive write access,\n blocking the current thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Upgrades this rwlock from upgradable read access to exclusive write access,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":132994,"byte_end":133073,"line_start":689,"line_end":689,"column_start":5,"column_end":84}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133078,"byte_end":133135,"line_start":690,"line_end":690,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133140,"byte_end":133143,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ See `RwLockUpgradableReadGuard::upgrade`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133148,"byte_end":133193,"line_start":692,"line_end":692,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133198,"byte_end":133201,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133206,"byte_end":133218,"line_start":694,"line_end":694,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133223,"byte_end":133226,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133231,"byte_end":133299,"line_start":696,"line_end":696,"column_start":5,"column_end":73}},{"value":"/ `raw_upgradable_read` or `raw_try_upgradable_read`, or if an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133304,"byte_end":133368,"line_start":697,"line_end":697,"column_start":5,"column_end":69}},{"value":"/ `RwLockUpgradableReadGuard` from this rwlock was leaked (e.g. with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133373,"byte_end":133443,"line_start":698,"line_end":698,"column_start":5,"column_end":75}},{"value":"/ `mem::forget`). The rwlock must be locked with upgradable read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133448,"byte_end":133522,"line_start":699,"line_end":699,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133527,"byte_end":133536,"line_start":700,"line_end":700,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134153,"byte_end":134168,"line_start":717,"line_end":717,"column_start":19,"column_end":34},"name":"raw_try_upgrade","qualname":"<RwLock<()>>::raw_try_upgrade","value":"pub unsafe fn raw_try_upgrade(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to upgrade this rwlock from upgradable read access to exclusive\n write access.","sig":null,"attributes":[{"value":"/ Attempts to upgrade this rwlock from upgradable read access to exclusive","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133631,"byte_end":133707,"line_start":705,"line_end":705,"column_start":5,"column_end":81}},{"value":"/ write access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133712,"byte_end":133729,"line_start":706,"line_end":706,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133734,"byte_end":133737,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ See `RwLockUpgradableReadGuard::try_upgrade`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133742,"byte_end":133791,"line_start":708,"line_end":708,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133796,"byte_end":133799,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133804,"byte_end":133816,"line_start":710,"line_end":710,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133821,"byte_end":133824,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ This function must only be called if the rwlock was locked using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133829,"byte_end":133897,"line_start":712,"line_end":712,"column_start":5,"column_end":73}},{"value":"/ `raw_upgradable_read` or `raw_try_upgradable_read`, or if an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133902,"byte_end":133966,"line_start":713,"line_end":713,"column_start":5,"column_end":69}},{"value":"/ `RwLockUpgradableReadGuard` from this rwlock was leaked (e.g. with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":133971,"byte_end":134041,"line_start":714,"line_end":714,"column_start":5,"column_end":75}},{"value":"/ `mem::forget`). The rwlock must be locked with upgradable read access.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134046,"byte_end":134120,"line_start":715,"line_end":715,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134125,"byte_end":134134,"line_start":716,"line_end":716,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135534,"byte_end":135545,"line_start":752,"line_end":752,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134737,"byte_end":134791,"line_start":739,"line_end":739,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134796,"byte_end":134799,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134804,"byte_end":134878,"line_start":741,"line_end":741,"column_start":5,"column_end":79}},{"value":"/ the rwlock before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134883,"byte_end":134956,"line_start":742,"line_end":742,"column_start":5,"column_end":78}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134961,"byte_end":135034,"line_start":743,"line_end":743,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135039,"byte_end":135108,"line_start":744,"line_end":744,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every rwlock unlock. This can result in one","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135113,"byte_end":135188,"line_start":745,"line_end":745,"column_start":5,"column_end":80}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135193,"byte_end":135260,"line_start":746,"line_end":746,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135265,"byte_end":135268,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135273,"byte_end":135349,"line_start":748,"line_end":748,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135354,"byte_end":135430,"line_start":749,"line_end":749,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135435,"byte_end":135508,"line_start":750,"line_end":750,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135513,"byte_end":135522,"line_start":751,"line_end":751,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136043,"byte_end":136046,"line_start":766,"line_end":766,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> RwLockReadGuard where F: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `RwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `RwLockReadGuard` for a component of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135630,"byte_end":135698,"line_start":757,"line_end":757,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135703,"byte_end":135706,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135711,"byte_end":135773,"line_start":759,"line_end":759,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135778,"byte_end":135809,"line_start":760,"line_end":760,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135814,"byte_end":135817,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135822,"byte_end":135873,"line_start":762,"line_end":762,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135878,"byte_end":135959,"line_start":763,"line_end":763,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":135964,"byte_end":136017,"line_start":764,"line_end":764,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136022,"byte_end":136031,"line_start":765,"line_end":765,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137173,"byte_end":137182,"line_start":806,"line_end":806,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136831,"byte_end":136907,"line_start":800,"line_end":800,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136912,"byte_end":136977,"line_start":801,"line_end":801,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136982,"byte_end":136985,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136990,"byte_end":137063,"line_start":803,"line_end":803,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137068,"byte_end":137141,"line_start":804,"line_end":804,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137146,"byte_end":137161,"line_start":805,"line_end":805,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138001,"byte_end":138004,"line_start":829,"line_end":829,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> RwLockWriteGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `RwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `RwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137585,"byte_end":137654,"line_start":820,"line_end":820,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137659,"byte_end":137662,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137667,"byte_end":137730,"line_start":822,"line_end":822,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137735,"byte_end":137766,"line_start":823,"line_end":823,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137771,"byte_end":137774,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137779,"byte_end":137830,"line_start":825,"line_end":825,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137835,"byte_end":137917,"line_start":826,"line_end":826,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137922,"byte_end":137975,"line_start":827,"line_end":827,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":137980,"byte_end":137989,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139136,"byte_end":139147,"line_start":856,"line_end":856,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138338,"byte_end":138392,"line_start":843,"line_end":843,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138397,"byte_end":138400,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138405,"byte_end":138479,"line_start":845,"line_end":845,"column_start":5,"column_end":79}},{"value":"/ the rwlock before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138484,"byte_end":138557,"line_start":846,"line_end":846,"column_start":5,"column_end":78}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138562,"byte_end":138635,"line_start":847,"line_end":847,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138640,"byte_end":138709,"line_start":848,"line_end":848,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every rwlock unlock. This can result in one","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138714,"byte_end":138789,"line_start":849,"line_end":849,"column_start":5,"column_end":80}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138794,"byte_end":138861,"line_start":850,"line_end":850,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138866,"byte_end":138869,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138874,"byte_end":138950,"line_start":852,"line_end":852,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":138955,"byte_end":139031,"line_start":853,"line_end":853,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139036,"byte_end":139110,"line_start":854,"line_end":854,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139115,"byte_end":139124,"line_start":855,"line_end":855,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140250,"byte_end":140259,"line_start":895,"line_end":895,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139877,"byte_end":139955,"line_start":888,"line_end":888,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139960,"byte_end":140036,"line_start":889,"line_end":889,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140041,"byte_end":140054,"line_start":890,"line_end":890,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140059,"byte_end":140062,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140067,"byte_end":140140,"line_start":892,"line_end":892,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140145,"byte_end":140218,"line_start":893,"line_end":893,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140223,"byte_end":140238,"line_start":894,"line_end":894,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140817,"byte_end":140824,"line_start":911,"line_end":911,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be aquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140663,"byte_end":140744,"line_start":909,"line_end":909,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be aquired.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":140749,"byte_end":140805,"line_start":910,"line_end":910,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":141434,"byte_end":141445,"line_start":928,"line_end":928,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":141237,"byte_end":141321,"line_start":925,"line_end":925,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":141326,"byte_end":141329,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":141334,"byte_end":141422,"line_start":927,"line_end":927,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142228,"byte_end":142243,"line_start":950,"line_end":950,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":141973,"byte_end":142045,"line_start":945,"line_end":945,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142050,"byte_end":142093,"line_start":946,"line_end":946,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142098,"byte_end":142101,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142106,"byte_end":142177,"line_start":948,"line_end":948,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142182,"byte_end":142216,"line_start":949,"line_end":949,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143070,"byte_end":143087,"line_start":973,"line_end":973,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142801,"byte_end":142873,"line_start":967,"line_end":967,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142878,"byte_end":142921,"line_start":968,"line_end":968,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142926,"byte_end":142929,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":142934,"byte_end":143005,"line_start":970,"line_end":970,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143010,"byte_end":143044,"line_start":971,"line_end":971,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143049,"byte_end":143058,"line_start":972,"line_end":972,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144453,"byte_end":144464,"line_start":1003,"line_end":1003,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143646,"byte_end":143700,"line_start":990,"line_end":990,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143705,"byte_end":143708,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143713,"byte_end":143787,"line_start":992,"line_end":992,"column_start":5,"column_end":79}},{"value":"/ the rwlock before another has the chance to acquire the lock, even if","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143792,"byte_end":143865,"line_start":993,"line_end":993,"column_start":5,"column_end":78}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143870,"byte_end":143943,"line_start":994,"line_end":994,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":143948,"byte_end":144017,"line_start":995,"line_end":995,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every rwlock unlock. This can result in one","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144022,"byte_end":144097,"line_start":996,"line_end":996,"column_start":5,"column_end":80}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144102,"byte_end":144169,"line_start":997,"line_end":997,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144174,"byte_end":144177,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144182,"byte_end":144258,"line_start":999,"line_end":999,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144263,"byte_end":144339,"line_start":1000,"line_end":1000,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144344,"byte_end":144427,"line_start":1001,"line_end":1001,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144432,"byte_end":144441,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":657},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157306,"byte_end":157309,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"name":"New","qualname":"::once::OnceState::New","value":"OnceState::New","parent":{"krate":0,"index":656},"children":[],"decl_id":null,"docs":" A closure has not been executed yet\n","sig":null,"attributes":[{"value":"/ A closure has not been executed yet","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157262,"byte_end":157301,"line_start":32,"line_end":32,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157361,"byte_end":157369,"line_start":36,"line_end":36,"column_start":5,"column_end":13},"name":"Poisoned","qualname":"::once::OnceState::Poisoned","value":"OnceState::Poisoned","parent":{"krate":0,"index":656},"children":[],"decl_id":null,"docs":" A closure was executed but panicked.\n","sig":null,"attributes":[{"value":"/ A closure was executed but panicked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157316,"byte_end":157356,"line_start":35,"line_end":35,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":661},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157427,"byte_end":157437,"line_start":39,"line_end":39,"column_start":5,"column_end":15},"name":"InProgress","qualname":"::once::OnceState::InProgress","value":"OnceState::InProgress","parent":{"krate":0,"index":656},"children":[],"decl_id":null,"docs":" A thread is currently executing a closure.\n","sig":null,"attributes":[{"value":"/ A thread is currently executing a closure.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157376,"byte_end":157422,"line_start":38,"line_end":38,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":663},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157489,"byte_end":157493,"line_start":42,"line_end":42,"column_start":5,"column_end":9},"name":"Done","qualname":"::once::OnceState::Done","value":"OnceState::Done","parent":{"krate":0,"index":656},"children":[],"decl_id":null,"docs":" A closure has completed sucessfully.\n","sig":null,"attributes":[{"value":"/ A closure has completed sucessfully.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157444,"byte_end":157484,"line_start":41,"line_end":41,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":656},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157246,"byte_end":157255,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"name":"OnceState","qualname":"::once::OnceState","value":"pub enum OnceState {\n\n    /// A closure has not been executed yet\n    New,\n\n    /// A closure was executed but panicked.\n    Poisoned,\n\n    /// A thread is currently executing a closure.\n    InProgress,\n\n    /// A closure has completed sucessfully.\n    Done,\n}","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663}],"decl_id":null,"docs":" Current state of a `Once`.\n","sig":null,"attributes":[{"value":"/ Current state of a `Once`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157161,"byte_end":157191,"line_start":29,"line_end":29,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157772,"byte_end":157780,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<OnceState>::poisoned","value":"pub fn poisoned(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has been poisoned.","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has been poisoned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157519,"byte_end":157579,"line_start":46,"line_end":46,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157584,"byte_end":157587,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Once an initalization routine for a `Once` has panicked it will forever","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157592,"byte_end":157667,"line_start":48,"line_end":48,"column_start":5,"column_end":80}},{"value":"/ indicate to future forced initialization routines that it is poisoned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157672,"byte_end":157746,"line_start":49,"line_end":49,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157751,"byte_end":157760,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158019,"byte_end":158023,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"done","qualname":"<OnceState>::done","value":"pub fn done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has successfullly executed a\n closure.\n","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has successfullly executed a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157906,"byte_end":157976,"line_start":58,"line_end":58,"column_start":5,"column_end":75}},{"value":"/ closure.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157981,"byte_end":157993,"line_start":59,"line_end":59,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157998,"byte_end":158007,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":566},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158857,"byte_end":158861,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time\n initialization. Useful for one-time initialization for globals, FFI or\n related functionality.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be used to run a one-time","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158143,"byte_end":158210,"line_start":69,"line_end":69,"column_start":1,"column_end":68}},{"value":"/ initialization. Useful for one-time initialization for globals, FFI or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158211,"byte_end":158285,"line_start":70,"line_end":70,"column_start":1,"column_end":75}},{"value":"/ related functionality.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158286,"byte_end":158312,"line_start":71,"line_end":71,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158313,"byte_end":158316,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Once`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158317,"byte_end":158367,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158368,"byte_end":158371,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ - Only requires 1 byte of space, instead of 1 word.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158372,"byte_end":158427,"line_start":75,"line_end":75,"column_start":1,"column_end":56}},{"value":"/ - Not required to be `'static`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158428,"byte_end":158463,"line_start":76,"line_end":76,"column_start":1,"column_end":36}},{"value":"/ - Relaxed memory barriers in the fast path, which can significantly improve","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158464,"byte_end":158543,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/   performance on some architectures.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158544,"byte_end":158584,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158585,"byte_end":158654,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158655,"byte_end":158658,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158659,"byte_end":158673,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158674,"byte_end":158677,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158678,"byte_end":158685,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Once, ONCE_INIT};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158686,"byte_end":158725,"line_start":84,"line_end":84,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158726,"byte_end":158729,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ static START: Once = ONCE_INIT;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158730,"byte_end":158765,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158766,"byte_end":158769,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158770,"byte_end":158794,"line_start":88,"line_end":88,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158795,"byte_end":158829,"line_start":89,"line_end":89,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158830,"byte_end":158837,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158838,"byte_end":158845,"line_start":91,"line_end":91,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":569},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158935,"byte_end":158944,"line_start":95,"line_end":95,"column_start":11,"column_end":20},"name":"ONCE_INIT","qualname":"::once::ONCE_INIT","value":"Once","parent":null,"children":[],"decl_id":null,"docs":" Initialization value for static `Once` values.\n","sig":null,"attributes":[{"value":"/ Initialization value for static `Once` values.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158874,"byte_end":158924,"line_start":94,"line_end":94,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159237,"byte_end":159240,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<Once>::new","value":"pub fn new() -> Once","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Once` value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159143,"byte_end":159174,"line_start":105,"line_end":105,"column_start":5,"column_end":36}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159179,"byte_end":159211,"line_start":106,"line_end":106,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159216,"byte_end":159225,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159364,"byte_end":159369,"line_start":114,"line_end":114,"column_start":12,"column_end":17},"name":"state","qualname":"<Once>::state","value":"pub fn state(&Self) -> OnceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the current state of this `Once`.\n","sig":null,"attributes":[{"value":"/ Returns the current state of this `Once`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159293,"byte_end":159338,"line_start":112,"line_end":112,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159343,"byte_end":159352,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161653,"byte_end":161662,"line_start":177,"line_end":177,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once>::call_once","value":"pub fn call_once<F>(&Self, F) where F: FnOnce() -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159726,"byte_end":159802,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159807,"byte_end":159882,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159887,"byte_end":159939,"line_start":129,"line_end":129,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159944,"byte_end":159947,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":159952,"byte_end":160023,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160028,"byte_end":160061,"line_start":132,"line_end":132,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160066,"byte_end":160069,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160074,"byte_end":160147,"line_start":134,"line_end":134,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). It is also","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160152,"byte_end":160227,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/ guaranteed that any memory writes performed by the executed closure can","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160232,"byte_end":160307,"line_start":136,"line_end":136,"column_start":5,"column_end":80}},{"value":"/ be reliably observed by other threads at this point (there is a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160312,"byte_end":160379,"line_start":137,"line_end":137,"column_start":5,"column_end":72}},{"value":"/ happens-before relation between the closure and code executing after the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160384,"byte_end":160460,"line_start":138,"line_end":138,"column_start":5,"column_end":81}},{"value":"/ return).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160465,"byte_end":160477,"line_start":139,"line_end":139,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160482,"byte_end":160485,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160490,"byte_end":160504,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160509,"byte_end":160512,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160517,"byte_end":160524,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::{Once, ONCE_INIT};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160529,"byte_end":160568,"line_start":144,"line_end":144,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160573,"byte_end":160576,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ static mut VAL: usize = 0;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160581,"byte_end":160611,"line_start":146,"line_end":146,"column_start":5,"column_end":35}},{"value":"/ static INIT: Once = ONCE_INIT;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160616,"byte_end":160650,"line_start":147,"line_end":147,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160655,"byte_end":160658,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ // Accessing a `static mut` is unsafe much of the time, but if we do so","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160663,"byte_end":160738,"line_start":149,"line_end":149,"column_start":5,"column_end":80}},{"value":"/ // in a synchronized fashion (e.g. write once or read all) then we're","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160743,"byte_end":160816,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ // good to go!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160821,"byte_end":160839,"line_start":151,"line_end":151,"column_start":5,"column_end":23}},{"value":"/ //","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160844,"byte_end":160850,"line_start":152,"line_end":152,"column_start":5,"column_end":11}},{"value":"/ // This function will only call `expensive_computation` once, and will","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160855,"byte_end":160929,"line_start":153,"line_end":153,"column_start":5,"column_end":79}},{"value":"/ // otherwise always return the value returned from the first invocation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":160934,"byte_end":161010,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161015,"byte_end":161049,"line_start":155,"line_end":155,"column_start":5,"column_end":39}},{"value":"/     unsafe {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161054,"byte_end":161070,"line_start":156,"line_end":156,"column_start":5,"column_end":21}},{"value":"/         INIT.call_once(|| {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161075,"byte_end":161106,"line_start":157,"line_end":157,"column_start":5,"column_end":36}},{"value":"/             VAL = expensive_computation();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161111,"byte_end":161157,"line_start":158,"line_end":158,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161162,"byte_end":161177,"line_start":159,"line_end":159,"column_start":5,"column_end":20}},{"value":"/         VAL","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161182,"byte_end":161197,"line_start":160,"line_end":160,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161202,"byte_end":161211,"line_start":161,"line_end":161,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161216,"byte_end":161221,"line_start":162,"line_end":162,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161226,"byte_end":161229,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161234,"byte_end":161275,"line_start":164,"line_end":164,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161280,"byte_end":161294,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161299,"byte_end":161306,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161311,"byte_end":161316,"line_start":167,"line_end":167,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161321,"byte_end":161328,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161333,"byte_end":161336,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161341,"byte_end":161353,"line_start":170,"line_end":170,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161358,"byte_end":161361,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The closure `f` will only be executed once if this is called","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161366,"byte_end":161430,"line_start":172,"line_end":172,"column_start":5,"column_end":69}},{"value":"/ concurrently amongst many threads. If that closure panics, however, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161435,"byte_end":161511,"line_start":173,"line_end":173,"column_start":5,"column_end":81}},{"value":"/ it will *poison* this `Once` instance, causing all future invocations of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161516,"byte_end":161592,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/ `call_once` to also panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161597,"byte_end":161627,"line_start":175,"line_end":175,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161632,"byte_end":161641,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162413,"byte_end":162428,"line_start":199,"line_end":199,"column_start":12,"column_end":27},"name":"call_once_force","qualname":"<Once>::call_once_force","value":"pub fn call_once_force<F>(&Self, F) where F: FnOnce(OnceState) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the same function as `call_once` except ignores poisoning.","sig":null,"attributes":[{"value":"/ Performs the same function as `call_once` except ignores poisoning.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":161930,"byte_end":162001,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162006,"byte_end":162009,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If this `Once` has been poisoned (some initialization panicked) then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162014,"byte_end":162086,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ this function will continue to attempt to call initialization functions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162091,"byte_end":162166,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/ until one of them doesn't panic.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162171,"byte_end":162207,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162212,"byte_end":162215,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is yielded a structure which can be used to query the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162220,"byte_end":162293,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ state of this `Once` (whether initialization has previously panicked or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162298,"byte_end":162373,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/ not).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162378,"byte_end":162387,"line_start":197,"line_end":197,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":162392,"byte_end":162401,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":617},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1519,"byte_end":1532,"line_start":49,"line_end":49,"column_start":10,"column_end":23},"name":"MutexGuardRef","qualname":"::MutexGuardRef","value":"OwningRef<MutexGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of an owning reference that uses a `MutexGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of an owning reference that uses a `MutexGuard` as the owner.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1405,"byte_end":1478,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"cfg(feature = \"owning_ref\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1479,"byte_end":1509,"line_start":48,"line_end":48,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":621},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1706,"byte_end":1728,"line_start":53,"line_end":53,"column_start":10,"column_end":32},"name":"ReentrantMutexGuardRef","qualname":"::ReentrantMutexGuardRef","value":"OwningRef<ReentrantMutexGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1583,"byte_end":1665,"line_start":51,"line_end":51,"column_start":1,"column_end":83}},{"value":"cfg(feature = \"owning_ref\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1666,"byte_end":1696,"line_start":52,"line_end":52,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":625},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1907,"byte_end":1925,"line_start":57,"line_end":57,"column_start":10,"column_end":28},"name":"RwLockReadGuardRef","qualname":"::RwLockReadGuardRef","value":"OwningRef<RwLockReadGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1788,"byte_end":1866,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"cfg(feature = \"owning_ref\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1867,"byte_end":1897,"line_start":56,"line_end":56,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":629},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":2101,"byte_end":2120,"line_start":61,"line_end":61,"column_start":10,"column_end":29},"name":"RwLockWriteGuardRef","qualname":"::RwLockWriteGuardRef","value":"OwningRef<RwLockWriteGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":1981,"byte_end":2060,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"cfg(feature = \"owning_ref\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":2061,"byte_end":2091,"line_start":60,"line_end":60,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":633},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":2306,"byte_end":2334,"line_start":65,"line_end":65,"column_start":10,"column_end":38},"name":"RwLockUpgradableReadGuardRef","qualname":"::RwLockUpgradableReadGuardRef","value":"OwningRef<RwLockUpgradableReadGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of an owning reference that uses a `RwLockUpgradableReadGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of an owning reference that uses a `RwLockUpgradableReadGuard` as the owner.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":2177,"byte_end":2265,"line_start":63,"line_end":63,"column_start":1,"column_end":89}},{"value":"cfg(feature = \"owning_ref\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/lib.rs","byte_start":2266,"byte_end":2296,"line_start":64,"line_end":64,"column_start":1,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/util.rs","byte_start":2879,"byte_end":2885,"line_start":13,"line_end":13,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/elision.rs","byte_start":4605,"byte_end":4616,"line_start":40,"line_end":40,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_mutex.rs","byte_start":9578,"byte_end":9586,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_remutex.rs","byte_start":18319,"byte_end":18336,"line_start":27,"line_end":27,"column_start":22,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_remutex.rs","byte_start":18346,"byte_end":18363,"line_start":29,"line_end":29,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_rwlock.rs","byte_start":22950,"byte_end":22959,"line_start":70,"line_end":70,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64000,"byte_end":64017,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66317,"byte_end":66324,"line_start":86,"line_end":86,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76736,"byte_end":76743,"line_start":350,"line_end":350,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85052,"byte_end":85057,"line_start":101,"line_end":101,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85103,"byte_end":85108,"line_start":102,"line_end":102,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85569,"byte_end":85579,"line_start":116,"line_end":116,"column_start":49,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85599,"byte_end":85604,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86305,"byte_end":86310,"line_start":146,"line_end":146,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89740,"byte_end":89745,"line_start":250,"line_end":250,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90409,"byte_end":90414,"line_start":271,"line_end":271,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90557,"byte_end":90562,"line_start":278,"line_end":278,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90831,"byte_end":90841,"line_start":287,"line_end":287,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92482,"byte_end":92492,"line_start":330,"line_end":330,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92643,"byte_end":92653,"line_start":338,"line_end":338,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92795,"byte_end":92805,"line_start":345,"line_end":345,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92971,"byte_end":92981,"line_start":353,"line_end":353,"column_start":46,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98859,"byte_end":98873,"line_start":36,"line_end":36,"column_start":40,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98919,"byte_end":98933,"line_start":37,"line_end":37,"column_start":40,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99404,"byte_end":99423,"line_start":51,"line_end":51,"column_start":49,"column_end":68},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99443,"byte_end":99457,"line_start":53,"line_end":53,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100242,"byte_end":100256,"line_start":81,"line_end":81,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103877,"byte_end":103891,"line_start":186,"line_end":186,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104573,"byte_end":104587,"line_start":207,"line_end":207,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104748,"byte_end":104762,"line_start":214,"line_end":214,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105049,"byte_end":105068,"line_start":223,"line_end":223,"column_start":26,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106751,"byte_end":106770,"line_start":266,"line_end":266,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106917,"byte_end":106936,"line_start":274,"line_end":274,"column_start":35,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":107102,"byte_end":107121,"line_start":282,"line_end":282,"column_start":46,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112703,"byte_end":112709,"line_start":102,"line_end":102,"column_start":40,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112762,"byte_end":112768,"line_start":103,"line_end":103,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113050,"byte_end":113065,"line_start":114,"line_end":114,"column_start":49,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113358,"byte_end":113374,"line_start":125,"line_end":125,"column_start":49,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113672,"byte_end":113697,"line_start":136,"line_end":136,"column_start":49,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113717,"byte_end":113723,"line_start":138,"line_end":138,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114711,"byte_end":114717,"line_start":182,"line_end":182,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129988,"byte_end":129994,"line_start":604,"line_end":604,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134280,"byte_end":134286,"line_start":722,"line_end":722,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134431,"byte_end":134437,"line_start":729,"line_end":729,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134708,"byte_end":134723,"line_start":738,"line_end":738,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136399,"byte_end":136414,"line_start":781,"line_end":781,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136561,"byte_end":136576,"line_start":789,"line_end":789,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136749,"byte_end":136764,"line_start":797,"line_end":797,"column_start":46,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136801,"byte_end":136817,"line_start":799,"line_end":799,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139268,"byte_end":139284,"line_start":862,"line_end":862,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139435,"byte_end":139451,"line_start":870,"line_end":870,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139593,"byte_end":139609,"line_start":877,"line_end":877,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139785,"byte_end":139801,"line_start":885,"line_end":885,"column_start":46,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139838,"byte_end":139863,"line_start":887,"line_end":887,"column_start":26,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144586,"byte_end":144611,"line_start":1009,"line_end":1009,"column_start":36,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144758,"byte_end":144783,"line_start":1017,"line_end":1017,"column_start":35,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144960,"byte_end":144985,"line_start":1025,"line_end":1025,"column_start":46,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157503,"byte_end":157512,"line_start":45,"line_end":45,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158981,"byte_end":158985,"line_start":97,"line_end":97,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":166284,"byte_end":166294,"line_start":303,"line_end":303,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":167536,"byte_end":167540,"line_start":339,"line_end":339,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":167633,"byte_end":167637,"line_start":346,"line_end":346,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/util.rs","byte_start":2879,"byte_end":2885,"line_start":13,"line_end":13,"column_start":35,"column_end":41},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":31731},"to":{"krate":0,"index":6}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/elision.rs","byte_start":4605,"byte_end":4616,"line_start":40,"line_end":40,"column_start":27,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":2,"index":32356},"to":{"krate":0,"index":16}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_mutex.rs","byte_start":9578,"byte_end":9586,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_remutex.rs","byte_start":18319,"byte_end":18336,"line_start":27,"line_end":27,"column_start":22,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":73},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_remutex.rs","byte_start":18346,"byte_end":18363,"line_start":29,"line_end":29,"column_start":6,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":73},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/raw_rwlock.rs","byte_start":22950,"byte_end":22959,"line_start":70,"line_end":70,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":64000,"byte_end":64017,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":66317,"byte_end":66324,"line_start":86,"line_end":86,"column_start":6,"column_end":13},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/condvar.rs","byte_start":76736,"byte_end":76743,"line_start":350,"line_end":350,"column_start":18,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85052,"byte_end":85057,"line_start":101,"line_end":101,"column_start":40,"column_end":45},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":245},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85103,"byte_end":85108,"line_start":102,"line_end":102,"column_start":40,"column_end":45},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":245},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85569,"byte_end":85579,"line_start":116,"line_end":116,"column_start":49,"column_end":59},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":253},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":85599,"byte_end":85604,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":86305,"byte_end":86310,"line_start":146,"line_end":146,"column_start":17,"column_end":22},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":89740,"byte_end":89745,"line_start":250,"line_end":250,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90409,"byte_end":90414,"line_start":271,"line_end":271,"column_start":39,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":245},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90557,"byte_end":90562,"line_start":278,"line_end":278,"column_start":45,"column_end":50},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":245},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":90831,"byte_end":90841,"line_start":287,"line_end":287,"column_start":26,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92482,"byte_end":92492,"line_start":330,"line_end":330,"column_start":36,"column_end":46},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":253},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92643,"byte_end":92653,"line_start":338,"line_end":338,"column_start":39,"column_end":49},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":253},"to":{"krate":2,"index":2244}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92795,"byte_end":92805,"line_start":345,"line_end":345,"column_start":35,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":253},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/mutex.rs","byte_start":92971,"byte_end":92981,"line_start":353,"line_end":353,"column_start":46,"column_end":56},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":253},"to":{"krate":17,"index":5}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98859,"byte_end":98873,"line_start":36,"line_end":36,"column_start":40,"column_end":54},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":98919,"byte_end":98933,"line_start":37,"line_end":37,"column_start":40,"column_end":54},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99404,"byte_end":99423,"line_start":51,"line_end":51,"column_start":49,"column_end":68},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":99443,"byte_end":99457,"line_start":53,"line_end":53,"column_start":9,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":100242,"byte_end":100256,"line_start":81,"line_end":81,"column_start":17,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":103877,"byte_end":103891,"line_start":186,"line_end":186,"column_start":6,"column_end":20},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104573,"byte_end":104587,"line_start":207,"line_end":207,"column_start":39,"column_end":53},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":104748,"byte_end":104762,"line_start":214,"line_end":214,"column_start":45,"column_end":59},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":105049,"byte_end":105068,"line_start":223,"line_end":223,"column_start":26,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106751,"byte_end":106770,"line_start":266,"line_end":266,"column_start":36,"column_end":55},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":106917,"byte_end":106936,"line_start":274,"line_end":274,"column_start":35,"column_end":54},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/remutex.rs","byte_start":107102,"byte_end":107121,"line_start":282,"line_end":282,"column_start":46,"column_end":65},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":330},"to":{"krate":17,"index":5}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112703,"byte_end":112709,"line_start":102,"line_end":102,"column_start":40,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":112762,"byte_end":112768,"line_start":103,"line_end":103,"column_start":47,"column_end":53},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113050,"byte_end":113065,"line_start":114,"line_end":114,"column_start":49,"column_end":64},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113358,"byte_end":113374,"line_start":125,"line_end":125,"column_start":49,"column_end":65},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113672,"byte_end":113697,"line_start":136,"line_end":136,"column_start":49,"column_end":74},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":420},"to":{"krate":2,"index":2046}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":113717,"byte_end":113723,"line_start":138,"line_end":138,"column_start":9,"column_end":15},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":114711,"byte_end":114717,"line_start":182,"line_end":182,"column_start":17,"column_end":23},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":129988,"byte_end":129994,"line_start":604,"line_end":604,"column_start":6,"column_end":12},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134280,"byte_end":134286,"line_start":722,"line_end":722,"column_start":39,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134431,"byte_end":134437,"line_start":729,"line_end":729,"column_start":45,"column_end":51},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":134708,"byte_end":134723,"line_start":738,"line_end":738,"column_start":26,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136399,"byte_end":136414,"line_start":781,"line_end":781,"column_start":36,"column_end":51},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136561,"byte_end":136576,"line_start":789,"line_end":789,"column_start":35,"column_end":50},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136749,"byte_end":136764,"line_start":797,"line_end":797,"column_start":46,"column_end":61},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":402},"to":{"krate":17,"index":5}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":136801,"byte_end":136817,"line_start":799,"line_end":799,"column_start":26,"column_end":42},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139268,"byte_end":139284,"line_start":862,"line_end":862,"column_start":36,"column_end":52},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139435,"byte_end":139451,"line_start":870,"line_end":870,"column_start":39,"column_end":55},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2244}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139593,"byte_end":139609,"line_start":877,"line_end":877,"column_start":35,"column_end":51},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139785,"byte_end":139801,"line_start":885,"line_end":885,"column_start":46,"column_end":62},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":411},"to":{"krate":17,"index":5}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":139838,"byte_end":139863,"line_start":887,"line_end":887,"column_start":26,"column_end":51},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144586,"byte_end":144611,"line_start":1009,"line_end":1009,"column_start":36,"column_end":61},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":420},"to":{"krate":2,"index":2231}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144758,"byte_end":144783,"line_start":1017,"line_end":1017,"column_start":35,"column_end":60},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":420},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/rwlock.rs","byte_start":144960,"byte_end":144985,"line_start":1025,"line_end":1025,"column_start":46,"column_end":71},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":420},"to":{"krate":17,"index":5}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":157503,"byte_end":157512,"line_start":45,"line_end":45,"column_start":6,"column_end":15},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":158981,"byte_end":158985,"line_start":97,"line_end":97,"column_start":6,"column_end":10},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":166284,"byte_end":166294,"line_start":303,"line_end":303,"column_start":27,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":583},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":167536,"byte_end":167540,"line_start":339,"line_end":339,"column_start":18,"column_end":22},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":566},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.5.4/src/once.rs","byte_start":167633,"byte_end":167637,"line_start":346,"line_end":346,"column_start":21,"column_end":25},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":566},"to":{"krate":2,"index":6555}}]}