{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2","program":"/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","num_traits","/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f8aae93336683c5d","-C","extra-filename=-f8aae93336683c5d","--out-dir","/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","-L","dependency=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libnum_traits-f8aae93336683c5d.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[17353925895579993518,5837209790691450315]},"crate_root":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src","external_crates":[{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}}],"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":472,"byte_end":16323,"line_start":11,"line_end":469,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":197},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":961,"byte_end":968,"line_start":30,"line_end":30,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1090},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1031,"byte_end":1041,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":63},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1156,"byte_end":1160,"line_start":35,"line_end":35,"column_start":22,"column_end":26},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1162,"byte_end":1165,"line_start":35,"line_end":35,"column_start":28,"column_end":31},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":78},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1167,"byte_end":1171,"line_start":35,"line_end":35,"column_start":33,"column_end":37},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1173,"byte_end":1176,"line_start":35,"line_end":35,"column_start":39,"column_end":42},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":163},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1197,"byte_end":1200,"line_start":36,"line_end":36,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":126},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1225,"byte_end":1235,"line_start":37,"line_end":37,"column_start":24,"column_end":34},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":129},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1237,"byte_end":1247,"line_start":37,"line_end":37,"column_start":36,"column_end":46},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1249,"byte_end":1259,"line_start":37,"line_end":37,"column_start":48,"column_end":58},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1261,"byte_end":1271,"line_start":37,"line_end":37,"column_start":60,"column_end":70},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1273,"byte_end":1283,"line_start":37,"line_end":37,"column_start":72,"column_end":82},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":138},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1285,"byte_end":1295,"line_start":37,"line_end":37,"column_start":84,"column_end":94},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":147},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1322,"byte_end":1333,"line_start":38,"line_end":38,"column_start":25,"column_end":36},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":151},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1335,"byte_end":1346,"line_start":38,"line_end":38,"column_start":38,"column_end":49},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":149},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1348,"byte_end":1359,"line_start":38,"line_end":38,"column_start":51,"column_end":62},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":114},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1387,"byte_end":1397,"line_start":39,"line_end":39,"column_start":26,"column_end":36},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1414,"byte_end":1420,"line_start":40,"line_end":40,"column_start":16,"column_end":22},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":108},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1422,"byte_end":1430,"line_start":40,"line_end":40,"column_start":24,"column_end":32},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1432,"byte_end":1435,"line_start":40,"line_end":40,"column_start":34,"column_end":37},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1437,"byte_end":1444,"line_start":40,"line_end":40,"column_start":39,"column_end":46},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1446,"byte_end":1452,"line_start":40,"line_end":40,"column_start":48,"column_end":54},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":350},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1470,"byte_end":1481,"line_start":41,"line_end":41,"column_start":16,"column_end":27},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1483,"byte_end":1496,"line_start":41,"line_end":41,"column_start":29,"column_end":42},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1498,"byte_end":1509,"line_start":41,"line_end":41,"column_start":44,"column_end":55},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":342},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1511,"byte_end":1518,"line_start":41,"line_end":41,"column_start":57,"column_end":64},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":339},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1520,"byte_end":1524,"line_start":41,"line_end":41,"column_start":66,"column_end":70},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1540,"byte_end":1547,"line_start":42,"line_end":42,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":393},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1563,"byte_end":1566,"line_start":43,"line_end":43,"column_start":15,"column_end":18},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1568,"byte_end":1571,"line_start":43,"line_end":43,"column_start":20,"column_end":23},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":400},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1573,"byte_end":1584,"line_start":43,"line_end":43,"column_start":25,"column_end":36},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":472,"byte_end":16323,"line_start":11,"line_end":469,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":3062},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":82},{"krate":0,"index":112},{"krate":0,"index":180},{"krate":0,"index":208},{"krate":0,"index":265},{"krate":0,"index":355},{"krate":0,"index":387},{"krate":0,"index":403},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":2987},{"krate":0,"index":2990},{"krate":0,"index":2993},{"krate":0,"index":2996},{"krate":0,"index":2999},{"krate":0,"index":3002},{"krate":0,"index":3005},{"krate":0,"index":3008},{"krate":0,"index":3011},{"krate":0,"index":3014},{"krate":0,"index":439},{"krate":0,"index":3017},{"krate":0,"index":3022},{"krate":0,"index":3024},{"krate":0,"index":3026},{"krate":0,"index":443},{"krate":0,"index":3028},{"krate":0,"index":3035},{"krate":0,"index":446}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"/ Numeric traits for generic mathematics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":472,"byte_end":514,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":515,"byte_end":518,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Compatibility","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":519,"byte_end":539,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":540,"byte_end":543,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `num-traits` crate is tested for rustc 1.8 and greater.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":544,"byte_end":607,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":668,"byte_end":701,"line_start":19,"line_end":19,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":737,"byte_end":743,"line_start":21,"line_end":21,"column_start":35,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":3132},{"krate":0,"index":63},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":67},{"krate":0,"index":71},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":80}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":63},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17699,"byte_end":17703,"line_start":5,"line_end":5,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.\n","sig":null,"attributes":[{"value":"/ Defines an additive identity element for `Self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17636,"byte_end":17688,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18215,"byte_end":18219,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.","sig":null,"attributes":[{"value":"/ Returns the additive identity element of `Self`, `0`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17744,"byte_end":17801,"line_start":6,"line_end":6,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17806,"byte_end":17809,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ # Laws","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17814,"byte_end":17824,"line_start":8,"line_end":8,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17829,"byte_end":17832,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ ```{.text}","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17837,"byte_end":17851,"line_start":10,"line_end":10,"column_start":5,"column_end":19}},{"value":"/ a + 0 = a       ∀ a ∈ Self","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17856,"byte_end":17890,"line_start":11,"line_end":11,"column_start":5,"column_end":35}},{"value":"/ 0 + a = a       ∀ a ∈ Self","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17895,"byte_end":17929,"line_start":12,"line_end":12,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17934,"byte_end":17941,"line_start":13,"line_end":13,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17946,"byte_end":17949,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Purity","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17954,"byte_end":17966,"line_start":15,"line_end":15,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17971,"byte_end":17974,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17979,"byte_end":18053,"line_start":17,"line_end":17,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18058,"byte_end":18124,"line_start":18,"line_end":18,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18129,"byte_end":18147,"line_start":19,"line_end":19,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18321,"byte_end":18328,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the additive identity.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18236,"byte_end":18299,"line_start":23,"line_end":23,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18304,"byte_end":18313,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":71},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19156,"byte_end":19159,"line_start":65,"line_end":65,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.\n","sig":null,"attributes":[{"value":"/ Defines a multiplicative identity element for `Self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19088,"byte_end":19145,"line_start":64,"line_end":64,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19677,"byte_end":19680,"line_start":81,"line_end":81,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity element of `Self`, `1`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19200,"byte_end":19263,"line_start":66,"line_end":66,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19268,"byte_end":19271,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Laws","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19276,"byte_end":19286,"line_start":68,"line_end":68,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19291,"byte_end":19294,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```{.text}","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19299,"byte_end":19313,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/ a * 1 = a       ∀ a ∈ Self","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19318,"byte_end":19352,"line_start":71,"line_end":71,"column_start":5,"column_end":35}},{"value":"/ 1 * a = a       ∀ a ∈ Self","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19357,"byte_end":19391,"line_start":72,"line_end":72,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19396,"byte_end":19403,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19408,"byte_end":19411,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Purity","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19416,"byte_end":19428,"line_start":75,"line_end":75,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19433,"byte_end":19436,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19441,"byte_end":19515,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19520,"byte_end":19586,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19591,"byte_end":19609,"line_start":79,"line_end":79,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19989,"byte_end":19995,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"pub fn is_one(&Self) -> bool where Self: PartialEq","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the multiplicative identity.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19697,"byte_end":19766,"line_start":83,"line_end":83,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19771,"byte_end":19774,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For performance reasons, it's best to implement this manually.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19779,"byte_end":19845,"line_start":85,"line_end":85,"column_start":5,"column_end":71}},{"value":"/ After a semver bump, this method will be required, and the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19850,"byte_end":19912,"line_start":86,"line_end":86,"column_start":5,"column_end":67}},{"value":"/ `where Self: PartialEq` bound will be removed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19917,"byte_end":19967,"line_start":87,"line_end":87,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19972,"byte_end":19981,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20783,"byte_end":20787,"line_start":127,"line_end":127,"column_start":26,"column_end":30},"name":"zero","qualname":"::identities::zero","value":"pub fn zero<T: Zero>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"/ Returns the additive identity, `0`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20718,"byte_end":20757,"line_start":126,"line_end":126,"column_start":1,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20758,"byte_end":20775,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20893,"byte_end":20896,"line_start":130,"line_end":130,"column_start":26,"column_end":29},"name":"one","qualname":"::identities::one","value":"pub fn one<T: One>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity, `1`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20822,"byte_end":20867,"line_start":129,"line_end":129,"column_start":1,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20868,"byte_end":20885,"line_start":130,"line_end":130,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":3136},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":508},{"krate":0,"index":514},{"krate":0,"index":520},{"krate":0,"index":526},{"krate":0,"index":532},{"krate":0,"index":94},{"krate":0,"index":538},{"krate":0,"index":544},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":110}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21822,"byte_end":21828,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[{"value":"/ Useful functions for signed numbers (i.e. numbers that can be negative).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21735,"byte_end":21811,"line_start":7,"line_end":7,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22081,"byte_end":22084,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"pub fn abs(&Self) -> Self","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21869,"byte_end":21901,"line_start":9,"line_end":9,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21906,"byte_end":21909,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21914,"byte_end":21985,"line_start":11,"line_end":11,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21990,"byte_end":21993,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21998,"byte_end":22073,"line_start":13,"line_end":13,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22309,"byte_end":22316,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"pub fn abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22106,"byte_end":22149,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22154,"byte_end":22157,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ Returns `zero` if the number is less than or equal to `other`, otherwise the difference","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22162,"byte_end":22253,"line_start":18,"line_end":18,"column_start":5,"column_end":96}},{"value":"/ between `self` and `other` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22258,"byte_end":22301,"line_start":19,"line_end":19,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22774,"byte_end":22780,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"pub fn signum(&Self) -> Self","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22352,"byte_end":22387,"line_start":22,"line_end":22,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22392,"byte_end":22395,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22400,"byte_end":22424,"line_start":24,"line_end":24,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22429,"byte_end":22432,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22437,"byte_end":22496,"line_start":26,"line_end":26,"column_start":5,"column_end":64}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22501,"byte_end":22565,"line_start":27,"line_end":27,"column_start":5,"column_end":69}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22570,"byte_end":22604,"line_start":28,"line_end":28,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22609,"byte_end":22612,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ For signed integers:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22617,"byte_end":22641,"line_start":30,"line_end":30,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22646,"byte_end":22649,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22654,"byte_end":22685,"line_start":32,"line_end":32,"column_start":5,"column_end":36}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22690,"byte_end":22725,"line_start":33,"line_end":33,"column_start":5,"column_end":40}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22730,"byte_end":22766,"line_start":34,"line_end":34,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22897,"byte_end":22908,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"pub fn is_positive(&Self) -> bool","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is positive and false if the number is zero or negative.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22802,"byte_end":22889,"line_start":37,"line_end":37,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":23025,"byte_end":23036,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is negative and false if the number is zero or positive.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":22930,"byte_end":23017,"line_start":40,"line_end":40,"column_start":5,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26032,"byte_end":26035,"line_start":148,"line_end":148,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"pub fn abs<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":25819,"byte_end":25851,"line_start":142,"line_end":142,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":25852,"byte_end":25855,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":25856,"byte_end":25926,"line_start":144,"line_end":144,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":25927,"byte_end":25930,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":25931,"byte_end":26006,"line_start":146,"line_end":146,"column_start":1,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26007,"byte_end":26024,"line_start":147,"line_end":147,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26272,"byte_end":26279,"line_start":157,"line_end":157,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"pub fn abs_sub<T: Signed>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26083,"byte_end":26126,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26127,"byte_end":26130,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Returns zero if `x` is less than or equal to `y`, otherwise the difference","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26131,"byte_end":26209,"line_start":154,"line_end":154,"column_start":1,"column_end":79}},{"value":"/ between `x` and `y` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26210,"byte_end":26246,"line_start":155,"line_end":155,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26247,"byte_end":26264,"line_start":156,"line_end":156,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26723,"byte_end":26729,"line_start":174,"line_end":174,"column_start":26,"column_end":32},"name":"signum","qualname":"::sign::signum","value":"pub fn signum<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26331,"byte_end":26366,"line_start":161,"line_end":161,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26367,"byte_end":26370,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26371,"byte_end":26395,"line_start":163,"line_end":163,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26396,"byte_end":26399,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26400,"byte_end":26459,"line_start":165,"line_end":165,"column_start":1,"column_end":60}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26460,"byte_end":26524,"line_start":166,"line_end":166,"column_start":1,"column_end":65}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26525,"byte_end":26559,"line_start":167,"line_end":167,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26560,"byte_end":26563,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ For signed integers:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26564,"byte_end":26588,"line_start":169,"line_end":169,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26589,"byte_end":26592,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26593,"byte_end":26624,"line_start":171,"line_end":171,"column_start":1,"column_end":32}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26625,"byte_end":26660,"line_start":172,"line_end":172,"column_start":1,"column_end":36}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26661,"byte_end":26697,"line_start":173,"line_end":173,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26698,"byte_end":26715,"line_start":174,"line_end":174,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":108},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26834,"byte_end":26842,"line_start":177,"line_end":177,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[{"value":"/ A trait for values which cannot be negative","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26776,"byte_end":26823,"line_start":176,"line_end":176,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":112},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":140},{"krate":0,"index":162}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":113},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":114},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27622,"byte_end":27632,"line_start":2,"line_end":2,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" Saturating math operations\n","sig":null,"attributes":[{"value":"/ Saturating math operations","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27581,"byte_end":27611,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27758,"byte_end":27772,"line_start":5,"line_end":5,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition operator.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27639,"byte_end":27672,"line_start":3,"line_end":3,"column_start":5,"column_end":38}},{"value":"/ Returns a+b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27677,"byte_end":27750,"line_start":4,"line_end":4,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27924,"byte_end":27938,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction operator.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27802,"byte_end":27838,"line_start":7,"line_end":7,"column_start":5,"column_end":41}},{"value":"/ Returns a-b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/saturating.rs","byte_start":27843,"byte_end":27916,"line_start":8,"line_end":8,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":118},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":129},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":131},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":133},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":657},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":135},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":679},{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":138},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":703}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":126},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28593,"byte_end":28603,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":127}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that returns `None` instead of wrapping around on","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28497,"byte_end":28568,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28569,"byte_end":28582,"line_start":4,"line_end":4,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28743,"byte_end":28754,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"pub fn checked_add(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[{"value":"/ Adds two numbers, checking for overflow. If overflow happens, `None` is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28642,"byte_end":28717,"line_start":6,"line_end":6,"column_start":5,"column_end":80}},{"value":"/ returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28722,"byte_end":28735,"line_start":7,"line_end":7,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":129},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":29605,"byte_end":29615,"line_start":35,"line_end":35,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":130}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that returns `None` instead of wrapping around on underflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":29509,"byte_end":29594,"line_start":34,"line_end":34,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":29762,"byte_end":29773,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"pub fn checked_sub(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[{"value":"/ Subtracts two numbers, checking for underflow. If underflow happens,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":29654,"byte_end":29726,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":29731,"byte_end":29754,"line_start":37,"line_end":37,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":131},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30380,"byte_end":30390,"line_start":55,"line_end":55,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":132}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that returns `None` instead of wrapping around on underflow or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30265,"byte_end":30355,"line_start":53,"line_end":53,"column_start":1,"column_end":91}},{"value":"/ overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30356,"byte_end":30369,"line_start":54,"line_end":54,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30562,"byte_end":30573,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"pub fn checked_mul(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Multiplies two numbers, checking for underflow or overflow. If underflow","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30429,"byte_end":30505,"line_start":56,"line_end":56,"column_start":5,"column_end":81}},{"value":"/ or overflow happens, `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30510,"byte_end":30554,"line_start":57,"line_end":57,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":133},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31220,"byte_end":31230,"line_start":75,"line_end":75,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":134}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs division that returns `None` instead of panicking on division by zero and instead of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31065,"byte_end":31162,"line_start":73,"line_end":73,"column_start":1,"column_end":98}},{"value":"/ wrapping around on underflow and overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31163,"byte_end":31209,"line_start":74,"line_end":74,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31408,"byte_end":31419,"line_start":78,"line_end":78,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"pub fn checked_div(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":133},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Divides two numbers, checking for underflow, overflow and division by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31269,"byte_end":31342,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/ zero. If any of that happens, `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31347,"byte_end":31400,"line_start":77,"line_end":77,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":135},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31980,"byte_end":31990,"line_start":94,"line_end":94,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":136}],"decl_id":null,"docs":" Performs a left shift that returns `None` on overflow.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that returns `None` on overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31911,"byte_end":31969,"line_start":93,"line_end":93,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32513,"byte_end":32524,"line_start":108,"line_end":108,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"pub fn checked_shl(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[{"value":"/ Shifts a number to the left, checking for overflow. If overflow happens,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32028,"byte_end":32104,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32109,"byte_end":32132,"line_start":96,"line_end":96,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32137,"byte_end":32140,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32145,"byte_end":32152,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShl;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32157,"byte_end":32188,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32193,"byte_end":32196,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32201,"byte_end":32225,"line_start":101,"line_end":101,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32230,"byte_end":32233,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 0),  Some(0x0001));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32238,"byte_end":32300,"line_start":103,"line_end":103,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 1),  Some(0x0002));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32305,"byte_end":32367,"line_start":104,"line_end":104,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 15), Some(0x8000));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32372,"byte_end":32434,"line_start":105,"line_end":105,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 16), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32439,"byte_end":32493,"line_start":106,"line_end":106,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32498,"byte_end":32505,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":138},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33418,"byte_end":33428,"line_start":135,"line_end":135,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":139}],"decl_id":null,"docs":" Performs a right shift that returns `None` on overflow.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that returns `None` on overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33348,"byte_end":33407,"line_start":134,"line_end":134,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33951,"byte_end":33962,"line_start":149,"line_end":149,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"pub fn checked_shr(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[{"value":"/ Shifts a number to the left, checking for overflow. If overflow happens,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33466,"byte_end":33542,"line_start":136,"line_end":136,"column_start":5,"column_end":81}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33547,"byte_end":33570,"line_start":137,"line_end":137,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33575,"byte_end":33578,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33583,"byte_end":33590,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShr;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33595,"byte_end":33626,"line_start":140,"line_end":140,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33631,"byte_end":33634,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33639,"byte_end":33663,"line_start":142,"line_end":142,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33668,"byte_end":33671,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 0),  Some(0x8000));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33676,"byte_end":33738,"line_start":144,"line_end":144,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 1),  Some(0x4000));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33743,"byte_end":33805,"line_start":145,"line_end":145,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 15), Some(0x0001));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33810,"byte_end":33872,"line_start":146,"line_end":146,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 16), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33877,"byte_end":33931,"line_start":147,"line_end":147,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33936,"byte_end":33943,"line_start":148,"line_end":148,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":3160},{"krate":0,"index":147},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":149},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":151},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35139,"byte_end":35150,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":148}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that wraps around on overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35076,"byte_end":35128,"line_start":23,"line_end":23,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35307,"byte_end":35319,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"pub fn wrapping_add(&Self, &Self) -> Self","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35189,"byte_end":35281,"line_start":25,"line_end":25,"column_start":5,"column_end":97}},{"value":"/ the type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35286,"byte_end":35299,"line_start":26,"line_end":26,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":149},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35899,"byte_end":35910,"line_start":43,"line_end":43,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":150}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that wraps around on overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35833,"byte_end":35888,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36070,"byte_end":36082,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"pub fn wrapping_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35949,"byte_end":36041,"line_start":44,"line_end":44,"column_start":5,"column_end":97}},{"value":"/ of the type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36046,"byte_end":36062,"line_start":45,"line_end":45,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36665,"byte_end":36676,"line_start":62,"line_end":62,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":152}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that wraps around on overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36596,"byte_end":36654,"line_start":61,"line_end":61,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36839,"byte_end":36851,"line_start":65,"line_end":65,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"pub fn wrapping_mul(&Self, &Self) -> Self","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36715,"byte_end":36810,"line_start":63,"line_end":63,"column_start":5,"column_end":100}},{"value":"/ of the type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36815,"byte_end":36831,"line_start":64,"line_end":64,"column_start":5,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":162},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":176}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":163},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39134,"byte_end":39137,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[{"value":"/ Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39035,"byte_end":39123,"line_start":1,"line_end":1,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":164},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39197,"byte_end":39203,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39144,"byte_end":39187,"line_start":3,"line_end":3,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39482,"byte_end":39485,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"pub fn inv(Self) -> Self::Output","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative inverse of `self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39210,"byte_end":39259,"line_start":6,"line_end":6,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39264,"byte_end":39267,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39272,"byte_end":39286,"line_start":8,"line_end":8,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39291,"byte_end":39294,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39299,"byte_end":39306,"line_start":10,"line_end":10,"column_start":5,"column_end":12}},{"value":"/ use std::f64::INFINITY;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39311,"byte_end":39338,"line_start":11,"line_end":11,"column_start":5,"column_end":32}},{"value":"/ use num_traits::Inv;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39343,"byte_end":39367,"line_start":12,"line_end":12,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39372,"byte_end":39375,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(7.0.inv() * 7.0, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39380,"byte_end":39417,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((-0.0).inv(), -INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39422,"byte_end":39462,"line_start":15,"line_end":15,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/inv.rs","byte_start":39467,"byte_end":39474,"line_start":16,"line_end":16,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":180},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":3186},{"krate":0,"index":197},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":783},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":792},{"krate":0,"index":201},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":821},{"krate":0,"index":843},{"krate":0,"index":864},{"krate":0,"index":884},{"krate":0,"index":903},{"krate":0,"index":921},{"krate":0,"index":938},{"krate":0,"index":954},{"krate":0,"index":969},{"krate":0,"index":983},{"krate":0,"index":996},{"krate":0,"index":1008},{"krate":0,"index":1019},{"krate":0,"index":1029},{"krate":0,"index":1038},{"krate":0,"index":1046},{"krate":0,"index":1053},{"krate":0,"index":1059},{"krate":0,"index":1064},{"krate":0,"index":1068},{"krate":0,"index":1071}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":197},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":40099,"byte_end":40106,"line_start":7,"line_end":7,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[{"value":"/ Numbers which have upper and lower bounds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":40043,"byte_end":40088,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":40242,"byte_end":40251,"line_start":10,"line_end":10,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the smallest finite number this type can represent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":40172,"byte_end":40234,"line_start":9,"line_end":9,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":40336,"byte_end":40345,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the largest finite number this type can represent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":40267,"byte_end":40328,"line_start":11,"line_end":11,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":208},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":248},{"krate":0,"index":255},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":1090},{"krate":0,"index":1107},{"krate":0,"index":1124}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":218},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42860,"byte_end":42869,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[{"value":"/ Generic trait for floating point numbers that works with `no_std`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42718,"byte_end":42788,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42789,"byte_end":42792,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This trait implements a subset of the `Float` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42793,"byte_end":42849,"line_start":12,"line_end":12,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43266,"byte_end":43274,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"pub fn infinity() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[{"value":"/ Returns positive infinity.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42932,"byte_end":42962,"line_start":14,"line_end":14,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42967,"byte_end":42970,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42975,"byte_end":42989,"line_start":16,"line_end":16,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42994,"byte_end":42997,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43002,"byte_end":43009,"line_start":18,"line_end":18,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43014,"byte_end":43051,"line_start":19,"line_end":19,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43056,"byte_end":43080,"line_start":20,"line_end":20,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43085,"byte_end":43088,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43093,"byte_end":43127,"line_start":22,"line_end":22,"column_start":5,"column_end":39}},{"value":"/     assert!(T::infinity() == x);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43132,"byte_end":43168,"line_start":23,"line_end":23,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43173,"byte_end":43178,"line_start":24,"line_end":24,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43183,"byte_end":43186,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43191,"byte_end":43216,"line_start":26,"line_end":26,"column_start":5,"column_end":30}},{"value":"/ check(f64::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43221,"byte_end":43246,"line_start":27,"line_end":27,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43251,"byte_end":43258,"line_start":28,"line_end":28,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43637,"byte_end":43649,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"pub fn neg_infinity() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[{"value":"/ Returns negative infinity.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43291,"byte_end":43321,"line_start":31,"line_end":31,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43326,"byte_end":43329,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43334,"byte_end":43348,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43353,"byte_end":43356,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43361,"byte_end":43368,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43373,"byte_end":43410,"line_start":36,"line_end":36,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43415,"byte_end":43439,"line_start":37,"line_end":37,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43444,"byte_end":43447,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43452,"byte_end":43486,"line_start":39,"line_end":39,"column_start":5,"column_end":39}},{"value":"/     assert!(T::neg_infinity() == x);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43491,"byte_end":43531,"line_start":40,"line_end":40,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43536,"byte_end":43541,"line_start":41,"line_end":41,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43546,"byte_end":43549,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43554,"byte_end":43583,"line_start":43,"line_end":43,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43588,"byte_end":43617,"line_start":44,"line_end":44,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43622,"byte_end":43629,"line_start":45,"line_end":45,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43959,"byte_end":43962,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"pub fn nan() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[{"value":"/ Returns NaN.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43666,"byte_end":43682,"line_start":48,"line_end":48,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43687,"byte_end":43690,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43695,"byte_end":43709,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43714,"byte_end":43717,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43722,"byte_end":43729,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43734,"byte_end":43771,"line_start":53,"line_end":53,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43776,"byte_end":43779,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43784,"byte_end":43814,"line_start":55,"line_end":55,"column_start":5,"column_end":35}},{"value":"/     let n = T::nan();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43819,"byte_end":43844,"line_start":56,"line_end":56,"column_start":5,"column_end":30}},{"value":"/     assert!(n != n);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43849,"byte_end":43873,"line_start":57,"line_end":57,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43878,"byte_end":43883,"line_start":58,"line_end":58,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43888,"byte_end":43891,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ check::<f32>();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43896,"byte_end":43915,"line_start":60,"line_end":60,"column_start":5,"column_end":24}},{"value":"/ check::<f64>();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43920,"byte_end":43939,"line_start":61,"line_end":61,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43944,"byte_end":43951,"line_start":62,"line_end":62,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44378,"byte_end":44386,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"pub fn neg_zero() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[{"value":"/ Returns `-0.0`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":43979,"byte_end":43998,"line_start":65,"line_end":65,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44003,"byte_end":44006,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44011,"byte_end":44025,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44030,"byte_end":44033,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44038,"byte_end":44045,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44050,"byte_end":44087,"line_start":70,"line_end":70,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44092,"byte_end":44116,"line_start":71,"line_end":71,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44121,"byte_end":44124,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(n: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44129,"byte_end":44163,"line_start":73,"line_end":73,"column_start":5,"column_end":39}},{"value":"/     let z = T::neg_zero();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44168,"byte_end":44198,"line_start":74,"line_end":74,"column_start":5,"column_end":35}},{"value":"/     assert!(z.is_zero());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44203,"byte_end":44232,"line_start":75,"line_end":75,"column_start":5,"column_end":34}},{"value":"/     assert!(T::one() / z == n);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44237,"byte_end":44272,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44277,"byte_end":44282,"line_start":77,"line_end":77,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44287,"byte_end":44290,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44295,"byte_end":44324,"line_start":79,"line_end":79,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44329,"byte_end":44358,"line_start":80,"line_end":80,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44363,"byte_end":44370,"line_start":81,"line_end":81,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44765,"byte_end":44774,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest finite value that this type can represent.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44403,"byte_end":44470,"line_start":84,"line_end":84,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44475,"byte_end":44478,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44483,"byte_end":44497,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44502,"byte_end":44505,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44510,"byte_end":44517,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44522,"byte_end":44559,"line_start":89,"line_end":89,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44564,"byte_end":44588,"line_start":90,"line_end":90,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44593,"byte_end":44596,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44601,"byte_end":44635,"line_start":92,"line_end":92,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_value() == x);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44640,"byte_end":44677,"line_start":93,"line_end":93,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44682,"byte_end":44687,"line_start":94,"line_end":94,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44692,"byte_end":44695,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44700,"byte_end":44720,"line_start":96,"line_end":96,"column_start":5,"column_end":25}},{"value":"/ check(f64::MIN);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44725,"byte_end":44745,"line_start":97,"line_end":97,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44750,"byte_end":44757,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45194,"byte_end":45212,"line_start":116,"line_end":116,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"pub fn min_positive_value() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest positive, normalized value that this type can represent.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44791,"byte_end":44872,"line_start":101,"line_end":101,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44877,"byte_end":44880,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44885,"byte_end":44899,"line_start":103,"line_end":103,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44904,"byte_end":44907,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44912,"byte_end":44919,"line_start":105,"line_end":105,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44924,"byte_end":44961,"line_start":106,"line_end":106,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44966,"byte_end":44990,"line_start":107,"line_end":107,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":44995,"byte_end":44998,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45003,"byte_end":45037,"line_start":109,"line_end":109,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_positive_value() == x);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45042,"byte_end":45088,"line_start":110,"line_end":110,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45093,"byte_end":45098,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45103,"byte_end":45106,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN_POSITIVE);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45111,"byte_end":45140,"line_start":113,"line_end":113,"column_start":5,"column_end":34}},{"value":"/ check(f64::MIN_POSITIVE);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45145,"byte_end":45174,"line_start":114,"line_end":114,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45179,"byte_end":45186,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45574,"byte_end":45581,"line_start":133,"line_end":133,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"pub fn epsilon() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[{"value":"/ Returns epsilon, a small positive value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45229,"byte_end":45273,"line_start":118,"line_end":118,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45278,"byte_end":45281,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45286,"byte_end":45300,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45305,"byte_end":45308,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45313,"byte_end":45320,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45325,"byte_end":45362,"line_start":123,"line_end":123,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45367,"byte_end":45391,"line_start":124,"line_end":124,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45396,"byte_end":45399,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45404,"byte_end":45438,"line_start":126,"line_end":126,"column_start":5,"column_end":39}},{"value":"/     assert!(T::epsilon() == x);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45443,"byte_end":45478,"line_start":127,"line_end":127,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45483,"byte_end":45488,"line_start":128,"line_end":128,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45493,"byte_end":45496,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ check(f32::EPSILON);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45501,"byte_end":45525,"line_start":130,"line_end":130,"column_start":5,"column_end":29}},{"value":"/ check(f64::EPSILON);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45530,"byte_end":45554,"line_start":131,"line_end":131,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45559,"byte_end":45566,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45959,"byte_end":45968,"line_start":150,"line_end":150,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the largest finite value that this type can represent.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45598,"byte_end":45664,"line_start":135,"line_end":135,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45669,"byte_end":45672,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45677,"byte_end":45691,"line_start":137,"line_end":137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45696,"byte_end":45699,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45704,"byte_end":45711,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45716,"byte_end":45753,"line_start":140,"line_end":140,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45758,"byte_end":45782,"line_start":141,"line_end":141,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45787,"byte_end":45790,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45795,"byte_end":45829,"line_start":143,"line_end":143,"column_start":5,"column_end":39}},{"value":"/     assert!(T::max_value() == x);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45834,"byte_end":45871,"line_start":144,"line_end":144,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45876,"byte_end":45881,"line_start":145,"line_end":145,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45886,"byte_end":45889,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45894,"byte_end":45914,"line_start":147,"line_end":147,"column_start":5,"column_end":25}},{"value":"/ check(f64::MAX);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45919,"byte_end":45939,"line_start":148,"line_end":148,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45944,"byte_end":45951,"line_start":149,"line_end":149,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46418,"byte_end":46424,"line_start":170,"line_end":170,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"pub fn is_nan(Self) -> bool","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is NaN.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":45985,"byte_end":46025,"line_start":152,"line_end":152,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46030,"byte_end":46033,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46038,"byte_end":46052,"line_start":154,"line_end":154,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46057,"byte_end":46060,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46065,"byte_end":46072,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46077,"byte_end":46114,"line_start":157,"line_end":157,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46119,"byte_end":46143,"line_start":158,"line_end":158,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46148,"byte_end":46151,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46156,"byte_end":46199,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_nan() == p);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46204,"byte_end":46237,"line_start":161,"line_end":161,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46242,"byte_end":46247,"line_start":162,"line_end":162,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46252,"byte_end":46255,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ check(f32::NAN, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46260,"byte_end":46286,"line_start":164,"line_end":164,"column_start":5,"column_end":31}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46291,"byte_end":46323,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/ check(f64::NAN, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46328,"byte_end":46354,"line_start":166,"line_end":166,"column_start":5,"column_end":31}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46359,"byte_end":46384,"line_start":167,"line_end":167,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46389,"byte_end":46396,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46401,"byte_end":46410,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47001,"byte_end":47012,"line_start":194,"line_end":194,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"pub fn is_infinite(Self) -> bool","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is infinite.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46473,"byte_end":46518,"line_start":174,"line_end":174,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46523,"byte_end":46526,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46531,"byte_end":46545,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46550,"byte_end":46553,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46558,"byte_end":46565,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46570,"byte_end":46607,"line_start":179,"line_end":179,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46612,"byte_end":46636,"line_start":180,"line_end":180,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46641,"byte_end":46644,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46649,"byte_end":46692,"line_start":182,"line_end":182,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_infinite() == p);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46697,"byte_end":46735,"line_start":183,"line_end":183,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46740,"byte_end":46745,"line_start":184,"line_end":184,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46750,"byte_end":46753,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46758,"byte_end":46789,"line_start":186,"line_end":186,"column_start":5,"column_end":36}},{"value":"/ check(f32::NEG_INFINITY, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46794,"byte_end":46829,"line_start":187,"line_end":187,"column_start":5,"column_end":40}},{"value":"/ check(f32::NAN, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46834,"byte_end":46861,"line_start":188,"line_end":188,"column_start":5,"column_end":32}},{"value":"/ check(f64::INFINITY, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46866,"byte_end":46897,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46902,"byte_end":46937,"line_start":190,"line_end":190,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46942,"byte_end":46967,"line_start":191,"line_end":191,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46972,"byte_end":46979,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":46984,"byte_end":46993,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47613,"byte_end":47622,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"pub fn is_finite(Self) -> bool","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither infinite or NaN.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47105,"byte_end":47165,"line_start":198,"line_end":198,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47170,"byte_end":47173,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47178,"byte_end":47192,"line_start":200,"line_end":200,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47197,"byte_end":47200,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47205,"byte_end":47212,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47217,"byte_end":47254,"line_start":203,"line_end":203,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47259,"byte_end":47283,"line_start":204,"line_end":204,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47288,"byte_end":47291,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47296,"byte_end":47339,"line_start":206,"line_end":206,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_finite() == p);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47344,"byte_end":47380,"line_start":207,"line_end":207,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47385,"byte_end":47390,"line_start":208,"line_end":208,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47395,"byte_end":47398,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47403,"byte_end":47435,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47440,"byte_end":47466,"line_start":211,"line_end":211,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47471,"byte_end":47507,"line_start":212,"line_end":212,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47512,"byte_end":47547,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47552,"byte_end":47579,"line_start":214,"line_end":214,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47584,"byte_end":47591,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47596,"byte_end":47605,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48220,"byte_end":48229,"line_start":240,"line_end":240,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"pub fn is_normal(Self) -> bool","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal or NaN.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47697,"byte_end":47774,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47779,"byte_end":47782,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47787,"byte_end":47801,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47806,"byte_end":47809,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47814,"byte_end":47821,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47826,"byte_end":47863,"line_start":226,"line_end":226,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47868,"byte_end":47892,"line_start":227,"line_end":227,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47897,"byte_end":47900,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47905,"byte_end":47948,"line_start":229,"line_end":229,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_normal() == p);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47953,"byte_end":47989,"line_start":230,"line_end":230,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":47994,"byte_end":47999,"line_start":231,"line_end":231,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48004,"byte_end":48007,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48012,"byte_end":48044,"line_start":233,"line_end":233,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48049,"byte_end":48075,"line_start":234,"line_end":234,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48080,"byte_end":48116,"line_start":235,"line_end":235,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48121,"byte_end":48156,"line_start":236,"line_end":236,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48161,"byte_end":48186,"line_start":237,"line_end":237,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48191,"byte_end":48198,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48203,"byte_end":48212,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49068,"byte_end":49076,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"pub fn classify(Self) -> FpCategory","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number. If only one property","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48303,"byte_end":48378,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/ is going to be tested, it is generally faster to use the specific","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48383,"byte_end":48452,"line_start":245,"line_end":245,"column_start":5,"column_end":74}},{"value":"/ predicate instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48457,"byte_end":48479,"line_start":246,"line_end":246,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48484,"byte_end":48487,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48492,"byte_end":48506,"line_start":248,"line_end":248,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48511,"byte_end":48514,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48519,"byte_end":48526,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48531,"byte_end":48568,"line_start":251,"line_end":251,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48573,"byte_end":48597,"line_start":252,"line_end":252,"column_start":5,"column_end":29}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48602,"byte_end":48631,"line_start":253,"line_end":253,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48636,"byte_end":48639,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, c: FpCategory) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48644,"byte_end":48693,"line_start":255,"line_end":255,"column_start":5,"column_end":54}},{"value":"/     assert!(x.classify() == c);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48698,"byte_end":48733,"line_start":256,"line_end":256,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48738,"byte_end":48743,"line_start":257,"line_end":257,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48748,"byte_end":48751,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, FpCategory::Infinite);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48756,"byte_end":48803,"line_start":259,"line_end":259,"column_start":5,"column_end":52}},{"value":"/ check(f32::MAX, FpCategory::Normal);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48808,"byte_end":48848,"line_start":260,"line_end":260,"column_start":5,"column_end":45}},{"value":"/ check(f64::NAN, FpCategory::Nan);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48853,"byte_end":48890,"line_start":261,"line_end":261,"column_start":5,"column_end":42}},{"value":"/ check(f64::MIN_POSITIVE, FpCategory::Normal);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48895,"byte_end":48944,"line_start":262,"line_end":262,"column_start":5,"column_end":54}},{"value":"/ check(f64::MIN_POSITIVE / 2.0, FpCategory::Subnormal);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":48949,"byte_end":49007,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"/ check(0.0f64, FpCategory::Zero);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49012,"byte_end":49048,"line_start":264,"line_end":264,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49053,"byte_end":49060,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49709,"byte_end":49714,"line_start":291,"line_end":291,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49103,"byte_end":49166,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49171,"byte_end":49174,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49179,"byte_end":49193,"line_start":270,"line_end":270,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49198,"byte_end":49201,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49206,"byte_end":49213,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49218,"byte_end":49255,"line_start":273,"line_end":273,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49260,"byte_end":49284,"line_start":274,"line_end":274,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49289,"byte_end":49292,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49297,"byte_end":49337,"line_start":276,"line_end":276,"column_start":5,"column_end":45}},{"value":"/     assert!(x.floor() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49342,"byte_end":49374,"line_start":277,"line_end":277,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49379,"byte_end":49384,"line_start":278,"line_end":278,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49389,"byte_end":49392,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49397,"byte_end":49437,"line_start":280,"line_end":280,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49442,"byte_end":49465,"line_start":281,"line_end":281,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49470,"byte_end":49493,"line_start":282,"line_end":282,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49498,"byte_end":49521,"line_start":283,"line_end":283,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49526,"byte_end":49550,"line_start":284,"line_end":284,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49555,"byte_end":49580,"line_start":285,"line_end":285,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49585,"byte_end":49610,"line_start":286,"line_end":286,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -2.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49615,"byte_end":49640,"line_start":287,"line_end":287,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49645,"byte_end":49675,"line_start":288,"line_end":288,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49680,"byte_end":49687,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49692,"byte_end":49701,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50560,"byte_end":50564,"line_start":325,"line_end":325,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":49951,"byte_end":50018,"line_start":302,"line_end":302,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50023,"byte_end":50026,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50031,"byte_end":50045,"line_start":304,"line_end":304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50050,"byte_end":50053,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50058,"byte_end":50065,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50070,"byte_end":50107,"line_start":307,"line_end":307,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50112,"byte_end":50136,"line_start":308,"line_end":308,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50141,"byte_end":50144,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50149,"byte_end":50189,"line_start":310,"line_end":310,"column_start":5,"column_end":45}},{"value":"/     assert!(x.ceil() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50194,"byte_end":50225,"line_start":311,"line_end":311,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50230,"byte_end":50235,"line_start":312,"line_end":312,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50240,"byte_end":50243,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50248,"byte_end":50288,"line_start":314,"line_end":314,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50293,"byte_end":50316,"line_start":315,"line_end":315,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50321,"byte_end":50344,"line_start":316,"line_end":316,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 2.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50349,"byte_end":50372,"line_start":317,"line_end":317,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50377,"byte_end":50401,"line_start":318,"line_end":318,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50406,"byte_end":50431,"line_start":319,"line_end":319,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50436,"byte_end":50461,"line_start":320,"line_end":320,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50466,"byte_end":50491,"line_start":321,"line_end":321,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50496,"byte_end":50526,"line_start":322,"line_end":322,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50531,"byte_end":50538,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50543,"byte_end":50552,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51396,"byte_end":51401,"line_start":358,"line_end":358,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"/ Returns the nearest integer to a number. Round half-way cases away from `0.0`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50801,"byte_end":50883,"line_start":336,"line_end":336,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50888,"byte_end":50891,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50896,"byte_end":50910,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50915,"byte_end":50918,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50923,"byte_end":50930,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50935,"byte_end":50972,"line_start":341,"line_end":341,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":50977,"byte_end":51001,"line_start":342,"line_end":342,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51006,"byte_end":51009,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51014,"byte_end":51054,"line_start":344,"line_end":344,"column_start":5,"column_end":45}},{"value":"/     assert!(x.round() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51059,"byte_end":51091,"line_start":345,"line_end":345,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51096,"byte_end":51101,"line_start":346,"line_end":346,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51106,"byte_end":51109,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51114,"byte_end":51154,"line_start":348,"line_end":348,"column_start":5,"column_end":45}},{"value":"/ check(0.4f32, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51159,"byte_end":51182,"line_start":349,"line_end":349,"column_start":5,"column_end":28}},{"value":"/ check(0.5f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51187,"byte_end":51210,"line_start":350,"line_end":350,"column_start":5,"column_end":28}},{"value":"/ check(0.6f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51215,"byte_end":51238,"line_start":351,"line_end":351,"column_start":5,"column_end":28}},{"value":"/ check(-0.4f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51243,"byte_end":51267,"line_start":352,"line_end":352,"column_start":5,"column_end":29}},{"value":"/ check(-0.5f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51272,"byte_end":51297,"line_start":353,"line_end":353,"column_start":5,"column_end":30}},{"value":"/ check(-0.6f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51302,"byte_end":51327,"line_start":354,"line_end":354,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51332,"byte_end":51362,"line_start":355,"line_end":355,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51367,"byte_end":51374,"line_start":356,"line_end":356,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51379,"byte_end":51388,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52492,"byte_end":52497,"line_start":402,"line_end":402,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"pub fn trunc(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"/ Return the integer part of a number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51909,"byte_end":51949,"line_start":379,"line_end":379,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51954,"byte_end":51957,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51962,"byte_end":51976,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51981,"byte_end":51984,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":51989,"byte_end":51996,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52001,"byte_end":52038,"line_start":384,"line_end":384,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52043,"byte_end":52067,"line_start":385,"line_end":385,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52072,"byte_end":52075,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52080,"byte_end":52120,"line_start":387,"line_end":387,"column_start":5,"column_end":45}},{"value":"/     assert!(x.trunc() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52125,"byte_end":52157,"line_start":388,"line_end":388,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52162,"byte_end":52167,"line_start":389,"line_end":389,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52172,"byte_end":52175,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52180,"byte_end":52220,"line_start":391,"line_end":391,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52225,"byte_end":52248,"line_start":392,"line_end":392,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52253,"byte_end":52276,"line_start":393,"line_end":393,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52281,"byte_end":52304,"line_start":394,"line_end":394,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52309,"byte_end":52333,"line_start":395,"line_end":395,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52338,"byte_end":52363,"line_start":396,"line_end":396,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52368,"byte_end":52393,"line_start":397,"line_end":397,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52398,"byte_end":52423,"line_start":398,"line_end":398,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52428,"byte_end":52458,"line_start":399,"line_end":399,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52463,"byte_end":52470,"line_start":400,"line_end":400,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52475,"byte_end":52484,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53218,"byte_end":53223,"line_start":434,"line_end":434,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"pub fn fract(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"/ Returns the fractional part of a number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52644,"byte_end":52688,"line_start":411,"line_end":411,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52693,"byte_end":52696,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52701,"byte_end":52715,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52720,"byte_end":52723,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52728,"byte_end":52735,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52740,"byte_end":52777,"line_start":416,"line_end":416,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52782,"byte_end":52806,"line_start":417,"line_end":417,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52811,"byte_end":52814,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52819,"byte_end":52859,"line_start":419,"line_end":419,"column_start":5,"column_end":45}},{"value":"/     assert!(x.fract() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52864,"byte_end":52896,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52901,"byte_end":52906,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52911,"byte_end":52914,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52919,"byte_end":52944,"line_start":423,"line_end":423,"column_start":5,"column_end":30}},{"value":"/ check(0.75f32, 0.75);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52949,"byte_end":52974,"line_start":424,"line_end":424,"column_start":5,"column_end":30}},{"value":"/ check(1.0f32, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":52979,"byte_end":53002,"line_start":425,"line_end":425,"column_start":5,"column_end":28}},{"value":"/ check(1.25f32, 0.25);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53007,"byte_end":53032,"line_start":426,"line_end":426,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53037,"byte_end":53061,"line_start":427,"line_end":427,"column_start":5,"column_end":29}},{"value":"/ check(-0.75f64, -0.75);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53066,"byte_end":53093,"line_start":428,"line_end":428,"column_start":5,"column_end":32}},{"value":"/ check(-1.0f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53098,"byte_end":53122,"line_start":429,"line_end":429,"column_start":5,"column_end":29}},{"value":"/ check(-1.25f64, -0.25);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53127,"byte_end":53154,"line_start":430,"line_end":430,"column_start":5,"column_end":32}},{"value":"/ check(f64::MIN, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53159,"byte_end":53184,"line_start":431,"line_end":431,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53189,"byte_end":53196,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53201,"byte_end":53210,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53928,"byte_end":53931,"line_start":463,"line_end":463,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"pub fn abs(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`. Returns `FloatCore::nan()` if the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53362,"byte_end":53438,"line_start":442,"line_end":442,"column_start":5,"column_end":81}},{"value":"/ number is `FloatCore::nan()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53443,"byte_end":53476,"line_start":443,"line_end":443,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53481,"byte_end":53484,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53489,"byte_end":53503,"line_start":445,"line_end":445,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53508,"byte_end":53511,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53516,"byte_end":53523,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53528,"byte_end":53565,"line_start":448,"line_end":448,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53570,"byte_end":53594,"line_start":449,"line_end":449,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53599,"byte_end":53602,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53607,"byte_end":53647,"line_start":451,"line_end":451,"column_start":5,"column_end":45}},{"value":"/     assert!(x.abs() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53652,"byte_end":53682,"line_start":452,"line_end":452,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53687,"byte_end":53692,"line_start":453,"line_end":453,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53697,"byte_end":53700,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53705,"byte_end":53745,"line_start":455,"line_end":455,"column_start":5,"column_end":45}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53750,"byte_end":53773,"line_start":456,"line_end":456,"column_start":5,"column_end":28}},{"value":"/ check(0.0f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53778,"byte_end":53801,"line_start":457,"line_end":457,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53806,"byte_end":53830,"line_start":458,"line_end":458,"column_start":5,"column_end":29}},{"value":"/ check(-1.0f64, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53835,"byte_end":53859,"line_start":459,"line_end":459,"column_start":5,"column_end":29}},{"value":"/ check(f64::MIN, f64::MAX);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53864,"byte_end":53894,"line_start":460,"line_end":460,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53899,"byte_end":53906,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":53911,"byte_end":53920,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54855,"byte_end":54861,"line_start":497,"line_end":497,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"pub fn signum(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54124,"byte_end":54180,"line_start":473,"line_end":473,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54185,"byte_end":54188,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `FloatCore::infinity()`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54193,"byte_end":54265,"line_start":475,"line_end":475,"column_start":5,"column_end":77}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `FloatCore::neg_infinity()`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54270,"byte_end":54347,"line_start":476,"line_end":476,"column_start":5,"column_end":82}},{"value":"/ - `FloatCore::nan()` if the number is `FloatCore::nan()`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54352,"byte_end":54412,"line_start":477,"line_end":477,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54417,"byte_end":54420,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54425,"byte_end":54439,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54444,"byte_end":54447,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54452,"byte_end":54459,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54464,"byte_end":54501,"line_start":482,"line_end":482,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54506,"byte_end":54530,"line_start":483,"line_end":483,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54535,"byte_end":54538,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54543,"byte_end":54583,"line_start":485,"line_end":485,"column_start":5,"column_end":45}},{"value":"/     assert!(x.signum() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54588,"byte_end":54621,"line_start":486,"line_end":486,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54626,"byte_end":54631,"line_start":487,"line_end":487,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54636,"byte_end":54639,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54644,"byte_end":54674,"line_start":489,"line_end":489,"column_start":5,"column_end":35}},{"value":"/ check(3.0f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54679,"byte_end":54702,"line_start":490,"line_end":490,"column_start":5,"column_end":28}},{"value":"/ check(0.0f32, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54707,"byte_end":54730,"line_start":491,"line_end":491,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54735,"byte_end":54760,"line_start":492,"line_end":492,"column_start":5,"column_end":30}},{"value":"/ check(-3.0f64, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54765,"byte_end":54790,"line_start":493,"line_end":493,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54795,"byte_end":54821,"line_start":494,"line_end":494,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54826,"byte_end":54833,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":54838,"byte_end":54847,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55723,"byte_end":55739,"line_start":530,"line_end":530,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive, including `+0.0` and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55060,"byte_end":55122,"line_start":507,"line_end":507,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::infinity()`, and since Rust 1.20 also","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55127,"byte_end":55180,"line_start":508,"line_end":508,"column_start":5,"column_end":58}},{"value":"/ `FloatCore::nan()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55185,"byte_end":55208,"line_start":509,"line_end":509,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55213,"byte_end":55216,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55221,"byte_end":55235,"line_start":511,"line_end":511,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55240,"byte_end":55243,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55248,"byte_end":55255,"line_start":513,"line_end":513,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55260,"byte_end":55297,"line_start":514,"line_end":514,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55302,"byte_end":55326,"line_start":515,"line_end":515,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55331,"byte_end":55334,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55339,"byte_end":55382,"line_start":517,"line_end":517,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_positive() == p);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55387,"byte_end":55430,"line_start":518,"line_end":518,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55435,"byte_end":55440,"line_start":519,"line_end":519,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55445,"byte_end":55448,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55453,"byte_end":55484,"line_start":521,"line_end":521,"column_start":5,"column_end":36}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55489,"byte_end":55515,"line_start":522,"line_end":522,"column_start":5,"column_end":31}},{"value":"/ check(0.0f32, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55520,"byte_end":55544,"line_start":523,"line_end":523,"column_start":5,"column_end":29}},{"value":"/ check(-0.0f64, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55549,"byte_end":55575,"line_start":524,"line_end":524,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55580,"byte_end":55616,"line_start":525,"line_end":525,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55621,"byte_end":55656,"line_start":526,"line_end":526,"column_start":5,"column_end":40}},{"value":"/ check(-f64::NAN, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55661,"byte_end":55689,"line_start":527,"line_end":527,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55694,"byte_end":55701,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55706,"byte_end":55715,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56469,"byte_end":56485,"line_start":557,"line_end":557,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative, including `-0.0` and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55800,"byte_end":55862,"line_start":534,"line_end":534,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::neg_infinity()`, and since Rust 1.20 also","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55867,"byte_end":55924,"line_start":535,"line_end":535,"column_start":5,"column_end":62}},{"value":"/ `-FloatCore::nan()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55929,"byte_end":55953,"line_start":536,"line_end":536,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55958,"byte_end":55961,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55966,"byte_end":55980,"line_start":538,"line_end":538,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55985,"byte_end":55988,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":55993,"byte_end":56000,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56005,"byte_end":56042,"line_start":541,"line_end":541,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56047,"byte_end":56071,"line_start":542,"line_end":542,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56076,"byte_end":56079,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56084,"byte_end":56127,"line_start":544,"line_end":544,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_negative() == p);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56132,"byte_end":56175,"line_start":545,"line_end":545,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56180,"byte_end":56185,"line_start":546,"line_end":546,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56190,"byte_end":56193,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56198,"byte_end":56230,"line_start":548,"line_end":548,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56235,"byte_end":56262,"line_start":549,"line_end":549,"column_start":5,"column_end":32}},{"value":"/ check(0.0f32, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56267,"byte_end":56292,"line_start":550,"line_end":550,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56297,"byte_end":56322,"line_start":551,"line_end":551,"column_start":5,"column_end":30}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56327,"byte_end":56362,"line_start":552,"line_end":552,"column_start":5,"column_end":40}},{"value":"/ check(f64::MIN_POSITIVE, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56367,"byte_end":56403,"line_start":553,"line_end":553,"column_start":5,"column_end":41}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56408,"byte_end":56435,"line_start":554,"line_end":554,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56440,"byte_end":56447,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56452,"byte_end":56461,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57118,"byte_end":57121,"line_start":582,"line_end":582,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56580,"byte_end":56623,"line_start":562,"line_end":562,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56628,"byte_end":56631,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56636,"byte_end":56708,"line_start":564,"line_end":564,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56713,"byte_end":56716,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56721,"byte_end":56735,"line_start":566,"line_end":566,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56740,"byte_end":56743,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56748,"byte_end":56755,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56760,"byte_end":56797,"line_start":569,"line_end":569,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56802,"byte_end":56826,"line_start":570,"line_end":570,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56831,"byte_end":56834,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, min: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56839,"byte_end":56887,"line_start":572,"line_end":572,"column_start":5,"column_end":53}},{"value":"/     assert!(x.min(y) == min);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56892,"byte_end":56925,"line_start":573,"line_end":573,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56930,"byte_end":56935,"line_start":574,"line_end":574,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56940,"byte_end":56943,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56948,"byte_end":56976,"line_start":576,"line_end":576,"column_start":5,"column_end":33}},{"value":"/ check(f32::NAN, 2.0, 2.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":56981,"byte_end":57011,"line_start":577,"line_end":577,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, -2.0, -2.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57016,"byte_end":57046,"line_start":578,"line_end":578,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, f64::NAN, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57051,"byte_end":57084,"line_start":579,"line_end":579,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57089,"byte_end":57096,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57101,"byte_end":57110,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57878,"byte_end":57881,"line_start":612,"line_end":612,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57336,"byte_end":57379,"line_start":592,"line_end":592,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57384,"byte_end":57387,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57392,"byte_end":57464,"line_start":594,"line_end":594,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57469,"byte_end":57472,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57477,"byte_end":57491,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57496,"byte_end":57499,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57504,"byte_end":57511,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57516,"byte_end":57553,"line_start":599,"line_end":599,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57558,"byte_end":57582,"line_start":600,"line_end":600,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57587,"byte_end":57590,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, min: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57595,"byte_end":57643,"line_start":602,"line_end":602,"column_start":5,"column_end":53}},{"value":"/     assert!(x.max(y) == min);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57648,"byte_end":57681,"line_start":603,"line_end":603,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57686,"byte_end":57691,"line_start":604,"line_end":604,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57696,"byte_end":57699,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 2.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57704,"byte_end":57732,"line_start":606,"line_end":606,"column_start":5,"column_end":33}},{"value":"/ check(1.0f32, f32::NAN, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57737,"byte_end":57770,"line_start":607,"line_end":607,"column_start":5,"column_end":38}},{"value":"/ check(-1.0f64, 2.0, 2.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57775,"byte_end":57804,"line_start":608,"line_end":608,"column_start":5,"column_end":34}},{"value":"/ check(-1.0f64, f64::NAN, -1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57809,"byte_end":57844,"line_start":609,"line_end":609,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57849,"byte_end":57856,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":57861,"byte_end":57870,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58596,"byte_end":58601,"line_start":641,"line_end":641,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"pub fn recip(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"/ Returns the reciprocal (multiplicative inverse) of the number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58096,"byte_end":58162,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58167,"byte_end":58170,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58175,"byte_end":58189,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58194,"byte_end":58197,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58202,"byte_end":58209,"line_start":626,"line_end":626,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58214,"byte_end":58251,"line_start":627,"line_end":627,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58256,"byte_end":58280,"line_start":628,"line_end":628,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58285,"byte_end":58288,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58293,"byte_end":58333,"line_start":630,"line_end":630,"column_start":5,"column_end":45}},{"value":"/     assert!(x.recip() == y);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58338,"byte_end":58370,"line_start":631,"line_end":631,"column_start":5,"column_end":37}},{"value":"/     assert!(y.recip() == x);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58375,"byte_end":58407,"line_start":632,"line_end":632,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58412,"byte_end":58417,"line_start":633,"line_end":633,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58422,"byte_end":58425,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58430,"byte_end":58460,"line_start":635,"line_end":635,"column_start":5,"column_end":35}},{"value":"/ check(2.0f32, 0.5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58465,"byte_end":58488,"line_start":636,"line_end":636,"column_start":5,"column_end":28}},{"value":"/ check(-0.25f64, -4.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58493,"byte_end":58519,"line_start":637,"line_end":637,"column_start":5,"column_end":31}},{"value":"/ check(-0.0f64, f64::NEG_INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58524,"byte_end":58562,"line_start":638,"line_end":638,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58567,"byte_end":58574,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58579,"byte_end":58588,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59195,"byte_end":59199,"line_start":665,"line_end":665,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"pub fn powi(Self, i32) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"/ Raise a number to an integer power.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58656,"byte_end":58695,"line_start":645,"line_end":645,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58700,"byte_end":58703,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ Using this function is generally faster than using `powf`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58708,"byte_end":58769,"line_start":647,"line_end":647,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58774,"byte_end":58777,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58782,"byte_end":58796,"line_start":649,"line_end":649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58801,"byte_end":58804,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58809,"byte_end":58816,"line_start":651,"line_end":651,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58821,"byte_end":58858,"line_start":652,"line_end":652,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58863,"byte_end":58866,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, exp: i32, powi: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58871,"byte_end":58924,"line_start":654,"line_end":654,"column_start":5,"column_end":58}},{"value":"/     assert!(x.powi(exp) == powi);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58929,"byte_end":58966,"line_start":655,"line_end":655,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58971,"byte_end":58976,"line_start":656,"line_end":656,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58981,"byte_end":58984,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ check(9.0f32, 2, 81.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":58989,"byte_end":59016,"line_start":658,"line_end":658,"column_start":5,"column_end":32}},{"value":"/ check(1.0f32, -2, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59021,"byte_end":59048,"line_start":659,"line_end":659,"column_start":5,"column_end":32}},{"value":"/ check(10.0f64, 20, 1e20);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59053,"byte_end":59082,"line_start":660,"line_end":660,"column_start":5,"column_end":34}},{"value":"/ check(4.0f64, -2, 0.0625);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59087,"byte_end":59117,"line_start":661,"line_end":661,"column_start":5,"column_end":35}},{"value":"/ check(-1.0f64, std::i32::MIN, 1.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59122,"byte_end":59161,"line_start":662,"line_end":662,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59166,"byte_end":59173,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59178,"byte_end":59187,"line_start":664,"line_end":664,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60116,"byte_end":60126,"line_start":693,"line_end":693,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"pub fn to_degrees(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[{"value":"/ Converts to degrees, assuming the number is in radians.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59641,"byte_end":59700,"line_start":676,"line_end":676,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59705,"byte_end":59708,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59713,"byte_end":59727,"line_start":678,"line_end":678,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59732,"byte_end":59735,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59740,"byte_end":59747,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59752,"byte_end":59789,"line_start":681,"line_end":681,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59794,"byte_end":59818,"line_start":682,"line_end":682,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59823,"byte_end":59826,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(rad: T, deg: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59831,"byte_end":59875,"line_start":684,"line_end":684,"column_start":5,"column_end":49}},{"value":"/     assert!(rad.to_degrees() == deg);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59880,"byte_end":59921,"line_start":685,"line_end":685,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59926,"byte_end":59931,"line_start":686,"line_end":686,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59936,"byte_end":59939,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59944,"byte_end":59967,"line_start":688,"line_end":688,"column_start":5,"column_end":28}},{"value":"/ check(f32::consts::PI, 180.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":59972,"byte_end":60006,"line_start":689,"line_end":689,"column_start":5,"column_end":39}},{"value":"/ check(f64::consts::FRAC_PI_4, 45.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60011,"byte_end":60051,"line_start":690,"line_end":690,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60056,"byte_end":60096,"line_start":691,"line_end":691,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60101,"byte_end":60108,"line_start":692,"line_end":692,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60622,"byte_end":60632,"line_start":712,"line_end":712,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"pub fn to_radians(Self) -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[{"value":"/ Converts to radians, assuming the number is in degrees.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60147,"byte_end":60206,"line_start":695,"line_end":695,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60211,"byte_end":60214,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60219,"byte_end":60233,"line_start":697,"line_end":697,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60238,"byte_end":60241,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60246,"byte_end":60253,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60258,"byte_end":60295,"line_start":700,"line_end":700,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60300,"byte_end":60324,"line_start":701,"line_end":701,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60329,"byte_end":60332,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(deg: T, rad: T) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60337,"byte_end":60381,"line_start":703,"line_end":703,"column_start":5,"column_end":49}},{"value":"/     assert!(deg.to_radians() == rad);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60386,"byte_end":60427,"line_start":704,"line_end":704,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60432,"byte_end":60437,"line_start":705,"line_end":705,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60442,"byte_end":60445,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60450,"byte_end":60473,"line_start":707,"line_end":707,"column_start":5,"column_end":28}},{"value":"/ check(180.0, f32::consts::PI);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60478,"byte_end":60512,"line_start":708,"line_end":708,"column_start":5,"column_end":39}},{"value":"/ check(45.0, f64::consts::FRAC_PI_4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60517,"byte_end":60557,"line_start":709,"line_end":709,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60562,"byte_end":60602,"line_start":710,"line_end":710,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60607,"byte_end":60614,"line_start":711,"line_end":711,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61391,"byte_end":61405,"line_start":735,"line_end":735,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"pub fn integer_decode(Self) -> (u64, i16, i8)","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[{"value":"/ Returns the mantissa, base 2 exponent, and sign as integers, respectively.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60653,"byte_end":60731,"line_start":714,"line_end":714,"column_start":5,"column_end":83}},{"value":"/ The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60736,"byte_end":60813,"line_start":715,"line_end":715,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60818,"byte_end":60821,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60826,"byte_end":60840,"line_start":717,"line_end":717,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60845,"byte_end":60848,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60853,"byte_end":60860,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60865,"byte_end":60902,"line_start":720,"line_end":720,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60907,"byte_end":60931,"line_start":721,"line_end":721,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60936,"byte_end":60939,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, m: u64, e: i16, s:i8) {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":60944,"byte_end":61000,"line_start":723,"line_end":723,"column_start":5,"column_end":61}},{"value":"/     let (mantissa, exponent, sign) = x.integer_decode();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61005,"byte_end":61065,"line_start":724,"line_end":724,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(mantissa, m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61070,"byte_end":61102,"line_start":725,"line_end":725,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(exponent, e);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61107,"byte_end":61139,"line_start":726,"line_end":726,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(sign, s);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61144,"byte_end":61172,"line_start":727,"line_end":727,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61177,"byte_end":61182,"line_start":728,"line_end":728,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61187,"byte_end":61190,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ check(2.0f32, 1 << 23, -22, 1);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61195,"byte_end":61230,"line_start":730,"line_end":730,"column_start":5,"column_end":40}},{"value":"/ check(-2.0f32, 1 << 23, -22, -1);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61235,"byte_end":61272,"line_start":731,"line_end":731,"column_start":5,"column_end":42}},{"value":"/ check(f32::INFINITY, 1 << 23, 105, 1);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61277,"byte_end":61319,"line_start":732,"line_end":732,"column_start":5,"column_end":47}},{"value":"/ check(f64::NEG_INFINITY, 1 << 52, 972, -1);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61324,"byte_end":61371,"line_start":733,"line_end":733,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":61376,"byte_end":61383,"line_start":734,"line_end":734,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93579,"byte_end":93580,"line_start":1936,"line_end":1936,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"pub fn E() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93620,"byte_end":93629,"line_start":1938,"line_end":1938,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"pub fn FRAC_1_PI() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93676,"byte_end":93689,"line_start":1940,"line_end":1940,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"pub fn FRAC_1_SQRT_2() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93729,"byte_end":93738,"line_start":1942,"line_end":1942,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"pub fn FRAC_2_PI() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93784,"byte_end":93798,"line_start":1944,"line_end":1944,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"pub fn FRAC_2_SQRT_PI() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93838,"byte_end":93847,"line_start":1946,"line_end":1946,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"pub fn FRAC_PI_2() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93887,"byte_end":93896,"line_start":1948,"line_end":1948,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"pub fn FRAC_PI_3() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93936,"byte_end":93945,"line_start":1950,"line_end":1950,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"pub fn FRAC_PI_4() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":93985,"byte_end":93994,"line_start":1952,"line_end":1952,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"pub fn FRAC_PI_6() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":94034,"byte_end":94043,"line_start":1954,"line_end":1954,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"pub fn FRAC_PI_8() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":94083,"byte_end":94088,"line_start":1956,"line_end":1956,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"pub fn LN_10() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":94127,"byte_end":94131,"line_start":1958,"line_end":1958,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"pub fn LN_2() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":94171,"byte_end":94178,"line_start":1960,"line_end":1960,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"pub fn LOG10_E() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":94217,"byte_end":94223,"line_start":1962,"line_end":1962,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"pub fn LOG2_E() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":94275,"byte_end":94277,"line_start":1964,"line_end":1964,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"pub fn PI() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":94318,"byte_end":94324,"line_start":1966,"line_end":1966,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"pub fn SQRT_2() -> Self","parent":{"krate":0,"index":1090},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":265},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":3230},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":1141},{"krate":0,"index":1154},{"krate":0,"index":1167},{"krate":0,"index":1180},{"krate":0,"index":1193},{"krate":0,"index":1206},{"krate":0,"index":1219},{"krate":0,"index":1232},{"krate":0,"index":1245},{"krate":0,"index":1258},{"krate":0,"index":1271},{"krate":0,"index":1314},{"krate":0,"index":317},{"krate":0,"index":1357},{"krate":0,"index":1368},{"krate":0,"index":1379},{"krate":0,"index":1390},{"krate":0,"index":1401},{"krate":0,"index":1412},{"krate":0,"index":1423},{"krate":0,"index":1434},{"krate":0,"index":1445},{"krate":0,"index":1456},{"krate":0,"index":1467},{"krate":0,"index":1478},{"krate":0,"index":331},{"krate":0,"index":335},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1513},{"krate":0,"index":1516},{"krate":0,"index":1519},{"krate":0,"index":1522},{"krate":0,"index":346},{"krate":0,"index":350},{"krate":0,"index":1525},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1537},{"krate":0,"index":1539},{"krate":0,"index":1541},{"krate":0,"index":1543},{"krate":0,"index":1545},{"krate":0,"index":1547},{"krate":0,"index":1549},{"krate":0,"index":1551},{"krate":0,"index":1553},{"krate":0,"index":1555},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1615},{"krate":0,"index":1617},{"krate":0,"index":1619},{"krate":0,"index":1621},{"krate":0,"index":1623},{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1629},{"krate":0,"index":1631},{"krate":0,"index":1633},{"krate":0,"index":1635},{"krate":0,"index":1637},{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1645},{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1663},{"krate":0,"index":1665},{"krate":0,"index":1667},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1677},{"krate":0,"index":1679},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1685},{"krate":0,"index":1687},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1715},{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":1739},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1745},{"krate":0,"index":1747},{"krate":0,"index":1749},{"krate":0,"index":1751},{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":1771},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1787},{"krate":0,"index":1789},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1797},{"krate":0,"index":1799},{"krate":0,"index":1801},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1807},{"krate":0,"index":1809},{"krate":0,"index":1811},{"krate":0,"index":1813},{"krate":0,"index":1815},{"krate":0,"index":1817},{"krate":0,"index":1819},{"krate":0,"index":1821},{"krate":0,"index":1823},{"krate":0,"index":1825},{"krate":0,"index":1827},{"krate":0,"index":1829},{"krate":0,"index":1831},{"krate":0,"index":1833},{"krate":0,"index":1835},{"krate":0,"index":1837},{"krate":0,"index":1839},{"krate":0,"index":1841},{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1847},{"krate":0,"index":1849},{"krate":0,"index":1851},{"krate":0,"index":1853},{"krate":0,"index":1855}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":284},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":95840,"byte_end":95851,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":305}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[{"value":"/ A generic trait for converting a value to a number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":95774,"byte_end":95829,"line_start":9,"line_end":9,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":95927,"byte_end":95935,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"pub fn to_isize(&Self) -> Option<isize>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `isize`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":95858,"byte_end":95905,"line_start":11,"line_end":11,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":95910,"byte_end":95919,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96088,"byte_end":96093,"line_start":19,"line_end":19,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"pub fn to_i8(&Self) -> Option<i8>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96022,"byte_end":96066,"line_start":17,"line_end":17,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96071,"byte_end":96080,"line_start":18,"line_end":18,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96241,"byte_end":96247,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"pub fn to_i16(&Self) -> Option<i16>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i16`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96174,"byte_end":96219,"line_start":23,"line_end":23,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96224,"byte_end":96233,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96397,"byte_end":96403,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"pub fn to_i32(&Self) -> Option<i32>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i32`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96330,"byte_end":96375,"line_start":29,"line_end":29,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96380,"byte_end":96389,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96539,"byte_end":96545,"line_start":36,"line_end":36,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"pub fn to_i64(&Self) -> Option<i64>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i64`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96486,"byte_end":96531,"line_start":35,"line_end":35,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96642,"byte_end":96650,"line_start":40,"line_end":40,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"pub fn to_usize(&Self) -> Option<usize>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `usize`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96574,"byte_end":96620,"line_start":38,"line_end":38,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96625,"byte_end":96634,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96803,"byte_end":96808,"line_start":46,"line_end":46,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"pub fn to_u8(&Self) -> Option<u8>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u8`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `u8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96737,"byte_end":96781,"line_start":44,"line_end":44,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96786,"byte_end":96795,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96956,"byte_end":96962,"line_start":52,"line_end":52,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"pub fn to_u16(&Self) -> Option<u16>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u16`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `u16`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96889,"byte_end":96934,"line_start":50,"line_end":50,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":96939,"byte_end":96948,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97112,"byte_end":97118,"line_start":58,"line_end":58,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"pub fn to_u32(&Self) -> Option<u32>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u32`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `u32`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97045,"byte_end":97090,"line_start":56,"line_end":56,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97095,"byte_end":97104,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97268,"byte_end":97274,"line_start":64,"line_end":64,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"pub fn to_u64(&Self) -> Option<u64>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u64`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `u64`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97201,"byte_end":97246,"line_start":62,"line_end":62,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97251,"byte_end":97260,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97370,"byte_end":97376,"line_start":68,"line_end":68,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"pub fn to_f32(&Self) -> Option<f32>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f32`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97303,"byte_end":97348,"line_start":66,"line_end":66,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97353,"byte_end":97362,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97526,"byte_end":97532,"line_start":74,"line_end":74,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"pub fn to_f64(&Self) -> Option<f64>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f64`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97459,"byte_end":97504,"line_start":72,"line_end":72,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":97509,"byte_end":97518,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":317},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":104916,"byte_end":104929,"line_start":304,"line_end":304,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[{"value":"/ A generic trait for converting a number to a value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":104850,"byte_end":104905,"line_start":303,"line_end":303,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105111,"byte_end":105121,"line_start":308,"line_end":308,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"pub fn from_isize(isize) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `isize` to return an optional value of this type. If the\n value cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `isize` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":104943,"byte_end":105014,"line_start":305,"line_end":305,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105019,"byte_end":105089,"line_start":306,"line_end":306,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105094,"byte_end":105103,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105367,"byte_end":105374,"line_start":315,"line_end":315,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"pub fn from_i8(i8) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `i8` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `i8` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105203,"byte_end":105271,"line_start":312,"line_end":312,"column_start":5,"column_end":73}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105276,"byte_end":105345,"line_start":313,"line_end":313,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105350,"byte_end":105359,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105618,"byte_end":105626,"line_start":322,"line_end":322,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"pub fn from_i16(i16) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `i16` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `i16` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105453,"byte_end":105522,"line_start":319,"line_end":319,"column_start":5,"column_end":74}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105527,"byte_end":105596,"line_start":320,"line_end":320,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105601,"byte_end":105610,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105871,"byte_end":105879,"line_start":329,"line_end":329,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"pub fn from_i32(i32) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `i32` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `i32` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105706,"byte_end":105775,"line_start":326,"line_end":326,"column_start":5,"column_end":74}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105780,"byte_end":105849,"line_start":327,"line_end":327,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105854,"byte_end":105863,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106110,"byte_end":106118,"line_start":335,"line_end":335,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"pub fn from_i64(i64) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `i64` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `i64` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":105959,"byte_end":106028,"line_start":333,"line_end":333,"column_start":5,"column_end":74}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106033,"byte_end":106102,"line_start":334,"line_end":334,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106315,"byte_end":106325,"line_start":340,"line_end":340,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"pub fn from_usize(usize) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert a `usize` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert a `usize` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106149,"byte_end":106219,"line_start":337,"line_end":337,"column_start":5,"column_end":75}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106224,"byte_end":106293,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106298,"byte_end":106307,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106571,"byte_end":106578,"line_start":347,"line_end":347,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"pub fn from_u8(u8) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `u8` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `u8` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106407,"byte_end":106475,"line_start":344,"line_end":344,"column_start":5,"column_end":73}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106480,"byte_end":106549,"line_start":345,"line_end":345,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106554,"byte_end":106563,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106822,"byte_end":106830,"line_start":354,"line_end":354,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"pub fn from_u16(u16) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `u16` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `u16` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106657,"byte_end":106726,"line_start":351,"line_end":351,"column_start":5,"column_end":74}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106731,"byte_end":106800,"line_start":352,"line_end":352,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106805,"byte_end":106814,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107075,"byte_end":107083,"line_start":361,"line_end":361,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"pub fn from_u32(u32) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `u32` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `u32` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106910,"byte_end":106979,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":106984,"byte_end":107053,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107058,"byte_end":107067,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107314,"byte_end":107322,"line_start":367,"line_end":367,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"pub fn from_u64(u64) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert an `u64` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert an `u64` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107163,"byte_end":107232,"line_start":365,"line_end":365,"column_start":5,"column_end":74}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107237,"byte_end":107306,"line_start":366,"line_end":366,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107517,"byte_end":107525,"line_start":372,"line_end":372,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"pub fn from_f32(f32) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert a `f32` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert a `f32` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107353,"byte_end":107421,"line_start":369,"line_end":369,"column_start":5,"column_end":73}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107426,"byte_end":107495,"line_start":370,"line_end":370,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107500,"byte_end":107509,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107769,"byte_end":107777,"line_start":379,"line_end":379,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"pub fn from_f64(f64) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert a `f64` to return an optional value of this type. If the\n type cannot be represented by this value, the `None` is returned.\n","sig":null,"attributes":[{"value":"/ Convert a `f64` to return an optional value of this type. If the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107605,"byte_end":107673,"line_start":376,"line_end":376,"column_start":5,"column_end":73}},{"value":"/ type cannot be represented by this value, the `None` is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107678,"byte_end":107747,"line_start":377,"line_end":377,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":107752,"byte_end":107761,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":339},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109744,"byte_end":109748,"line_start":439,"line_end":439,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"pub fn cast<T: NumCast, U: NumCast>(T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"/ Cast from one machine scalar to another.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109531,"byte_end":109575,"line_start":428,"line_end":428,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109576,"byte_end":109579,"line_start":429,"line_end":429,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109580,"byte_end":109594,"line_start":430,"line_end":430,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109595,"byte_end":109598,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109599,"byte_end":109606,"line_start":432,"line_end":432,"column_start":1,"column_end":8}},{"value":"/ # use num_traits as num;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109607,"byte_end":109635,"line_start":433,"line_end":433,"column_start":1,"column_end":29}},{"value":"/ let twenty: f32 = num::cast(0x14).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109636,"byte_end":109683,"line_start":434,"line_end":434,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(twenty, 20f32);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109684,"byte_end":109714,"line_start":435,"line_end":435,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109715,"byte_end":109722,"line_start":436,"line_end":436,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109723,"byte_end":109726,"line_start":437,"line_end":437,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109727,"byte_end":109736,"line_start":438,"line_end":438,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":342},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109882,"byte_end":109889,"line_start":444,"line_end":444,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[{"value":"/ An interface for casting between machine scalars.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109818,"byte_end":109871,"line_start":443,"line_end":443,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":110040,"byte_end":110044,"line_start":447,"line_end":447,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"pub fn from<T: ToPrimitive>(T) -> Option<Self>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait.\n","sig":null,"attributes":[{"value":"/ Creates a number from another value that can be converted into","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109917,"byte_end":109983,"line_start":445,"line_end":445,"column_start":5,"column_end":71}},{"value":"/ a primitive via the `ToPrimitive` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109988,"byte_end":110032,"line_start":446,"line_end":446,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":350},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112109,"byte_end":112120,"line_start":518,"line_end":518,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":352}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait AsPrimitive should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[{"value":"/ A generic interface for casting between machine scalars with the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":110997,"byte_end":111065,"line_start":483,"line_end":483,"column_start":1,"column_end":69}},{"value":"/ `as` operator, which admits narrowing and precision loss.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111066,"byte_end":111127,"line_start":484,"line_end":484,"column_start":1,"column_end":62}},{"value":"/ Implementers of this trait AsPrimitive should behave like a primitive","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111128,"byte_end":111201,"line_start":485,"line_end":485,"column_start":1,"column_end":74}},{"value":"/ numeric type (e.g. a newtype around another primitive), and the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111202,"byte_end":111269,"line_start":486,"line_end":486,"column_start":1,"column_end":68}},{"value":"/ intended conversion must never fail.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111270,"byte_end":111310,"line_start":487,"line_end":487,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111311,"byte_end":111314,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111315,"byte_end":111329,"line_start":489,"line_end":489,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111330,"byte_end":111333,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111334,"byte_end":111341,"line_start":491,"line_end":491,"column_start":1,"column_end":8}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111342,"byte_end":111376,"line_start":492,"line_end":492,"column_start":1,"column_end":35}},{"value":"/ let three: i32 = (3.14159265f32).as_();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111377,"byte_end":111420,"line_start":493,"line_end":493,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(three, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111421,"byte_end":111446,"line_start":494,"line_end":494,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111447,"byte_end":111454,"line_start":495,"line_end":495,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111455,"byte_end":111459,"line_start":496,"line_end":496,"column_start":1,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111460,"byte_end":111472,"line_start":497,"line_end":497,"column_start":1,"column_end":13}},{"value":"/ ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111473,"byte_end":111477,"line_start":498,"line_end":498,"column_start":1,"column_end":5}},{"value":"/ Currently, some uses of the `as` operator are not entirely safe.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111478,"byte_end":111546,"line_start":499,"line_end":499,"column_start":1,"column_end":69}},{"value":"/ In particular, it is undefined behavior if:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111547,"byte_end":111594,"line_start":500,"line_end":500,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111595,"byte_end":111599,"line_start":501,"line_end":501,"column_start":1,"column_end":5}},{"value":"/ - A truncated floating point value cannot fit in the target integer","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111600,"byte_end":111671,"line_start":502,"line_end":502,"column_start":1,"column_end":72}},{"value":"/   type ([#10184](https://github.com/rust-lang/rust/issues/10184));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111672,"byte_end":111742,"line_start":503,"line_end":503,"column_start":1,"column_end":71}},{"value":"/ ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111743,"byte_end":111747,"line_start":504,"line_end":504,"column_start":1,"column_end":5}},{"value":"/ ```ignore","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111748,"byte_end":111761,"line_start":505,"line_end":505,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111762,"byte_end":111796,"line_start":506,"line_end":506,"column_start":1,"column_end":35}},{"value":"/ let x: u8 = (1.04E+17).as_(); // UB","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111797,"byte_end":111836,"line_start":507,"line_end":507,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111837,"byte_end":111844,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111845,"byte_end":111849,"line_start":509,"line_end":509,"column_start":1,"column_end":5}},{"value":"/ - Or a floating point value does not fit in another floating","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111850,"byte_end":111914,"line_start":510,"line_end":510,"column_start":1,"column_end":65}},{"value":"/   point type ([#15536](https://github.com/rust-lang/rust/issues/15536)).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111915,"byte_end":111991,"line_start":511,"line_end":511,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111992,"byte_end":111995,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":111996,"byte_end":112009,"line_start":513,"line_end":513,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112010,"byte_end":112044,"line_start":514,"line_end":514,"column_start":1,"column_end":35}},{"value":"/ let x: f32 = (1e300f64).as_(); // UB","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112045,"byte_end":112085,"line_start":515,"line_end":515,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112086,"byte_end":112093,"line_start":516,"line_end":516,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112094,"byte_end":112098,"line_start":517,"line_end":517,"column_start":1,"column_end":5}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112238,"byte_end":112241,"line_start":523,"line_end":523,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"pub fn as_(Self) -> T","parent":{"krate":0,"index":350},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[{"value":"/ Convert a value to another, using the `as` operator.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112174,"byte_end":112230,"line_start":522,"line_end":522,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":355},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":1857},{"krate":0,"index":1874},{"krate":0,"index":1891},{"krate":0,"index":1908},{"krate":0,"index":1925},{"krate":0,"index":1942},{"krate":0,"index":1959},{"krate":0,"index":1976},{"krate":0,"index":1993},{"krate":0,"index":2010}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":369},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122650,"byte_end":122657,"line_start":8,"line_end":8,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123301,"byte_end":123311,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"pub fn count_ones(Self) -> u32","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the binary representation of `self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123046,"byte_end":123116,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123121,"byte_end":123124,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123129,"byte_end":123143,"line_start":28,"line_end":28,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123148,"byte_end":123151,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123156,"byte_end":123163,"line_start":30,"line_end":30,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123168,"byte_end":123196,"line_start":31,"line_end":31,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123201,"byte_end":123204,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123209,"byte_end":123234,"line_start":33,"line_end":33,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123239,"byte_end":123242,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_ones(), 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123247,"byte_end":123281,"line_start":35,"line_end":35,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123286,"byte_end":123293,"line_start":36,"line_end":36,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123588,"byte_end":123599,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"pub fn count_zeros(Self) -> u32","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the binary representation of `self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123331,"byte_end":123402,"line_start":39,"line_end":39,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123407,"byte_end":123410,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123415,"byte_end":123429,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123434,"byte_end":123437,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123442,"byte_end":123449,"line_start":43,"line_end":43,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123454,"byte_end":123482,"line_start":44,"line_end":44,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123487,"byte_end":123490,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123495,"byte_end":123520,"line_start":46,"line_end":46,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123525,"byte_end":123528,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_zeros(), 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123533,"byte_end":123568,"line_start":48,"line_end":48,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123573,"byte_end":123580,"line_start":49,"line_end":49,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123895,"byte_end":123908,"line_start":64,"line_end":64,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"pub fn leading_zeros(Self) -> u32","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the binary representation","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123619,"byte_end":123687,"line_start":52,"line_end":52,"column_start":5,"column_end":73}},{"value":"/ of `self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123692,"byte_end":123706,"line_start":53,"line_end":53,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123711,"byte_end":123714,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123719,"byte_end":123733,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123738,"byte_end":123741,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123746,"byte_end":123753,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123758,"byte_end":123786,"line_start":58,"line_end":58,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123791,"byte_end":123794,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123799,"byte_end":123824,"line_start":60,"line_end":60,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123829,"byte_end":123832,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.leading_zeros(), 10);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123837,"byte_end":123875,"line_start":62,"line_end":62,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123880,"byte_end":123887,"line_start":63,"line_end":63,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124205,"byte_end":124219,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"pub fn trailing_zeros(Self) -> u32","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeros in the binary representation","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123928,"byte_end":123997,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ of `self`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124002,"byte_end":124016,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124021,"byte_end":124024,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124029,"byte_end":124043,"line_start":69,"line_end":69,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124048,"byte_end":124051,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124056,"byte_end":124063,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124068,"byte_end":124096,"line_start":72,"line_end":72,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124101,"byte_end":124104,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124109,"byte_end":124134,"line_start":74,"line_end":74,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124139,"byte_end":124142,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.trailing_zeros(), 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124147,"byte_end":124185,"line_start":76,"line_end":76,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124190,"byte_end":124197,"line_start":77,"line_end":77,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124614,"byte_end":124625,"line_start":93,"line_end":93,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"pub fn rotate_left(Self, u32) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount amount, `n`, wrapping","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124239,"byte_end":124314,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/ the truncated bits to the end of the resulting integer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124319,"byte_end":124378,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124383,"byte_end":124386,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124391,"byte_end":124405,"line_start":83,"line_end":83,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124410,"byte_end":124413,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124418,"byte_end":124425,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124430,"byte_end":124458,"line_start":86,"line_end":86,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124463,"byte_end":124466,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124471,"byte_end":124505,"line_start":88,"line_end":88,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF012u64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124510,"byte_end":124544,"line_start":89,"line_end":89,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124549,"byte_end":124552,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_left(12), m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124557,"byte_end":124594,"line_start":91,"line_end":91,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124599,"byte_end":124606,"line_start":92,"line_end":92,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125037,"byte_end":125049,"line_start":108,"line_end":108,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"pub fn rotate_right(Self, u32) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount amount, `n`, wrapping","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124654,"byte_end":124730,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ the truncated bits to the beginning of the resulting integer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124735,"byte_end":124800,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124805,"byte_end":124808,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124813,"byte_end":124827,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124832,"byte_end":124835,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124840,"byte_end":124847,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124852,"byte_end":124880,"line_start":101,"line_end":101,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124885,"byte_end":124888,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124893,"byte_end":124927,"line_start":103,"line_end":103,"column_start":5,"column_end":39}},{"value":"/ let m = 0xDEF0123456789ABCu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124932,"byte_end":124966,"line_start":104,"line_end":104,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124971,"byte_end":124974,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_right(12), m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":124979,"byte_end":125017,"line_start":106,"line_end":106,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125022,"byte_end":125029,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125492,"byte_end":125502,"line_start":125,"line_end":125,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"pub fn signed_shl(Self, u32) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount amount, `n`, filling","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125078,"byte_end":125152,"line_start":110,"line_end":110,"column_start":5,"column_end":79}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125157,"byte_end":125197,"line_start":111,"line_end":111,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125202,"byte_end":125205,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shl`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125210,"byte_end":125257,"line_start":113,"line_end":113,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125262,"byte_end":125265,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125270,"byte_end":125284,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125289,"byte_end":125292,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125297,"byte_end":125304,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125309,"byte_end":125337,"line_start":118,"line_end":118,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125342,"byte_end":125345,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125350,"byte_end":125384,"line_start":120,"line_end":120,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000u64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125389,"byte_end":125423,"line_start":121,"line_end":121,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125428,"byte_end":125431,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shl(12), m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125436,"byte_end":125472,"line_start":123,"line_end":123,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125477,"byte_end":125484,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125978,"byte_end":125988,"line_start":142,"line_end":142,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"pub fn signed_shr(Self, u32) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount amount, `n`, copying","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125531,"byte_end":125606,"line_start":127,"line_end":127,"column_start":5,"column_end":80}},{"value":"/ the \"sign bit\" in the most significant bits even for unsigned types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125611,"byte_end":125683,"line_start":128,"line_end":128,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125688,"byte_end":125691,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shr`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125696,"byte_end":125743,"line_start":130,"line_end":130,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125748,"byte_end":125751,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125756,"byte_end":125770,"line_start":132,"line_end":132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125775,"byte_end":125778,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125783,"byte_end":125790,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125795,"byte_end":125823,"line_start":135,"line_end":135,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125828,"byte_end":125831,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ let n = 0xFEDCBA9876543210u64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125836,"byte_end":125870,"line_start":137,"line_end":137,"column_start":5,"column_end":39}},{"value":"/ let m = 0xFFFFEDCBA9876543u64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125875,"byte_end":125909,"line_start":138,"line_end":138,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125914,"byte_end":125917,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shr(12), m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125922,"byte_end":125958,"line_start":140,"line_end":140,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":125963,"byte_end":125970,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126435,"byte_end":126447,"line_start":159,"line_end":159,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"pub fn unsigned_shl(Self, u32) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount amount, `n`, filling","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126017,"byte_end":126091,"line_start":144,"line_end":144,"column_start":5,"column_end":79}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126096,"byte_end":126136,"line_start":145,"line_end":145,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126141,"byte_end":126144,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shl`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126149,"byte_end":126198,"line_start":147,"line_end":147,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126203,"byte_end":126206,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126211,"byte_end":126225,"line_start":149,"line_end":149,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126230,"byte_end":126233,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126238,"byte_end":126245,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126250,"byte_end":126278,"line_start":152,"line_end":152,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126283,"byte_end":126286,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFi64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126291,"byte_end":126325,"line_start":154,"line_end":154,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000i64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126330,"byte_end":126364,"line_start":155,"line_end":155,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126369,"byte_end":126372,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shl(12), m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126377,"byte_end":126415,"line_start":157,"line_end":157,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126420,"byte_end":126427,"line_start":158,"line_end":158,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126894,"byte_end":126906,"line_start":176,"line_end":176,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"pub fn unsigned_shr(Self, u32) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount amount, `n`, filling","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126476,"byte_end":126551,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ zeros in the most significant bits.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126556,"byte_end":126595,"line_start":162,"line_end":162,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126600,"byte_end":126603,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shr`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126608,"byte_end":126657,"line_start":164,"line_end":164,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126662,"byte_end":126665,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126670,"byte_end":126684,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126689,"byte_end":126692,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126697,"byte_end":126704,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126709,"byte_end":126737,"line_start":169,"line_end":169,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126742,"byte_end":126745,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let n = 0xFEDCBA9876543210i64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126750,"byte_end":126784,"line_start":171,"line_end":171,"column_start":5,"column_end":39}},{"value":"/ let m = 0x000FEDCBA9876543i64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126789,"byte_end":126823,"line_start":172,"line_end":172,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126828,"byte_end":126831,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shr(12), m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126836,"byte_end":126874,"line_start":174,"line_end":174,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126879,"byte_end":126886,"line_start":175,"line_end":175,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127211,"byte_end":127221,"line_start":190,"line_end":190,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"pub fn swap_bytes(Self) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[{"value":"/ Reverses the byte order of the integer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126935,"byte_end":126978,"line_start":178,"line_end":178,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126983,"byte_end":126986,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":126991,"byte_end":127005,"line_start":180,"line_end":180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127010,"byte_end":127013,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127018,"byte_end":127025,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127030,"byte_end":127058,"line_start":183,"line_end":183,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127063,"byte_end":127066,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127071,"byte_end":127105,"line_start":185,"line_end":185,"column_start":5,"column_end":39}},{"value":"/ let m = 0xEFCDAB8967452301u64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127110,"byte_end":127144,"line_start":186,"line_end":186,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127149,"byte_end":127152,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.swap_bytes(), m);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127157,"byte_end":127191,"line_start":188,"line_end":188,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127196,"byte_end":127203,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127717,"byte_end":127724,"line_start":209,"line_end":209,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"pub fn from_be(Self) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from big endian to the target's endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127242,"byte_end":127308,"line_start":192,"line_end":192,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127313,"byte_end":127316,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127321,"byte_end":127395,"line_start":194,"line_end":194,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127400,"byte_end":127403,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127408,"byte_end":127422,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127427,"byte_end":127430,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127435,"byte_end":127442,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127447,"byte_end":127475,"line_start":199,"line_end":199,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127480,"byte_end":127483,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127488,"byte_end":127522,"line_start":201,"line_end":201,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127527,"byte_end":127530,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127535,"byte_end":127571,"line_start":203,"line_end":203,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(u64::from_be(n), n)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127576,"byte_end":127614,"line_start":204,"line_end":204,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127619,"byte_end":127631,"line_start":205,"line_end":205,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_be(n), n.swap_bytes())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127636,"byte_end":127687,"line_start":206,"line_end":206,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127692,"byte_end":127697,"line_start":207,"line_end":207,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127702,"byte_end":127709,"line_start":208,"line_end":208,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128229,"byte_end":128236,"line_start":228,"line_end":228,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"pub fn from_le(Self) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from little endian to the target's endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127748,"byte_end":127817,"line_start":211,"line_end":211,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127822,"byte_end":127825,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127830,"byte_end":127904,"line_start":213,"line_end":213,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127909,"byte_end":127912,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127917,"byte_end":127931,"line_start":215,"line_end":215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127936,"byte_end":127939,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127944,"byte_end":127951,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127956,"byte_end":127984,"line_start":218,"line_end":218,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127989,"byte_end":127992,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":127997,"byte_end":128031,"line_start":220,"line_end":220,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128036,"byte_end":128039,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128044,"byte_end":128083,"line_start":222,"line_end":222,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(u64::from_le(n), n)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128088,"byte_end":128126,"line_start":223,"line_end":223,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128131,"byte_end":128143,"line_start":224,"line_end":224,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_le(n), n.swap_bytes())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128148,"byte_end":128199,"line_start":225,"line_end":225,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128204,"byte_end":128209,"line_start":226,"line_end":226,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128214,"byte_end":128221,"line_start":227,"line_end":227,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128719,"byte_end":128724,"line_start":247,"line_end":247,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"pub fn to_be(Self) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to big endian from the target's endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128260,"byte_end":128322,"line_start":230,"line_end":230,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128327,"byte_end":128330,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128335,"byte_end":128409,"line_start":232,"line_end":232,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128414,"byte_end":128417,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128422,"byte_end":128436,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128441,"byte_end":128444,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128449,"byte_end":128456,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128461,"byte_end":128489,"line_start":237,"line_end":237,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128494,"byte_end":128497,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128502,"byte_end":128536,"line_start":239,"line_end":239,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128541,"byte_end":128544,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128549,"byte_end":128585,"line_start":241,"line_end":241,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(n.to_be(), n)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128590,"byte_end":128622,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128627,"byte_end":128639,"line_start":243,"line_end":243,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_be(), n.swap_bytes())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128644,"byte_end":128689,"line_start":244,"line_end":244,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128694,"byte_end":128699,"line_start":245,"line_end":245,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128704,"byte_end":128711,"line_start":246,"line_end":246,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129210,"byte_end":129215,"line_start":266,"line_end":266,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"pub fn to_le(Self) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to little endian from the target's endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128745,"byte_end":128810,"line_start":249,"line_end":249,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128815,"byte_end":128818,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128823,"byte_end":128897,"line_start":251,"line_end":251,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128902,"byte_end":128905,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128910,"byte_end":128924,"line_start":253,"line_end":253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128929,"byte_end":128932,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128937,"byte_end":128944,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128949,"byte_end":128977,"line_start":256,"line_end":256,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128982,"byte_end":128985,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":128990,"byte_end":129024,"line_start":258,"line_end":258,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129029,"byte_end":129032,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129037,"byte_end":129076,"line_start":260,"line_end":260,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(n.to_le(), n)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129081,"byte_end":129113,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129118,"byte_end":129130,"line_start":262,"line_end":262,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_le(), n.swap_bytes())","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129135,"byte_end":129180,"line_start":263,"line_end":263,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129185,"byte_end":129190,"line_start":264,"line_end":264,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129195,"byte_end":129202,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129453,"byte_end":129456,"line_start":277,"line_end":277,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"pub fn pow(Self, u32) -> Self","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129236,"byte_end":129308,"line_start":268,"line_end":268,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129313,"byte_end":129316,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129321,"byte_end":129335,"line_start":270,"line_end":270,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129340,"byte_end":129343,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129348,"byte_end":129355,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129360,"byte_end":129388,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129393,"byte_end":129396,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2i32.pow(4), 16);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129401,"byte_end":129433,"line_start":275,"line_end":275,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":129438,"byte_end":129445,"line_start":276,"line_end":276,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":387},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":3256},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":2027},{"krate":0,"index":2030},{"krate":0,"index":2034},{"krate":0,"index":2038},{"krate":0,"index":2043},{"krate":0,"index":2046},{"krate":0,"index":2050},{"krate":0,"index":2054},{"krate":0,"index":2059},{"krate":0,"index":2062},{"krate":0,"index":2066},{"krate":0,"index":2070},{"krate":0,"index":2075},{"krate":0,"index":2078},{"krate":0,"index":2082},{"krate":0,"index":2086},{"krate":0,"index":2091},{"krate":0,"index":2094},{"krate":0,"index":2098},{"krate":0,"index":2102},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2114},{"krate":0,"index":2118},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":2130},{"krate":0,"index":2134},{"krate":0,"index":2139},{"krate":0,"index":2142},{"krate":0,"index":2146},{"krate":0,"index":2150},{"krate":0,"index":2155},{"krate":0,"index":2158},{"krate":0,"index":2162},{"krate":0,"index":2166},{"krate":0,"index":2171},{"krate":0,"index":2174},{"krate":0,"index":2178},{"krate":0,"index":2182},{"krate":0,"index":2187},{"krate":0,"index":2190},{"krate":0,"index":2194},{"krate":0,"index":2198},{"krate":0,"index":2203},{"krate":0,"index":2206},{"krate":0,"index":2210},{"krate":0,"index":2214},{"krate":0,"index":2219},{"krate":0,"index":2222},{"krate":0,"index":2226},{"krate":0,"index":2230},{"krate":0,"index":2235},{"krate":0,"index":2238},{"krate":0,"index":2242},{"krate":0,"index":2246},{"krate":0,"index":2251},{"krate":0,"index":2254},{"krate":0,"index":2258},{"krate":0,"index":2262},{"krate":0,"index":2267},{"krate":0,"index":2270},{"krate":0,"index":2274},{"krate":0,"index":2278},{"krate":0,"index":2283},{"krate":0,"index":2286},{"krate":0,"index":2290},{"krate":0,"index":2294},{"krate":0,"index":2299},{"krate":0,"index":2302},{"krate":0,"index":2306},{"krate":0,"index":2310},{"krate":0,"index":2315},{"krate":0,"index":2318},{"krate":0,"index":2322},{"krate":0,"index":2326},{"krate":0,"index":2331},{"krate":0,"index":2334},{"krate":0,"index":2338},{"krate":0,"index":2342},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2354},{"krate":0,"index":2358},{"krate":0,"index":2363},{"krate":0,"index":2366},{"krate":0,"index":2370},{"krate":0,"index":2374},{"krate":0,"index":2379},{"krate":0,"index":2382},{"krate":0,"index":2386},{"krate":0,"index":2390},{"krate":0,"index":2395},{"krate":0,"index":2398},{"krate":0,"index":2402},{"krate":0,"index":2406},{"krate":0,"index":2411},{"krate":0,"index":2414},{"krate":0,"index":2418},{"krate":0,"index":2422},{"krate":0,"index":2427},{"krate":0,"index":2430},{"krate":0,"index":2434},{"krate":0,"index":2438},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2450},{"krate":0,"index":2454},{"krate":0,"index":2459},{"krate":0,"index":2462},{"krate":0,"index":2466},{"krate":0,"index":2470},{"krate":0,"index":2475},{"krate":0,"index":2478},{"krate":0,"index":2482},{"krate":0,"index":2486},{"krate":0,"index":2491},{"krate":0,"index":2494},{"krate":0,"index":2498},{"krate":0,"index":2502},{"krate":0,"index":2507},{"krate":0,"index":2510},{"krate":0,"index":2514},{"krate":0,"index":2518},{"krate":0,"index":2523},{"krate":0,"index":2526},{"krate":0,"index":2530},{"krate":0,"index":2534},{"krate":0,"index":2539},{"krate":0,"index":2542},{"krate":0,"index":2546},{"krate":0,"index":2550},{"krate":0,"index":2555},{"krate":0,"index":2558},{"krate":0,"index":2562},{"krate":0,"index":2566},{"krate":0,"index":2571},{"krate":0,"index":2574},{"krate":0,"index":2578},{"krate":0,"index":2582},{"krate":0,"index":2587},{"krate":0,"index":2590},{"krate":0,"index":2594},{"krate":0,"index":2598},{"krate":0,"index":2603},{"krate":0,"index":2606},{"krate":0,"index":2610},{"krate":0,"index":2614},{"krate":0,"index":2619},{"krate":0,"index":2622},{"krate":0,"index":2626},{"krate":0,"index":2630},{"krate":0,"index":2635},{"krate":0,"index":2638},{"krate":0,"index":2642},{"krate":0,"index":2646},{"krate":0,"index":2651},{"krate":0,"index":2654},{"krate":0,"index":2658},{"krate":0,"index":2662},{"krate":0,"index":2667},{"krate":0,"index":2670},{"krate":0,"index":2674},{"krate":0,"index":2678},{"krate":0,"index":2683},{"krate":0,"index":2686},{"krate":0,"index":2690},{"krate":0,"index":2694},{"krate":0,"index":2699},{"krate":0,"index":2702},{"krate":0,"index":2706},{"krate":0,"index":2710},{"krate":0,"index":2715},{"krate":0,"index":2718},{"krate":0,"index":2722},{"krate":0,"index":2726},{"krate":0,"index":2731},{"krate":0,"index":2734},{"krate":0,"index":2738},{"krate":0,"index":2742},{"krate":0,"index":2747},{"krate":0,"index":2750},{"krate":0,"index":2754},{"krate":0,"index":2758},{"krate":0,"index":2763},{"krate":0,"index":2766},{"krate":0,"index":2770},{"krate":0,"index":2774},{"krate":0,"index":2779},{"krate":0,"index":2782},{"krate":0,"index":2786},{"krate":0,"index":2790},{"krate":0,"index":2795},{"krate":0,"index":2798},{"krate":0,"index":2802},{"krate":0,"index":2806},{"krate":0,"index":2811},{"krate":0,"index":2814},{"krate":0,"index":2818},{"krate":0,"index":2822},{"krate":0,"index":2827},{"krate":0,"index":2830},{"krate":0,"index":2834},{"krate":0,"index":2838},{"krate":0,"index":2843},{"krate":0,"index":2846},{"krate":0,"index":2850},{"krate":0,"index":2854},{"krate":0,"index":2859},{"krate":0,"index":2862},{"krate":0,"index":2866},{"krate":0,"index":2870},{"krate":0,"index":2875},{"krate":0,"index":2878},{"krate":0,"index":2882},{"krate":0,"index":2886},{"krate":0,"index":2891},{"krate":0,"index":2894},{"krate":0,"index":2898},{"krate":0,"index":2902},{"krate":0,"index":2907},{"krate":0,"index":2910},{"krate":0,"index":2914},{"krate":0,"index":2918},{"krate":0,"index":2923},{"krate":0,"index":2926},{"krate":0,"index":2930},{"krate":0,"index":2934},{"krate":0,"index":2939},{"krate":0,"index":2942},{"krate":0,"index":2946},{"krate":0,"index":2950},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2962},{"krate":0,"index":2966},{"krate":0,"index":2971},{"krate":0,"index":2974},{"krate":0,"index":2978},{"krate":0,"index":2982},{"krate":0,"index":398},{"krate":0,"index":400}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":393},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132065,"byte_end":132068,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[{"value":"/ Binary operator for raising a value to a power.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132003,"byte_end":132054,"line_start":5,"line_end":5,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":395},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132133,"byte_end":132139,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132080,"byte_end":132123,"line_start":7,"line_end":7,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132328,"byte_end":132331,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"pub fn pow(Self, RHS) -> Self::Output","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[{"value":"/ Returns `self` to the power `rhs`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132146,"byte_end":132184,"line_start":10,"line_end":10,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132189,"byte_end":132192,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132197,"byte_end":132211,"line_start":12,"line_end":12,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132216,"byte_end":132219,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132224,"byte_end":132231,"line_start":14,"line_end":14,"column_start":5,"column_end":12}},{"value":"/ use num_traits::Pow;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132236,"byte_end":132260,"line_start":15,"line_end":15,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Pow::pow(10u32, 2u32), 100);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132265,"byte_end":132308,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":132313,"byte_end":132320,"line_start":17,"line_end":17,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":398},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136321,"byte_end":136324,"line_start":162,"line_end":162,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"pub fn pow<T: Clone + One + Mul<T, Output = T>>(T, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, using exponentiation by squaring.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136092,"byte_end":136165,"line_start":151,"line_end":151,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136166,"byte_end":136169,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136170,"byte_end":136183,"line_start":153,"line_end":153,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136184,"byte_end":136187,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136188,"byte_end":136199,"line_start":155,"line_end":155,"column_start":1,"column_end":12}},{"value":"/ use num_traits::pow;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136200,"byte_end":136224,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136225,"byte_end":136228,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pow(2i8, 4), 16);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136229,"byte_end":136261,"line_start":158,"line_end":158,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(pow(6u8, 3), 216);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136262,"byte_end":136295,"line_start":159,"line_end":159,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136296,"byte_end":136303,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136304,"byte_end":136313,"line_start":161,"line_end":161,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":400},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":137121,"byte_end":137132,"line_start":196,"line_end":196,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"pub fn checked_pow<T: Clone + One + CheckedMul>(T, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, returning `None` if an overflow occurred.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136752,"byte_end":136833,"line_start":182,"line_end":182,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136834,"byte_end":136837,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ Otherwise same as the `pow` function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136838,"byte_end":136879,"line_start":184,"line_end":184,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136880,"byte_end":136883,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136884,"byte_end":136897,"line_start":186,"line_end":186,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136898,"byte_end":136901,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136902,"byte_end":136913,"line_start":188,"line_end":188,"column_start":1,"column_end":12}},{"value":"/ use num_traits::checked_pow;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136914,"byte_end":136946,"line_start":189,"line_end":189,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136947,"byte_end":136950,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(checked_pow(2i8, 4), Some(16));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136951,"byte_end":136997,"line_start":191,"line_end":191,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(checked_pow(7i8, 8), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":136998,"byte_end":137040,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(checked_pow(7u32, 8), Some(5_764_801));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":137041,"byte_end":137095,"line_start":193,"line_end":193,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":137096,"byte_end":137103,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/pow.rs","byte_start":137104,"byte_end":137113,"line_start":195,"line_end":195,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":403},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1914,"byte_end":1917,"line_start":61,"line_end":61,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[{"value":"/ The base trait for numeric types, covering `0` and `1` values,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1771,"byte_end":1837,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/ comparisons, basic numeric operations, and string conversion.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1838,"byte_end":1903,"line_start":60,"line_end":60,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":404},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1962,"byte_end":1977,"line_start":63,"line_end":63,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2335,"byte_end":2349,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"pub fn from_str_radix(&str, u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[{"value":"/ Convert from a string and radix <= 36.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1984,"byte_end":2026,"line_start":65,"line_end":65,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2031,"byte_end":2034,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2039,"byte_end":2053,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2058,"byte_end":2061,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2066,"byte_end":2077,"line_start":69,"line_end":69,"column_start":5,"column_end":16}},{"value":"/ use num_traits::Num;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2082,"byte_end":2106,"line_start":70,"line_end":70,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2111,"byte_end":2114,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"27\", 10);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2119,"byte_end":2175,"line_start":72,"line_end":72,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(result, Ok(27));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2180,"byte_end":2211,"line_start":73,"line_end":73,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2216,"byte_end":2219,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"foo\", 10);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2224,"byte_end":2281,"line_start":75,"line_end":75,"column_start":5,"column_end":62}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2286,"byte_end":2315,"line_start":76,"line_end":76,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2320,"byte_end":2327,"line_start":77,"line_end":77,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":406},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2571,"byte_end":2577,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[{"value":"/ The trait for types implementing basic numeric operations","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2416,"byte_end":2477,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2478,"byte_end":2481,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2482,"byte_end":2560,"line_start":83,"line_end":83,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":413},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3202,"byte_end":3208,"line_start":104,"line_end":104,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement numeric operations taking","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2995,"byte_end":3071,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ the second operand by reference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3072,"byte_end":3108,"line_start":101,"line_end":101,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3109,"byte_end":3112,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3113,"byte_end":3191,"line_start":103,"line_end":103,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":418},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3527,"byte_end":3533,"line_start":111,"line_end":111,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[{"value":"/ The trait for references which implement numeric operations, taking the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3306,"byte_end":3381,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ second operand either by value or by reference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3382,"byte_end":3433,"line_start":108,"line_end":108,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3434,"byte_end":3437,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3438,"byte_end":3516,"line_start":110,"line_end":110,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":425},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3866,"byte_end":3878,"line_start":117,"line_end":117,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[{"value":"/ The trait for types implementing numeric assignment operators (like `+=`).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3694,"byte_end":3772,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3773,"byte_end":3776,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3777,"byte_end":3855,"line_start":116,"line_end":116,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":430},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4327,"byte_end":4336,"line_start":136,"line_end":136,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement assignment operators.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4161,"byte_end":4233,"line_start":133,"line_end":133,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4234,"byte_end":4237,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4238,"byte_end":4316,"line_start":135,"line_end":135,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":433},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4632,"byte_end":4644,"line_start":143,"line_end":143,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `NumAssign` types which also implement assignment operations","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4416,"byte_end":4494,"line_start":139,"line_end":139,"column_start":1,"column_end":79}},{"value":"/ taking the second operand by reference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4495,"byte_end":4538,"line_start":140,"line_end":140,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4539,"byte_end":4542,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4543,"byte_end":4621,"line_start":142,"line_end":142,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3018},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5700,"byte_end":5705,"line_start":176,"line_end":176,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":3017},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3020},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5711,"byte_end":5718,"line_start":177,"line_end":177,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":3017},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3017},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5679,"byte_end":5693,"line_start":175,"line_end":175,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"pub enum FloatErrorKind { Empty, Invalid, }","parent":null,"children":[{"krate":0,"index":3018},{"krate":0,"index":3020}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3024},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5876,"byte_end":5891,"line_start":182,"line_end":182,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":3025}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3025},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5902,"byte_end":5906,"line_start":183,"line_end":183,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":3024},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":446},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":13957,"byte_end":13962,"line_start":364,"line_end":364,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"pub fn clamp<T: PartialOrd>(T, T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"/ A value bounded by a minimum and a maximum","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":13743,"byte_end":13789,"line_start":358,"line_end":358,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":13790,"byte_end":13793,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":13794,"byte_end":13847,"line_start":360,"line_end":360,"column_start":1,"column_end":54}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":13848,"byte_end":13904,"line_start":361,"line_end":361,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":13905,"byte_end":13939,"line_start":362,"line_end":362,"column_start":1,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":13940,"byte_end":13949,"line_start":363,"line_end":363,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18906,"byte_end":18914,"line_start":54,"line_end":54,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20538,"byte_end":20546,"line_start":118,"line_end":118,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":23880,"byte_end":23888,"line_start":77,"line_end":77,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":27049,"byte_end":27057,"line_start":187,"line_end":187,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":37461,"byte_end":37469,"line_start":81,"line_end":81,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":37656,"byte_end":37664,"line_start":86,"line_end":86,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":37851,"byte_end":37859,"line_start":91,"line_end":91,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":41078,"byte_end":41086,"line_start":39,"line_end":39,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109198,"byte_end":109206,"line_start":418,"line_end":418,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109367,"byte_end":109375,"line_start":422,"line_end":422,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":110889,"byte_end":110897,"line_start":477,"line_end":477,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2814,"byte_end":2815,"line_start":92,"line_end":92,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3263,"byte_end":3264,"line_start":105,"line_end":105,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3627,"byte_end":3628,"line_start":112,"line_end":112,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4035,"byte_end":4036,"line_start":125,"line_end":125,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4382,"byte_end":4383,"line_start":137,"line_end":137,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4717,"byte_end":4718,"line_start":144,"line_end":144,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5265,"byte_end":5273,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5949,"byte_end":5964,"line_start":186,"line_end":186,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1622,"byte_end":1632,"line_start":48,"line_end":48,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":58}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1642,"byte_end":1646,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":82}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1656,"byte_end":1659,"line_start":50,"line_end":50,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":112}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/mod.rs","byte_start":27520,"byte_end":27530,"line_start":1,"line_end":1,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":113}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/mod.rs","byte_start":27540,"byte_end":27547,"line_start":2,"line_end":2,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":118}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/mod.rs","byte_start":27557,"byte_end":27565,"line_start":3,"line_end":3,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":140}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/mod.rs","byte_start":27575,"byte_end":27578,"line_start":4,"line_end":4,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":162}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1669,"byte_end":1675,"line_start":51,"line_end":51,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":180}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1685,"byte_end":1690,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":208}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1738,"byte_end":1742,"line_start":55,"line_end":55,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":265}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1752,"byte_end":1755,"line_start":56,"line_end":56,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":355}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1765,"byte_end":1768,"line_start":57,"line_end":57,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":387}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17705,"byte_end":17710,"line_start":5,"line_end":5,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":63}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":17713,"byte_end":17716,"line_start":5,"line_end":5,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2099},"to":{"krate":0,"index":63}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":18906,"byte_end":18914,"line_start":54,"line_end":54,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":63}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19161,"byte_end":19166,"line_start":65,"line_end":65,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":71}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":19169,"byte_end":19172,"line_start":65,"line_end":65,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":2109},"to":{"krate":0,"index":71}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/identities.rs","byte_start":20538,"byte_end":20546,"line_start":118,"line_end":118,"column_start":22,"column_end":30},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":71}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21830,"byte_end":21835,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":87}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21838,"byte_end":21841,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":87}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":21844,"byte_end":21847,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2126},"to":{"krate":0,"index":87}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":23880,"byte_end":23888,"line_start":77,"line_end":77,"column_start":28,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":87}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":26844,"byte_end":26847,"line_start":177,"line_end":177,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":108}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/sign.rs","byte_start":27049,"byte_end":27057,"line_start":187,"line_end":187,"column_start":32,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":108}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28605,"byte_end":28610,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":126}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":28613,"byte_end":28616,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2099},"to":{"krate":0,"index":126}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":29617,"byte_end":29622,"line_start":35,"line_end":35,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":129}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":29625,"byte_end":29628,"line_start":35,"line_end":35,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2104},"to":{"krate":0,"index":129}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30392,"byte_end":30397,"line_start":55,"line_end":55,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":30400,"byte_end":30403,"line_start":55,"line_end":55,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2109},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31232,"byte_end":31237,"line_start":75,"line_end":75,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":133}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31240,"byte_end":31243,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2114},"to":{"krate":0,"index":133}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":31992,"byte_end":31997,"line_start":94,"line_end":94,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":135}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":32000,"byte_end":32003,"line_start":94,"line_end":94,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2170},"to":{"krate":0,"index":135}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33430,"byte_end":33435,"line_start":135,"line_end":135,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":138}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/checked.rs","byte_start":33438,"byte_end":33441,"line_start":135,"line_end":135,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2176},"to":{"krate":0,"index":138}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35152,"byte_end":35157,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35160,"byte_end":35163,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2099},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35912,"byte_end":35917,"line_start":43,"line_end":43,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":149}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":35920,"byte_end":35923,"line_start":43,"line_end":43,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2104},"to":{"krate":0,"index":149}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36678,"byte_end":36683,"line_start":62,"line_end":62,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":151}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":36686,"byte_end":36689,"line_start":62,"line_end":62,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2109},"to":{"krate":0,"index":151}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":37461,"byte_end":37469,"line_start":81,"line_end":81,"column_start":38,"column_end":46},"kind":{"Impl":{"id":140}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":37656,"byte_end":37664,"line_start":86,"line_end":86,"column_start":38,"column_end":46},"kind":{"Impl":{"id":141}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":149}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/ops/wrapping.rs","byte_start":37851,"byte_end":37859,"line_start":91,"line_end":91,"column_start":38,"column_end":46},"kind":{"Impl":{"id":142}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":151}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/bounds.rs","byte_start":41078,"byte_end":41086,"line_start":39,"line_end":39,"column_start":30,"column_end":38},"kind":{"Impl":{"id":155}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":197}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42871,"byte_end":42874,"line_start":13,"line_end":13,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":218}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42877,"byte_end":42884,"line_start":13,"line_end":13,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":342},"to":{"krate":0,"index":218}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42887,"byte_end":42890,"line_start":13,"line_end":13,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2126},"to":{"krate":0,"index":218}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42908,"byte_end":42918,"line_start":13,"line_end":13,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":1797},"to":{"krate":0,"index":218}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/float.rs","byte_start":42921,"byte_end":42925,"line_start":13,"line_end":13,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":2044},"to":{"krate":0,"index":218}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":104931,"byte_end":104936,"line_start":304,"line_end":304,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":317}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109198,"byte_end":109206,"line_start":418,"line_end":418,"column_start":38,"column_end":46},"kind":{"Impl":{"id":172}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":284}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109367,"byte_end":109375,"line_start":422,"line_end":422,"column_start":42,"column_end":50},"kind":{"Impl":{"id":173}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":317}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109891,"byte_end":109896,"line_start":444,"line_end":444,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":342}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":109899,"byte_end":109910,"line_start":444,"line_end":444,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":284},"to":{"krate":0,"index":342}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":110889,"byte_end":110897,"line_start":477,"line_end":477,"column_start":30,"column_end":38},"kind":{"Impl":{"id":186}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":342}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/cast.rs","byte_start":112135,"byte_end":112139,"line_start":518,"line_end":518,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2044},"to":{"krate":0,"index":350}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122664,"byte_end":122669,"line_start":9,"line_end":9,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122676,"byte_end":122680,"line_start":10,"line_end":10,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2044},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122687,"byte_end":122690,"line_start":11,"line_end":11,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122693,"byte_end":122700,"line_start":11,"line_end":11,"column_start":13,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":342},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122707,"byte_end":122714,"line_start":12,"line_end":12,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":197},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122721,"byte_end":122731,"line_start":13,"line_end":13,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1797},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122734,"byte_end":122737,"line_start":13,"line_end":13,"column_start":20,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":1786},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122740,"byte_end":122742,"line_start":13,"line_end":13,"column_start":26,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1765},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122749,"byte_end":122752,"line_start":14,"line_end":14,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2151},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122772,"byte_end":122778,"line_start":15,"line_end":15,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2155},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122798,"byte_end":122803,"line_start":16,"line_end":16,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2160},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122823,"byte_end":122829,"line_start":17,"line_end":17,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2165},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122849,"byte_end":122852,"line_start":18,"line_end":18,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2170},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122879,"byte_end":122882,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2176},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122909,"byte_end":122919,"line_start":20,"line_end":20,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":126},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122939,"byte_end":122949,"line_start":21,"line_end":21,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":129},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122969,"byte_end":122979,"line_start":22,"line_end":22,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":131},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":122999,"byte_end":123009,"line_start":23,"line_end":23,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":133},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/int.rs","byte_start":123029,"byte_end":123039,"line_start":24,"line_end":24,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":114},"to":{"krate":0,"index":369}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1919,"byte_end":1928,"line_start":61,"line_end":61,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1760},"to":{"krate":0,"index":403}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1931,"byte_end":1935,"line_start":61,"line_end":61,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":63},"to":{"krate":0,"index":403}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1938,"byte_end":1941,"line_start":61,"line_end":61,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":71},"to":{"krate":0,"index":403}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":1944,"byte_end":1950,"line_start":61,"line_end":61,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":406},"to":{"krate":0,"index":403}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2611,"byte_end":2614,"line_start":85,"line_end":85,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2099},"to":{"krate":0,"index":406}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2643,"byte_end":2646,"line_start":86,"line_end":86,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2104},"to":{"krate":0,"index":406}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2675,"byte_end":2678,"line_start":87,"line_end":87,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2109},"to":{"krate":0,"index":406}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2707,"byte_end":2710,"line_start":88,"line_end":88,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2114},"to":{"krate":0,"index":406}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2739,"byte_end":2742,"line_start":89,"line_end":89,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2120},"to":{"krate":0,"index":406}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":2814,"byte_end":2815,"line_start":92,"line_end":92,"column_start":46,"column_end":47},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":410},"to":{"krate":0,"index":406}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3210,"byte_end":3213,"line_start":104,"line_end":104,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":413}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3224,"byte_end":3230,"line_start":104,"line_end":104,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":406},"to":{"krate":0,"index":413}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3263,"byte_end":3264,"line_start":105,"line_end":105,"column_start":20,"column_end":21},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":416},"to":{"krate":0,"index":413}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3541,"byte_end":3547,"line_start":111,"line_end":111,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":406},"to":{"krate":0,"index":418}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3570,"byte_end":3576,"line_start":111,"line_end":111,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":406},"to":{"krate":0,"index":418}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3627,"byte_end":3628,"line_start":112,"line_end":112,"column_start":32,"column_end":33},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":422},"to":{"krate":0,"index":418}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3897,"byte_end":3906,"line_start":118,"line_end":118,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2130},"to":{"krate":0,"index":425}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3918,"byte_end":3927,"line_start":119,"line_end":119,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2134},"to":{"krate":0,"index":425}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3939,"byte_end":3948,"line_start":120,"line_end":120,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2138},"to":{"krate":0,"index":425}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3960,"byte_end":3969,"line_start":121,"line_end":121,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2142},"to":{"krate":0,"index":425}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":3981,"byte_end":3990,"line_start":122,"line_end":122,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2146},"to":{"krate":0,"index":425}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4035,"byte_end":4036,"line_start":125,"line_end":125,"column_start":36,"column_end":37},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":428},"to":{"krate":0,"index":425}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4338,"byte_end":4341,"line_start":136,"line_end":136,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":403},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4344,"byte_end":4356,"line_start":136,"line_end":136,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":425},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4382,"byte_end":4383,"line_start":137,"line_end":137,"column_start":23,"column_end":24},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":432},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4646,"byte_end":4655,"line_start":143,"line_end":143,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":430},"to":{"krate":0,"index":433}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4666,"byte_end":4678,"line_start":143,"line_end":143,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":425},"to":{"krate":0,"index":433}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":4717,"byte_end":4718,"line_start":144,"line_end":144,"column_start":26,"column_end":27},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":436},"to":{"krate":0,"index":433}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5265,"byte_end":5273,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"kind":{"Impl":{"id":499}},"from":{"krate":1,"index":14052},"to":{"krate":0,"index":403}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.2/src/lib.rs","byte_start":5949,"byte_end":5964,"line_start":186,"line_end":186,"column_start":23,"column_end":38},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":3024},"to":{"krate":1,"index":6560}}]}