{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2","program":"/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","byteorder","/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=bc9970f9238f86e1","-C","extra-filename=-bc9970f9238f86e1","--out-dir","/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","-L","dependency=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libbyteorder-bc9970f9238f86e1.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[2273452714677096099,13008791525014639813]},"crate_root":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src","external_crates":[{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}}],"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":0,"byte_end":100024,"line_start":1,"line_end":3198,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":2584,"byte_end":2596,"line_start":79,"line_end":79,"column_start":14,"column_end":26},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":2598,"byte_end":2611,"line_start":79,"line_end":79,"column_start":28,"column_end":41},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":0,"byte_end":100024,"line_start":1,"line_end":3198,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":281},{"krate":0,"index":5},{"krate":0,"index":283},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":131},{"krate":0,"index":237},{"krate":0,"index":254},{"krate":0,"index":253},{"krate":0,"index":251},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":245},{"krate":0,"index":243},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":238},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":256},{"krate":0,"index":273},{"krate":0,"index":272},{"krate":0,"index":270},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":264},{"krate":0,"index":262},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":257},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":193},{"krate":0,"index":215}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n*/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":0,"byte_end":2169,"line_start":1,"line_end":62,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":2171,"byte_end":2193,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100905,"byte_end":100917,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Read`] with methods for reading numbers. (For `std::io`.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100088,"byte_end":100159,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100160,"byte_end":100163,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100164,"byte_end":100242,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100243,"byte_end":100321,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100322,"byte_end":100392,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100393,"byte_end":100396,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100397,"byte_end":100411,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100412,"byte_end":100415,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a [`Read`]:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100416,"byte_end":100477,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100478,"byte_end":100481,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100482,"byte_end":100493,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100494,"byte_end":100518,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100519,"byte_end":100564,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100565,"byte_end":100568,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100569,"byte_end":100617,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100618,"byte_end":100676,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100677,"byte_end":100735,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100736,"byte_end":100743,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100744,"byte_end":100747,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100748,"byte_end":100786,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100787,"byte_end":100831,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100832,"byte_end":100894,"line_start":27,"line_end":27,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101712,"byte_end":101719,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100934,"byte_end":100997,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101002,"byte_end":101005,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101010,"byte_end":101081,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101086,"byte_end":101132,"line_start":32,"line_end":32,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101137,"byte_end":101140,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101145,"byte_end":101157,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101162,"byte_end":101165,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101170,"byte_end":101234,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101239,"byte_end":101242,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101247,"byte_end":101339,"line_start":38,"line_end":38,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101344,"byte_end":101347,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101352,"byte_end":101366,"line_start":40,"line_end":40,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101371,"byte_end":101374,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101379,"byte_end":101426,"line_start":42,"line_end":42,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101431,"byte_end":101434,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101439,"byte_end":101450,"line_start":44,"line_end":44,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101455,"byte_end":101479,"line_start":45,"line_end":45,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101484,"byte_end":101529,"line_start":46,"line_end":46,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101534,"byte_end":101537,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101542,"byte_end":101584,"line_start":48,"line_end":48,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(2, rdr.read_u8().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101589,"byte_end":101631,"line_start":49,"line_end":49,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(5, rdr.read_u8().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101636,"byte_end":101678,"line_start":50,"line_end":50,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101683,"byte_end":101690,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101695,"byte_end":101704,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102630,"byte_end":102637,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101848,"byte_end":101908,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101913,"byte_end":101916,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101921,"byte_end":101992,"line_start":61,"line_end":61,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":101997,"byte_end":102043,"line_start":62,"line_end":62,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102048,"byte_end":102051,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102056,"byte_end":102068,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102073,"byte_end":102076,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102081,"byte_end":102145,"line_start":66,"line_end":66,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102150,"byte_end":102153,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102158,"byte_end":102250,"line_start":68,"line_end":68,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102255,"byte_end":102258,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102263,"byte_end":102277,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102282,"byte_end":102285,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102290,"byte_end":102337,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102342,"byte_end":102345,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102350,"byte_end":102361,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102366,"byte_end":102390,"line_start":75,"line_end":75,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102395,"byte_end":102440,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102445,"byte_end":102448,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x02, 0xfb]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102453,"byte_end":102501,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(2, rdr.read_i8().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102506,"byte_end":102548,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(-5, rdr.read_i8().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102553,"byte_end":102596,"line_start":80,"line_end":80,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102601,"byte_end":102608,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102613,"byte_end":102622,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103466,"byte_end":103474,"line_start":110,"line_end":110,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102772,"byte_end":102836,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102841,"byte_end":102844,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102849,"byte_end":102861,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102866,"byte_end":102869,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102874,"byte_end":102938,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102943,"byte_end":102946,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":102951,"byte_end":103043,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103048,"byte_end":103051,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103056,"byte_end":103070,"line_start":97,"line_end":97,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103075,"byte_end":103078,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103083,"byte_end":103142,"line_start":99,"line_end":99,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103147,"byte_end":103150,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103155,"byte_end":103166,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103171,"byte_end":103195,"line_start":102,"line_end":102,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103200,"byte_end":103245,"line_start":103,"line_end":103,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103250,"byte_end":103253,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103258,"byte_end":103306,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103311,"byte_end":103369,"line_start":106,"line_end":106,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103374,"byte_end":103432,"line_start":107,"line_end":107,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103437,"byte_end":103444,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103449,"byte_end":103458,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104331,"byte_end":104339,"line_start":137,"line_end":137,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103629,"byte_end":103690,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103695,"byte_end":103698,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103703,"byte_end":103715,"line_start":118,"line_end":118,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103720,"byte_end":103723,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103728,"byte_end":103792,"line_start":120,"line_end":120,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103797,"byte_end":103800,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103805,"byte_end":103897,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103902,"byte_end":103905,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103910,"byte_end":103924,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103929,"byte_end":103932,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Read signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103937,"byte_end":103994,"line_start":126,"line_end":126,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":103999,"byte_end":104002,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104007,"byte_end":104018,"line_start":128,"line_end":128,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104023,"byte_end":104047,"line_start":129,"line_end":129,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104052,"byte_end":104097,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104102,"byte_end":104105,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104110,"byte_end":104170,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104175,"byte_end":104233,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104238,"byte_end":104297,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104302,"byte_end":104309,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104314,"byte_end":104323,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105131,"byte_end":105139,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"pub fn read_u24<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104494,"byte_end":104558,"line_start":143,"line_end":143,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104563,"byte_end":104566,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104571,"byte_end":104583,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104588,"byte_end":104591,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104596,"byte_end":104660,"line_start":147,"line_end":147,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104665,"byte_end":104668,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104673,"byte_end":104765,"line_start":149,"line_end":149,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104770,"byte_end":104773,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104778,"byte_end":104792,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104797,"byte_end":104800,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 24 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104805,"byte_end":104864,"line_start":153,"line_end":153,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104869,"byte_end":104872,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104877,"byte_end":104888,"line_start":155,"line_end":155,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104893,"byte_end":104917,"line_start":156,"line_end":156,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104922,"byte_end":104967,"line_start":157,"line_end":157,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104972,"byte_end":104975,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":104980,"byte_end":105034,"line_start":159,"line_end":159,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105039,"byte_end":105097,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105102,"byte_end":105109,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105114,"byte_end":105123,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105929,"byte_end":105937,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"pub fn read_i24<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105294,"byte_end":105355,"line_start":169,"line_end":169,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105360,"byte_end":105363,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105368,"byte_end":105380,"line_start":171,"line_end":171,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105385,"byte_end":105388,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105393,"byte_end":105457,"line_start":173,"line_end":173,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105462,"byte_end":105465,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105470,"byte_end":105562,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105567,"byte_end":105570,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105575,"byte_end":105589,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105594,"byte_end":105597,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Read signed 24 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105602,"byte_end":105659,"line_start":179,"line_end":179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105664,"byte_end":105667,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105672,"byte_end":105683,"line_start":181,"line_end":181,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105688,"byte_end":105712,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105717,"byte_end":105762,"line_start":183,"line_end":183,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105767,"byte_end":105770,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105775,"byte_end":105829,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105834,"byte_end":105895,"line_start":186,"line_end":186,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105900,"byte_end":105907,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":105912,"byte_end":105921,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106735,"byte_end":106743,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106092,"byte_end":106156,"line_start":195,"line_end":195,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106161,"byte_end":106164,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106169,"byte_end":106181,"line_start":197,"line_end":197,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106186,"byte_end":106189,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106194,"byte_end":106258,"line_start":199,"line_end":199,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106263,"byte_end":106266,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106271,"byte_end":106363,"line_start":201,"line_end":201,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106368,"byte_end":106371,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106376,"byte_end":106390,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106395,"byte_end":106398,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106403,"byte_end":106462,"line_start":205,"line_end":205,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106467,"byte_end":106470,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106475,"byte_end":106486,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106491,"byte_end":106515,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106520,"byte_end":106565,"line_start":209,"line_end":209,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106570,"byte_end":106573,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106578,"byte_end":106638,"line_start":211,"line_end":211,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106643,"byte_end":106701,"line_start":212,"line_end":212,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106706,"byte_end":106713,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106718,"byte_end":106727,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107539,"byte_end":107547,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106898,"byte_end":106959,"line_start":221,"line_end":221,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106964,"byte_end":106967,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106972,"byte_end":106984,"line_start":223,"line_end":223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106989,"byte_end":106992,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":106997,"byte_end":107061,"line_start":225,"line_end":225,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107066,"byte_end":107069,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107074,"byte_end":107166,"line_start":227,"line_end":227,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107171,"byte_end":107174,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107179,"byte_end":107193,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107198,"byte_end":107201,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Read signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107206,"byte_end":107263,"line_start":231,"line_end":231,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107268,"byte_end":107271,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107276,"byte_end":107287,"line_start":233,"line_end":233,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107292,"byte_end":107316,"line_start":234,"line_end":234,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107321,"byte_end":107366,"line_start":235,"line_end":235,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107371,"byte_end":107374,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107379,"byte_end":107439,"line_start":237,"line_end":237,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107444,"byte_end":107505,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107510,"byte_end":107517,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107522,"byte_end":107531,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108383,"byte_end":108391,"line_start":267,"line_end":267,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107702,"byte_end":107766,"line_start":247,"line_end":247,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107771,"byte_end":107774,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107779,"byte_end":107791,"line_start":249,"line_end":249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107796,"byte_end":107799,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107804,"byte_end":107868,"line_start":251,"line_end":251,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107873,"byte_end":107876,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107881,"byte_end":107973,"line_start":253,"line_end":253,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107978,"byte_end":107981,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":107986,"byte_end":108000,"line_start":255,"line_end":255,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108005,"byte_end":108008,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 64 bit big-endian integer from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108013,"byte_end":108074,"line_start":257,"line_end":257,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108079,"byte_end":108082,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108087,"byte_end":108098,"line_start":259,"line_end":259,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108103,"byte_end":108127,"line_start":260,"line_end":260,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108132,"byte_end":108177,"line_start":261,"line_end":261,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108182,"byte_end":108185,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108190,"byte_end":108274,"line_start":263,"line_end":263,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108279,"byte_end":108349,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108354,"byte_end":108361,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108366,"byte_end":108375,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":109201,"byte_end":109209,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108546,"byte_end":108607,"line_start":273,"line_end":273,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108612,"byte_end":108615,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108620,"byte_end":108632,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108637,"byte_end":108640,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108645,"byte_end":108709,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108714,"byte_end":108717,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108722,"byte_end":108814,"line_start":279,"line_end":279,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108819,"byte_end":108822,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108827,"byte_end":108841,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108846,"byte_end":108849,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Read a signed 64 bit big-endian integer from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108854,"byte_end":108912,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108917,"byte_end":108920,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108925,"byte_end":108936,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108941,"byte_end":108965,"line_start":286,"line_end":286,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":108970,"byte_end":109015,"line_start":287,"line_end":287,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":109020,"byte_end":109023,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":109028,"byte_end":109091,"line_start":289,"line_end":289,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":109096,"byte_end":109167,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":109172,"byte_end":109179,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":109184,"byte_end":109193,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111890,"byte_end":111899,"line_start":376,"line_end":376,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111256,"byte_end":111321,"line_start":357,"line_end":357,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111326,"byte_end":111329,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111334,"byte_end":111346,"line_start":359,"line_end":359,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111351,"byte_end":111354,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111359,"byte_end":111423,"line_start":361,"line_end":361,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111428,"byte_end":111431,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111436,"byte_end":111528,"line_start":363,"line_end":363,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111533,"byte_end":111536,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111541,"byte_end":111555,"line_start":365,"line_end":365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111560,"byte_end":111563,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111568,"byte_end":111629,"line_start":367,"line_end":367,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111634,"byte_end":111637,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111642,"byte_end":111653,"line_start":369,"line_end":369,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111658,"byte_end":111682,"line_start":370,"line_end":370,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111687,"byte_end":111732,"line_start":371,"line_end":371,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111737,"byte_end":111740,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111745,"byte_end":111799,"line_start":373,"line_end":373,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111804,"byte_end":111868,"line_start":374,"line_end":374,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":111873,"byte_end":111882,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112729,"byte_end":112737,"line_start":401,"line_end":401,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112098,"byte_end":112160,"line_start":382,"line_end":382,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112165,"byte_end":112168,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112173,"byte_end":112185,"line_start":384,"line_end":384,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112190,"byte_end":112193,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112198,"byte_end":112262,"line_start":386,"line_end":386,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112267,"byte_end":112270,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112275,"byte_end":112367,"line_start":388,"line_end":388,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112372,"byte_end":112375,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112380,"byte_end":112394,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112399,"byte_end":112402,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112407,"byte_end":112468,"line_start":392,"line_end":392,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112473,"byte_end":112476,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112481,"byte_end":112492,"line_start":394,"line_end":394,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112497,"byte_end":112521,"line_start":395,"line_end":395,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112526,"byte_end":112571,"line_start":396,"line_end":396,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112576,"byte_end":112579,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112584,"byte_end":112638,"line_start":398,"line_end":398,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112643,"byte_end":112707,"line_start":399,"line_end":399,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":112712,"byte_end":112721,"line_start":400,"line_end":400,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114358,"byte_end":114366,"line_start":450,"line_end":450,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"pub fn read_f32<T: ByteOrder>(&mut Self) -> Result<f32>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113594,"byte_end":113667,"line_start":425,"line_end":425,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113672,"byte_end":113698,"line_start":426,"line_end":426,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113703,"byte_end":113706,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113711,"byte_end":113723,"line_start":428,"line_end":428,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113728,"byte_end":113731,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113736,"byte_end":113800,"line_start":430,"line_end":430,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113805,"byte_end":113808,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113813,"byte_end":113905,"line_start":432,"line_end":432,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113910,"byte_end":113913,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113918,"byte_end":113932,"line_start":434,"line_end":434,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113937,"byte_end":113940,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian single-precision floating point number from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":113945,"byte_end":114020,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114025,"byte_end":114028,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114033,"byte_end":114044,"line_start":438,"line_end":438,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114049,"byte_end":114066,"line_start":439,"line_end":439,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114071,"byte_end":114095,"line_start":440,"line_end":440,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114100,"byte_end":114103,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114108,"byte_end":114153,"line_start":442,"line_end":442,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114158,"byte_end":114161,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114166,"byte_end":114201,"line_start":444,"line_end":444,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114206,"byte_end":114237,"line_start":445,"line_end":445,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114242,"byte_end":114249,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114254,"byte_end":114324,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114329,"byte_end":114336,"line_start":448,"line_end":448,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114341,"byte_end":114350,"line_start":449,"line_end":449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115309,"byte_end":115317,"line_start":481,"line_end":481,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"pub fn read_f64<T: ByteOrder>(&mut Self) -> Result<f64>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114521,"byte_end":114594,"line_start":456,"line_end":456,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114599,"byte_end":114625,"line_start":457,"line_end":457,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114630,"byte_end":114633,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114638,"byte_end":114650,"line_start":459,"line_end":459,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114655,"byte_end":114658,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114663,"byte_end":114727,"line_start":461,"line_end":461,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114732,"byte_end":114735,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114740,"byte_end":114832,"line_start":463,"line_end":463,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114837,"byte_end":114840,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114845,"byte_end":114859,"line_start":465,"line_end":465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114864,"byte_end":114867,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian double-precision floating point number from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114872,"byte_end":114947,"line_start":467,"line_end":467,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114952,"byte_end":114955,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114960,"byte_end":114971,"line_start":469,"line_end":469,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114976,"byte_end":114993,"line_start":470,"line_end":470,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":114998,"byte_end":115022,"line_start":471,"line_end":471,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115027,"byte_end":115030,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115035,"byte_end":115080,"line_start":473,"line_end":473,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115085,"byte_end":115088,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115093,"byte_end":115128,"line_start":475,"line_end":475,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115133,"byte_end":115188,"line_start":476,"line_end":476,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115193,"byte_end":115200,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115205,"byte_end":115275,"line_start":478,"line_end":478,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115280,"byte_end":115287,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115292,"byte_end":115301,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116358,"byte_end":116371,"line_start":513,"line_end":513,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"pub fn read_u16_into<T: ByteOrder>(&mut Self, &mut [u16]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 16 bit integers from the underlying","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115472,"byte_end":115540,"line_start":487,"line_end":487,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115545,"byte_end":115556,"line_start":488,"line_end":488,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115561,"byte_end":115564,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115569,"byte_end":115642,"line_start":490,"line_end":490,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115647,"byte_end":115714,"line_start":491,"line_end":491,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115719,"byte_end":115722,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115727,"byte_end":115739,"line_start":493,"line_end":493,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115744,"byte_end":115747,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115752,"byte_end":115816,"line_start":495,"line_end":495,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115821,"byte_end":115824,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115829,"byte_end":115921,"line_start":497,"line_end":497,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115926,"byte_end":115929,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115934,"byte_end":115948,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115953,"byte_end":115956,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":115961,"byte_end":116034,"line_start":501,"line_end":501,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116039,"byte_end":116042,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116047,"byte_end":116058,"line_start":503,"line_end":503,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116063,"byte_end":116087,"line_start":504,"line_end":504,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116092,"byte_end":116137,"line_start":505,"line_end":505,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116142,"byte_end":116145,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116150,"byte_end":116198,"line_start":507,"line_end":507,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116203,"byte_end":116228,"line_start":508,"line_end":508,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116233,"byte_end":116287,"line_start":509,"line_end":509,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116292,"byte_end":116324,"line_start":510,"line_end":510,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116329,"byte_end":116336,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116341,"byte_end":116350,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117501,"byte_end":117514,"line_start":548,"line_end":548,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"pub fn read_u32_into<T: ByteOrder>(&mut Self, &mut [u32]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 32 bit integers from the underlying","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116603,"byte_end":116671,"line_start":522,"line_end":522,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116676,"byte_end":116687,"line_start":523,"line_end":523,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116692,"byte_end":116695,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116700,"byte_end":116773,"line_start":525,"line_end":525,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116778,"byte_end":116845,"line_start":526,"line_end":526,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116850,"byte_end":116853,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116858,"byte_end":116870,"line_start":528,"line_end":528,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116875,"byte_end":116878,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116883,"byte_end":116947,"line_start":530,"line_end":530,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116952,"byte_end":116955,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":116960,"byte_end":117052,"line_start":532,"line_end":532,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117057,"byte_end":117060,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117065,"byte_end":117079,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117084,"byte_end":117087,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117092,"byte_end":117165,"line_start":536,"line_end":536,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117170,"byte_end":117173,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117178,"byte_end":117189,"line_start":538,"line_end":538,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117194,"byte_end":117218,"line_start":539,"line_end":539,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117223,"byte_end":117268,"line_start":540,"line_end":540,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117273,"byte_end":117276,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117281,"byte_end":117341,"line_start":542,"line_end":542,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117346,"byte_end":117371,"line_start":543,"line_end":543,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117376,"byte_end":117430,"line_start":544,"line_end":544,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117435,"byte_end":117467,"line_start":545,"line_end":545,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117472,"byte_end":117479,"line_start":546,"line_end":546,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117484,"byte_end":117493,"line_start":547,"line_end":547,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118703,"byte_end":118716,"line_start":586,"line_end":586,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"pub fn read_u64_into<T: ByteOrder>(&mut Self, &mut [u64]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 64 bit integers from the underlying","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117746,"byte_end":117814,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117819,"byte_end":117830,"line_start":558,"line_end":558,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117835,"byte_end":117838,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117843,"byte_end":117916,"line_start":560,"line_end":560,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117921,"byte_end":117988,"line_start":561,"line_end":561,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":117993,"byte_end":117996,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118001,"byte_end":118013,"line_start":563,"line_end":563,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118018,"byte_end":118021,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118026,"byte_end":118090,"line_start":565,"line_end":565,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118095,"byte_end":118098,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118103,"byte_end":118195,"line_start":567,"line_end":567,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118200,"byte_end":118203,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118208,"byte_end":118222,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118227,"byte_end":118230,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 64 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118235,"byte_end":118308,"line_start":571,"line_end":571,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118313,"byte_end":118316,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118321,"byte_end":118332,"line_start":573,"line_end":573,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118337,"byte_end":118361,"line_start":574,"line_end":574,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118366,"byte_end":118411,"line_start":575,"line_end":575,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118416,"byte_end":118419,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118424,"byte_end":118459,"line_start":577,"line_end":577,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118464,"byte_end":118495,"line_start":578,"line_end":578,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118500,"byte_end":118531,"line_start":579,"line_end":579,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118536,"byte_end":118543,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118548,"byte_end":118573,"line_start":581,"line_end":581,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118578,"byte_end":118632,"line_start":582,"line_end":582,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118637,"byte_end":118669,"line_start":583,"line_end":583,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118674,"byte_end":118681,"line_start":584,"line_end":584,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":118686,"byte_end":118695,"line_start":585,"line_end":585,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121138,"byte_end":121151,"line_start":663,"line_end":663,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"pub fn read_i16_into<T: ByteOrder>(&mut Self, &mut [i16]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 16 bit integers from the underlying","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120256,"byte_end":120322,"line_start":637,"line_end":637,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120327,"byte_end":120338,"line_start":638,"line_end":638,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120343,"byte_end":120346,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120351,"byte_end":120424,"line_start":640,"line_end":640,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120429,"byte_end":120496,"line_start":641,"line_end":641,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120501,"byte_end":120504,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120509,"byte_end":120521,"line_start":643,"line_end":643,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120526,"byte_end":120529,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120534,"byte_end":120598,"line_start":645,"line_end":645,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120603,"byte_end":120606,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120611,"byte_end":120703,"line_start":647,"line_end":647,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120708,"byte_end":120711,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120716,"byte_end":120730,"line_start":649,"line_end":649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120735,"byte_end":120738,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120743,"byte_end":120814,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120819,"byte_end":120822,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120827,"byte_end":120838,"line_start":653,"line_end":653,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120843,"byte_end":120867,"line_start":654,"line_end":654,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120872,"byte_end":120917,"line_start":655,"line_end":655,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120922,"byte_end":120925,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120930,"byte_end":120978,"line_start":657,"line_end":657,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":120983,"byte_end":121008,"line_start":658,"line_end":658,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121013,"byte_end":121067,"line_start":659,"line_end":659,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121072,"byte_end":121104,"line_start":660,"line_end":660,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121109,"byte_end":121116,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121121,"byte_end":121130,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122277,"byte_end":122290,"line_start":698,"line_end":698,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"pub fn read_i32_into<T: ByteOrder>(&mut Self, &mut [i32]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 32 bit integers from the underlying","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121383,"byte_end":121449,"line_start":672,"line_end":672,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121454,"byte_end":121465,"line_start":673,"line_end":673,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121470,"byte_end":121473,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121478,"byte_end":121551,"line_start":675,"line_end":675,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121556,"byte_end":121623,"line_start":676,"line_end":676,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121628,"byte_end":121631,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121636,"byte_end":121648,"line_start":678,"line_end":678,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121653,"byte_end":121656,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121661,"byte_end":121725,"line_start":680,"line_end":680,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121730,"byte_end":121733,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121738,"byte_end":121830,"line_start":682,"line_end":682,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121835,"byte_end":121838,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121843,"byte_end":121857,"line_start":684,"line_end":684,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121862,"byte_end":121865,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121870,"byte_end":121941,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121946,"byte_end":121949,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121954,"byte_end":121965,"line_start":688,"line_end":688,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121970,"byte_end":121994,"line_start":689,"line_end":689,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":121999,"byte_end":122044,"line_start":690,"line_end":690,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122049,"byte_end":122052,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122057,"byte_end":122117,"line_start":692,"line_end":692,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122122,"byte_end":122147,"line_start":693,"line_end":693,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122152,"byte_end":122206,"line_start":694,"line_end":694,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122211,"byte_end":122243,"line_start":695,"line_end":695,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122248,"byte_end":122255,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122260,"byte_end":122269,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123475,"byte_end":123488,"line_start":736,"line_end":736,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"pub fn read_i64_into<T: ByteOrder>(&mut Self, &mut [i64]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 64 bit integers from the underlying","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122522,"byte_end":122588,"line_start":707,"line_end":707,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122593,"byte_end":122604,"line_start":708,"line_end":708,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122609,"byte_end":122612,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122617,"byte_end":122690,"line_start":710,"line_end":710,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122695,"byte_end":122762,"line_start":711,"line_end":711,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122767,"byte_end":122770,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122775,"byte_end":122787,"line_start":713,"line_end":713,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122792,"byte_end":122795,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122800,"byte_end":122864,"line_start":715,"line_end":715,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122869,"byte_end":122872,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122877,"byte_end":122969,"line_start":717,"line_end":717,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122974,"byte_end":122977,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":122982,"byte_end":122996,"line_start":719,"line_end":719,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123001,"byte_end":123004,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 64 bit big-endian integers from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123009,"byte_end":123080,"line_start":721,"line_end":721,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123085,"byte_end":123088,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123093,"byte_end":123104,"line_start":723,"line_end":723,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123109,"byte_end":123133,"line_start":724,"line_end":724,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123138,"byte_end":123183,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123188,"byte_end":123191,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123196,"byte_end":123231,"line_start":727,"line_end":727,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123236,"byte_end":123267,"line_start":728,"line_end":728,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123272,"byte_end":123303,"line_start":729,"line_end":729,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123308,"byte_end":123315,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123320,"byte_end":123345,"line_start":731,"line_end":731,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123350,"byte_end":123404,"line_start":732,"line_end":732,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123409,"byte_end":123441,"line_start":733,"line_end":733,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123446,"byte_end":123453,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":123458,"byte_end":123467,"line_start":735,"line_end":735,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126080,"byte_end":126093,"line_start":819,"line_end":819,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"pub fn read_f32_into<T: ByteOrder>(&mut Self, &mut [f32]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 single-precision (4 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125024,"byte_end":125091,"line_start":787,"line_end":787,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125096,"byte_end":125141,"line_start":788,"line_end":788,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125146,"byte_end":125149,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125154,"byte_end":125227,"line_start":790,"line_end":790,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125232,"byte_end":125299,"line_start":791,"line_end":791,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125304,"byte_end":125307,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125312,"byte_end":125324,"line_start":793,"line_end":793,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125329,"byte_end":125332,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125337,"byte_end":125401,"line_start":795,"line_end":795,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125406,"byte_end":125409,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125414,"byte_end":125506,"line_start":797,"line_end":797,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125511,"byte_end":125514,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125519,"byte_end":125533,"line_start":799,"line_end":799,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125538,"byte_end":125541,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125546,"byte_end":125618,"line_start":801,"line_end":801,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125623,"byte_end":125641,"line_start":802,"line_end":802,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125646,"byte_end":125649,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125654,"byte_end":125665,"line_start":804,"line_end":804,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125670,"byte_end":125687,"line_start":805,"line_end":805,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125692,"byte_end":125716,"line_start":806,"line_end":806,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125721,"byte_end":125724,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125729,"byte_end":125774,"line_start":808,"line_end":808,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125779,"byte_end":125782,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125787,"byte_end":125822,"line_start":810,"line_end":810,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125827,"byte_end":125858,"line_start":811,"line_end":811,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125863,"byte_end":125894,"line_start":812,"line_end":812,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125899,"byte_end":125906,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125911,"byte_end":125938,"line_start":814,"line_end":814,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":125943,"byte_end":125997,"line_start":815,"line_end":815,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126002,"byte_end":126046,"line_start":816,"line_end":816,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126051,"byte_end":126058,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126063,"byte_end":126072,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127594,"byte_end":127617,"line_start":868,"line_end":868,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked<T: ByteOrder>(&mut Self, &mut [f32])\n-> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126348,"byte_end":126367,"line_start":831,"line_end":831,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126372,"byte_end":126375,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126380,"byte_end":126439,"line_start":833,"line_end":833,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126444,"byte_end":126447,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126452,"byte_end":126519,"line_start":835,"line_end":835,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126524,"byte_end":126569,"line_start":836,"line_end":836,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126574,"byte_end":126577,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126582,"byte_end":126655,"line_start":838,"line_end":838,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126660,"byte_end":126727,"line_start":839,"line_end":839,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126732,"byte_end":126735,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126740,"byte_end":126752,"line_start":841,"line_end":841,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126757,"byte_end":126760,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126765,"byte_end":126829,"line_start":843,"line_end":843,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126834,"byte_end":126837,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126842,"byte_end":126934,"line_start":845,"line_end":845,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126939,"byte_end":126942,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126947,"byte_end":126961,"line_start":847,"line_end":847,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126966,"byte_end":126969,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":126974,"byte_end":127046,"line_start":849,"line_end":849,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127051,"byte_end":127069,"line_start":850,"line_end":850,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127074,"byte_end":127077,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127082,"byte_end":127093,"line_start":852,"line_end":852,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127098,"byte_end":127115,"line_start":853,"line_end":853,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127120,"byte_end":127144,"line_start":854,"line_end":854,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127149,"byte_end":127152,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127157,"byte_end":127202,"line_start":856,"line_end":856,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127207,"byte_end":127210,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127215,"byte_end":127250,"line_start":858,"line_end":858,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127255,"byte_end":127286,"line_start":859,"line_end":859,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127291,"byte_end":127322,"line_start":860,"line_end":860,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127327,"byte_end":127334,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127339,"byte_end":127366,"line_start":862,"line_end":862,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127371,"byte_end":127435,"line_start":863,"line_end":863,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127440,"byte_end":127484,"line_start":864,"line_end":864,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127489,"byte_end":127496,"line_start":865,"line_end":865,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127501,"byte_end":127510,"line_start":866,"line_end":866,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127515,"byte_end":127586,"line_start":867,"line_end":867,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128851,"byte_end":128864,"line_start":907,"line_end":907,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"pub fn read_f64_into<T: ByteOrder>(&mut Self, &mut [f64]) -> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 double-precision (8 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127747,"byte_end":127814,"line_start":875,"line_end":875,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127819,"byte_end":127864,"line_start":876,"line_end":876,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127869,"byte_end":127872,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127877,"byte_end":127950,"line_start":878,"line_end":878,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":127955,"byte_end":128022,"line_start":879,"line_end":879,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128027,"byte_end":128030,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128035,"byte_end":128047,"line_start":881,"line_end":881,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128052,"byte_end":128055,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128060,"byte_end":128124,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128129,"byte_end":128132,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128137,"byte_end":128229,"line_start":885,"line_end":885,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128234,"byte_end":128237,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128242,"byte_end":128256,"line_start":887,"line_end":887,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128261,"byte_end":128264,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128269,"byte_end":128341,"line_start":889,"line_end":889,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128346,"byte_end":128364,"line_start":890,"line_end":890,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128369,"byte_end":128372,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128377,"byte_end":128388,"line_start":892,"line_end":892,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128393,"byte_end":128410,"line_start":893,"line_end":893,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128415,"byte_end":128439,"line_start":894,"line_end":894,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128444,"byte_end":128447,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128452,"byte_end":128497,"line_start":896,"line_end":896,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128502,"byte_end":128505,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128510,"byte_end":128545,"line_start":898,"line_end":898,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128550,"byte_end":128605,"line_start":899,"line_end":899,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128610,"byte_end":128665,"line_start":900,"line_end":900,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128670,"byte_end":128677,"line_start":901,"line_end":901,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128682,"byte_end":128709,"line_start":902,"line_end":902,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128714,"byte_end":128768,"line_start":903,"line_end":903,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128773,"byte_end":128817,"line_start":904,"line_end":904,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128822,"byte_end":128829,"line_start":905,"line_end":905,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":128834,"byte_end":128843,"line_start":906,"line_end":906,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130664,"byte_end":130687,"line_start":962,"line_end":962,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked<T: ByteOrder>(&mut Self, &mut [f64])\n-> Result<()>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129119,"byte_end":129138,"line_start":919,"line_end":919,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129143,"byte_end":129146,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129151,"byte_end":129210,"line_start":921,"line_end":921,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129215,"byte_end":129218,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129223,"byte_end":129290,"line_start":923,"line_end":923,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129295,"byte_end":129340,"line_start":924,"line_end":924,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129345,"byte_end":129348,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129353,"byte_end":129426,"line_start":926,"line_end":926,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129431,"byte_end":129498,"line_start":927,"line_end":927,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129503,"byte_end":129506,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129511,"byte_end":129523,"line_start":929,"line_end":929,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129528,"byte_end":129531,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because there are no guarantees made about the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129536,"byte_end":129608,"line_start":931,"line_end":931,"column_start":5,"column_end":77}},{"value":"/ floating point values. In particular, this method does not check for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129613,"byte_end":129685,"line_start":932,"line_end":932,"column_start":5,"column_end":77}},{"value":"/ signaling NaNs, which may result in undefined behavior.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129690,"byte_end":129749,"line_start":933,"line_end":933,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129754,"byte_end":129757,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129762,"byte_end":129774,"line_start":935,"line_end":935,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129779,"byte_end":129782,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129787,"byte_end":129851,"line_start":937,"line_end":937,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129856,"byte_end":129859,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129864,"byte_end":129956,"line_start":939,"line_end":939,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129961,"byte_end":129964,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129969,"byte_end":129983,"line_start":941,"line_end":941,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129988,"byte_end":129991,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":129996,"byte_end":130068,"line_start":943,"line_end":943,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130073,"byte_end":130091,"line_start":944,"line_end":944,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130096,"byte_end":130099,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130104,"byte_end":130115,"line_start":946,"line_end":946,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130120,"byte_end":130137,"line_start":947,"line_end":947,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130142,"byte_end":130166,"line_start":948,"line_end":948,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130171,"byte_end":130174,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130179,"byte_end":130224,"line_start":950,"line_end":950,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130229,"byte_end":130232,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130237,"byte_end":130272,"line_start":952,"line_end":952,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130277,"byte_end":130332,"line_start":953,"line_end":953,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130337,"byte_end":130392,"line_start":954,"line_end":954,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130397,"byte_end":130404,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130409,"byte_end":130436,"line_start":956,"line_end":956,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130441,"byte_end":130505,"line_start":957,"line_end":957,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130510,"byte_end":130554,"line_start":958,"line_end":958,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130559,"byte_end":130566,"line_start":959,"line_end":959,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130571,"byte_end":130580,"line_start":960,"line_end":960,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130585,"byte_end":130656,"line_start":961,"line_end":961,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":80},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131739,"byte_end":131752,"line_start":996,"line_end":996,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116}],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Write`] with methods for writing numbers. (For `std::io`.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130953,"byte_end":131025,"line_start":974,"line_end":974,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131026,"byte_end":131029,"line_start":975,"line_end":975,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131030,"byte_end":131108,"line_start":976,"line_end":976,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131109,"byte_end":131187,"line_start":977,"line_end":977,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131188,"byte_end":131258,"line_start":978,"line_end":978,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131259,"byte_end":131262,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131263,"byte_end":131277,"line_start":980,"line_end":980,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131278,"byte_end":131281,"line_start":981,"line_end":981,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a [`Write`]:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131282,"byte_end":131343,"line_start":982,"line_end":982,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131344,"byte_end":131347,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131348,"byte_end":131359,"line_start":984,"line_end":984,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131360,"byte_end":131406,"line_start":985,"line_end":985,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131407,"byte_end":131410,"line_start":986,"line_end":986,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = vec![];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131411,"byte_end":131436,"line_start":987,"line_end":987,"column_start":1,"column_end":26}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131437,"byte_end":131482,"line_start":988,"line_end":988,"column_start":1,"column_end":46}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131483,"byte_end":131528,"line_start":989,"line_end":989,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131529,"byte_end":131567,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131568,"byte_end":131575,"line_start":991,"line_end":991,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131576,"byte_end":131579,"line_start":992,"line_end":992,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131580,"byte_end":131618,"line_start":993,"line_end":993,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131619,"byte_end":131663,"line_start":994,"line_end":994,"column_start":1,"column_end":45}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131664,"byte_end":131728,"line_start":995,"line_end":995,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132197,"byte_end":132205,"line_start":1008,"line_end":1008,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131770,"byte_end":131832,"line_start":997,"line_end":997,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131837,"byte_end":131840,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131845,"byte_end":131917,"line_start":999,"line_end":999,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131922,"byte_end":131968,"line_start":1000,"line_end":1000,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131973,"byte_end":131976,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131981,"byte_end":131993,"line_start":1002,"line_end":1002,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131998,"byte_end":132001,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132006,"byte_end":132070,"line_start":1004,"line_end":1004,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132075,"byte_end":132078,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132083,"byte_end":132175,"line_start":1006,"line_end":1006,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132180,"byte_end":132189,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132704,"byte_end":132712,"line_start":1023,"line_end":1023,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"pub fn write_i8(&mut Self, i8) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132280,"byte_end":132339,"line_start":1012,"line_end":1012,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132344,"byte_end":132347,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132352,"byte_end":132424,"line_start":1014,"line_end":1014,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132429,"byte_end":132475,"line_start":1015,"line_end":1015,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132480,"byte_end":132483,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132488,"byte_end":132500,"line_start":1017,"line_end":1017,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132505,"byte_end":132508,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132513,"byte_end":132577,"line_start":1019,"line_end":1019,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132582,"byte_end":132585,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132590,"byte_end":132682,"line_start":1021,"line_end":1021,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132687,"byte_end":132696,"line_start":1022,"line_end":1022,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133085,"byte_end":133094,"line_start":1035,"line_end":1035,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"pub fn write_u16<T: ByteOrder>(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132793,"byte_end":132856,"line_start":1027,"line_end":1027,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132861,"byte_end":132864,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132869,"byte_end":132881,"line_start":1029,"line_end":1029,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132886,"byte_end":132889,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132894,"byte_end":132958,"line_start":1031,"line_end":1031,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132963,"byte_end":132966,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":132971,"byte_end":133063,"line_start":1033,"line_end":1033,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133068,"byte_end":133077,"line_start":1034,"line_end":1034,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133538,"byte_end":133547,"line_start":1049,"line_end":1049,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"pub fn write_i16<T: ByteOrder>(&mut Self, i16) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133249,"byte_end":133309,"line_start":1041,"line_end":1041,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133314,"byte_end":133317,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133322,"byte_end":133334,"line_start":1043,"line_end":1043,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133339,"byte_end":133342,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133347,"byte_end":133411,"line_start":1045,"line_end":1045,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133416,"byte_end":133419,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133424,"byte_end":133516,"line_start":1047,"line_end":1047,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133521,"byte_end":133530,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133994,"byte_end":134003,"line_start":1063,"line_end":1063,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"pub fn write_u24<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133702,"byte_end":133765,"line_start":1055,"line_end":1055,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133770,"byte_end":133773,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133778,"byte_end":133790,"line_start":1057,"line_end":1057,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133795,"byte_end":133798,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133803,"byte_end":133867,"line_start":1059,"line_end":1059,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133872,"byte_end":133875,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133880,"byte_end":133972,"line_start":1061,"line_end":1061,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":133977,"byte_end":133986,"line_start":1062,"line_end":1062,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134447,"byte_end":134456,"line_start":1077,"line_end":1077,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"pub fn write_i24<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134158,"byte_end":134218,"line_start":1069,"line_end":1069,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134223,"byte_end":134226,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134231,"byte_end":134243,"line_start":1071,"line_end":1071,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134248,"byte_end":134251,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134256,"byte_end":134320,"line_start":1073,"line_end":1073,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134325,"byte_end":134328,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134333,"byte_end":134425,"line_start":1075,"line_end":1075,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134430,"byte_end":134439,"line_start":1076,"line_end":1076,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134903,"byte_end":134912,"line_start":1091,"line_end":1091,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"pub fn write_u32<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134611,"byte_end":134674,"line_start":1083,"line_end":1083,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134679,"byte_end":134682,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134687,"byte_end":134699,"line_start":1085,"line_end":1085,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134704,"byte_end":134707,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134712,"byte_end":134776,"line_start":1087,"line_end":1087,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134781,"byte_end":134784,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134789,"byte_end":134881,"line_start":1089,"line_end":1089,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":134886,"byte_end":134895,"line_start":1090,"line_end":1090,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135356,"byte_end":135365,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"pub fn write_i32<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135067,"byte_end":135127,"line_start":1097,"line_end":1097,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135132,"byte_end":135135,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135140,"byte_end":135152,"line_start":1099,"line_end":1099,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135157,"byte_end":135160,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135165,"byte_end":135229,"line_start":1101,"line_end":1101,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135234,"byte_end":135237,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135242,"byte_end":135334,"line_start":1103,"line_end":1103,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135339,"byte_end":135348,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135812,"byte_end":135821,"line_start":1119,"line_end":1119,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"pub fn write_u64<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135520,"byte_end":135583,"line_start":1111,"line_end":1111,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135588,"byte_end":135591,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135596,"byte_end":135608,"line_start":1113,"line_end":1113,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135613,"byte_end":135616,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135621,"byte_end":135685,"line_start":1115,"line_end":1115,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135690,"byte_end":135693,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135698,"byte_end":135790,"line_start":1117,"line_end":1117,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135795,"byte_end":135804,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136265,"byte_end":136274,"line_start":1133,"line_end":1133,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"pub fn write_i64<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":135976,"byte_end":136036,"line_start":1125,"line_end":1125,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136041,"byte_end":136044,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136049,"byte_end":136061,"line_start":1127,"line_end":1127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136066,"byte_end":136069,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136074,"byte_end":136138,"line_start":1129,"line_end":1129,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136143,"byte_end":136146,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136151,"byte_end":136243,"line_start":1131,"line_end":1131,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136248,"byte_end":136257,"line_start":1132,"line_end":1132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137463,"byte_end":137473,"line_start":1170,"line_end":1170,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"pub fn write_uint<T: ByteOrder>(&mut Self, u64, usize) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":136992,"byte_end":137056,"line_start":1157,"line_end":1157,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137061,"byte_end":137064,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137069,"byte_end":137081,"line_start":1159,"line_end":1159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137086,"byte_end":137089,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137094,"byte_end":137158,"line_start":1161,"line_end":1161,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137163,"byte_end":137166,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137171,"byte_end":137263,"line_start":1163,"line_end":1163,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137268,"byte_end":137271,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137276,"byte_end":137288,"line_start":1165,"line_end":1165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137293,"byte_end":137296,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137301,"byte_end":137376,"line_start":1167,"line_end":1167,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137381,"byte_end":137441,"line_start":1168,"line_end":1168,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137446,"byte_end":137455,"line_start":1169,"line_end":1169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":138162,"byte_end":138171,"line_start":1193,"line_end":1193,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"pub fn write_int<T: ByteOrder>(&mut Self, i64, usize) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137694,"byte_end":137755,"line_start":1180,"line_end":1180,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137760,"byte_end":137763,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137768,"byte_end":137780,"line_start":1182,"line_end":1182,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137785,"byte_end":137788,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137793,"byte_end":137857,"line_start":1184,"line_end":1184,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137862,"byte_end":137865,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137870,"byte_end":137962,"line_start":1186,"line_end":1186,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137967,"byte_end":137970,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137975,"byte_end":137987,"line_start":1188,"line_end":1188,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":137992,"byte_end":137995,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":138000,"byte_end":138075,"line_start":1190,"line_end":1190,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":138080,"byte_end":138140,"line_start":1191,"line_end":1191,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":138145,"byte_end":138154,"line_start":1192,"line_end":1192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139734,"byte_end":139743,"line_start":1244,"line_end":1244,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"pub fn write_f32<T: ByteOrder>(&mut Self, f32) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139402,"byte_end":139474,"line_start":1235,"line_end":1235,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139479,"byte_end":139505,"line_start":1236,"line_end":1236,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139510,"byte_end":139513,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139518,"byte_end":139530,"line_start":1238,"line_end":1238,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139535,"byte_end":139538,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139543,"byte_end":139607,"line_start":1240,"line_end":1240,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139612,"byte_end":139615,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139620,"byte_end":139712,"line_start":1242,"line_end":1242,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139717,"byte_end":139726,"line_start":1243,"line_end":1243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":140023,"byte_end":140032,"line_start":1253,"line_end":1253,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"pub fn write_f64<T: ByteOrder>(&mut Self, f64) -> Result<()>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139898,"byte_end":139970,"line_start":1250,"line_end":1250,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":139975,"byte_end":140001,"line_start":1251,"line_end":1251,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":140006,"byte_end":140015,"line_start":1252,"line_end":1252,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":128},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4374,"byte_end":4380,"line_start":172,"line_end":172,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[{"value":"/ Sealed stops crates other than byteorder from implementing any traits","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4265,"byte_end":4338,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/ that use it.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4343,"byte_end":4359,"line_start":171,"line_end":171,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":131},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5628,"byte_end":5637,"line_start":212,"line_end":212,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[{"value":"/ `ByteOrder` describes types that can serialize integers as bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4469,"byte_end":4538,"line_start":177,"line_end":177,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4539,"byte_end":4542,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Note that `Self` does not appear anywhere in this trait's definition!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4543,"byte_end":4616,"line_start":179,"line_end":179,"column_start":1,"column_end":74}},{"value":"/ Therefore, in order to use it, you'll need to use syntax like","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4617,"byte_end":4682,"line_start":180,"line_end":180,"column_start":1,"column_end":66}},{"value":"/ `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4683,"byte_end":4743,"line_start":181,"line_end":181,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4744,"byte_end":4747,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ This crate provides two types that implement `ByteOrder`: [`BigEndian`]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4748,"byte_end":4823,"line_start":183,"line_end":183,"column_start":1,"column_end":76}},{"value":"/ and [`LittleEndian`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4824,"byte_end":4849,"line_start":184,"line_end":184,"column_start":1,"column_end":26}},{"value":"/ This trait is sealed and cannot be implemented for callers to avoid","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4850,"byte_end":4921,"line_start":185,"line_end":185,"column_start":1,"column_end":72}},{"value":"/ breaking backwards compatibility when adding new derived traits.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4922,"byte_end":4990,"line_start":186,"line_end":186,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4991,"byte_end":4994,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4995,"byte_end":5009,"line_start":188,"line_end":188,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5010,"byte_end":5013,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5014,"byte_end":5070,"line_start":190,"line_end":190,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5071,"byte_end":5074,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5075,"byte_end":5086,"line_start":192,"line_end":192,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5087,"byte_end":5132,"line_start":193,"line_end":193,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5133,"byte_end":5136,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5137,"byte_end":5162,"line_start":195,"line_end":195,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5163,"byte_end":5212,"line_start":196,"line_end":196,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5213,"byte_end":5269,"line_start":197,"line_end":197,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5270,"byte_end":5277,"line_start":198,"line_end":198,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5278,"byte_end":5281,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5282,"byte_end":5335,"line_start":200,"line_end":200,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5336,"byte_end":5339,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5340,"byte_end":5351,"line_start":202,"line_end":202,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5352,"byte_end":5394,"line_start":203,"line_end":203,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5395,"byte_end":5398,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5399,"byte_end":5424,"line_start":205,"line_end":205,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -50_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5425,"byte_end":5469,"line_start":206,"line_end":206,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(-50_000, BigEndian::read_i16(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5470,"byte_end":5521,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5522,"byte_end":5529,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5530,"byte_end":5533,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5534,"byte_end":5572,"line_start":210,"line_end":210,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5573,"byte_end":5617,"line_start":211,"line_end":211,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5872,"byte_end":5880,"line_start":221,"line_end":221,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"pub fn read_u16(&[u8]) -> u16","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5746,"byte_end":5794,"line_start":216,"line_end":216,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5799,"byte_end":5802,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5807,"byte_end":5819,"line_start":218,"line_end":218,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5824,"byte_end":5827,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5832,"byte_end":5864,"line_start":220,"line_end":220,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6389,"byte_end":6397,"line_start":240,"line_end":240,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"pub fn read_u24(&[u8]) -> u32","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from `buf`, stored in u32.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5906,"byte_end":5969,"line_start":223,"line_end":223,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5974,"byte_end":5977,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5982,"byte_end":5994,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5999,"byte_end":6002,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6007,"byte_end":6039,"line_start":227,"line_end":227,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6044,"byte_end":6047,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6052,"byte_end":6066,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6071,"byte_end":6074,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6079,"byte_end":6142,"line_start":231,"line_end":231,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6147,"byte_end":6150,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6155,"byte_end":6166,"line_start":233,"line_end":233,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6171,"byte_end":6216,"line_start":234,"line_end":234,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6221,"byte_end":6224,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6229,"byte_end":6254,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6259,"byte_end":6308,"line_start":237,"line_end":237,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6313,"byte_end":6369,"line_start":238,"line_end":238,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6374,"byte_end":6381,"line_start":239,"line_end":239,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6930,"byte_end":6938,"line_start":261,"line_end":261,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"pub fn read_u32(&[u8]) -> u32","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6469,"byte_end":6517,"line_start":244,"line_end":244,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6522,"byte_end":6525,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6530,"byte_end":6542,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6547,"byte_end":6550,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6555,"byte_end":6587,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6592,"byte_end":6595,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6600,"byte_end":6614,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6619,"byte_end":6622,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6627,"byte_end":6683,"line_start":252,"line_end":252,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6688,"byte_end":6691,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6696,"byte_end":6707,"line_start":254,"line_end":254,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6712,"byte_end":6757,"line_start":255,"line_end":255,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6762,"byte_end":6765,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6770,"byte_end":6795,"line_start":257,"line_end":257,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6800,"byte_end":6849,"line_start":258,"line_end":258,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6854,"byte_end":6910,"line_start":259,"line_end":259,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6915,"byte_end":6922,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7425,"byte_end":7433,"line_start":280,"line_end":280,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"pub fn read_u64(&[u8]) -> u64","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":6964,"byte_end":7012,"line_start":263,"line_end":263,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7017,"byte_end":7020,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7025,"byte_end":7037,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7042,"byte_end":7045,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7050,"byte_end":7082,"line_start":267,"line_end":267,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7087,"byte_end":7090,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7095,"byte_end":7109,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7114,"byte_end":7117,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7122,"byte_end":7178,"line_start":271,"line_end":271,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7183,"byte_end":7186,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7191,"byte_end":7202,"line_start":273,"line_end":273,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7207,"byte_end":7252,"line_start":274,"line_end":274,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7257,"byte_end":7260,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7265,"byte_end":7290,"line_start":276,"line_end":276,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7295,"byte_end":7344,"line_start":277,"line_end":277,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7349,"byte_end":7405,"line_start":278,"line_end":278,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7410,"byte_end":7417,"line_start":279,"line_end":279,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8508,"byte_end":8517,"line_start":320,"line_end":320,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"pub fn read_uint(&[u8], usize) -> u64","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":7991,"byte_end":8040,"line_start":302,"line_end":302,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8045,"byte_end":8048,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8053,"byte_end":8065,"line_start":304,"line_end":304,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8070,"byte_end":8073,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8078,"byte_end":8125,"line_start":306,"line_end":306,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8130,"byte_end":8154,"line_start":307,"line_end":307,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8159,"byte_end":8162,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8167,"byte_end":8181,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8186,"byte_end":8189,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8194,"byte_end":8253,"line_start":311,"line_end":311,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8258,"byte_end":8261,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8266,"byte_end":8277,"line_start":313,"line_end":313,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8282,"byte_end":8327,"line_start":314,"line_end":314,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8332,"byte_end":8335,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8340,"byte_end":8365,"line_start":316,"line_end":316,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8370,"byte_end":8423,"line_start":317,"line_end":317,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8428,"byte_end":8488,"line_start":318,"line_end":318,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":8493,"byte_end":8500,"line_start":319,"line_end":319,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9629,"byte_end":9638,"line_start":360,"line_end":360,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"pub fn write_u16(&mut [u8], u16)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9165,"byte_end":9216,"line_start":343,"line_end":343,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9221,"byte_end":9224,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9229,"byte_end":9241,"line_start":345,"line_end":345,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9246,"byte_end":9249,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9254,"byte_end":9286,"line_start":347,"line_end":347,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9291,"byte_end":9294,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9299,"byte_end":9313,"line_start":349,"line_end":349,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9318,"byte_end":9321,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9326,"byte_end":9382,"line_start":351,"line_end":351,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9387,"byte_end":9390,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9395,"byte_end":9406,"line_start":353,"line_end":353,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9411,"byte_end":9456,"line_start":354,"line_end":354,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9461,"byte_end":9464,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9469,"byte_end":9494,"line_start":356,"line_end":356,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u16(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9499,"byte_end":9548,"line_start":357,"line_end":357,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u16(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9553,"byte_end":9609,"line_start":358,"line_end":358,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9614,"byte_end":9621,"line_start":359,"line_end":359,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10155,"byte_end":10164,"line_start":379,"line_end":379,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"pub fn write_u24(&mut [u8], u32)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9669,"byte_end":9735,"line_start":362,"line_end":362,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9740,"byte_end":9743,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9748,"byte_end":9760,"line_start":364,"line_end":364,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9765,"byte_end":9768,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9773,"byte_end":9805,"line_start":366,"line_end":366,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9810,"byte_end":9813,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9818,"byte_end":9832,"line_start":368,"line_end":368,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9837,"byte_end":9840,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9845,"byte_end":9908,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9913,"byte_end":9916,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9921,"byte_end":9932,"line_start":372,"line_end":372,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9937,"byte_end":9982,"line_start":373,"line_end":373,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9987,"byte_end":9990,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":9995,"byte_end":10020,"line_start":375,"line_end":375,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10025,"byte_end":10074,"line_start":376,"line_end":376,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10079,"byte_end":10135,"line_start":377,"line_end":377,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10140,"byte_end":10147,"line_start":378,"line_end":378,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10709,"byte_end":10718,"line_start":400,"line_end":400,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"pub fn write_u32(&mut [u8], u32)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10245,"byte_end":10296,"line_start":383,"line_end":383,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10301,"byte_end":10304,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10309,"byte_end":10321,"line_start":385,"line_end":385,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10326,"byte_end":10329,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10334,"byte_end":10366,"line_start":387,"line_end":387,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10371,"byte_end":10374,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10379,"byte_end":10393,"line_start":389,"line_end":389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10398,"byte_end":10401,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10406,"byte_end":10462,"line_start":391,"line_end":391,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10467,"byte_end":10470,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10475,"byte_end":10486,"line_start":393,"line_end":393,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10491,"byte_end":10536,"line_start":394,"line_end":394,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10541,"byte_end":10544,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10549,"byte_end":10574,"line_start":396,"line_end":396,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10579,"byte_end":10628,"line_start":397,"line_end":397,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10633,"byte_end":10689,"line_start":398,"line_end":398,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10694,"byte_end":10701,"line_start":399,"line_end":399,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11213,"byte_end":11222,"line_start":419,"line_end":419,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"pub fn write_u64(&mut [u8], u64)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10749,"byte_end":10800,"line_start":402,"line_end":402,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10805,"byte_end":10808,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10813,"byte_end":10825,"line_start":404,"line_end":404,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10830,"byte_end":10833,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10838,"byte_end":10870,"line_start":406,"line_end":406,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10875,"byte_end":10878,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10883,"byte_end":10897,"line_start":408,"line_end":408,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10902,"byte_end":10905,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10910,"byte_end":10966,"line_start":410,"line_end":410,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10971,"byte_end":10974,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10979,"byte_end":10990,"line_start":412,"line_end":412,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":10995,"byte_end":11040,"line_start":413,"line_end":413,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11045,"byte_end":11048,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11053,"byte_end":11078,"line_start":415,"line_end":415,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11083,"byte_end":11132,"line_start":416,"line_end":416,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11137,"byte_end":11193,"line_start":417,"line_end":417,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11198,"byte_end":11205,"line_start":418,"line_end":418,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12352,"byte_end":12362,"line_start":459,"line_end":459,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"pub fn write_uint(&mut [u8], u64, usize)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11794,"byte_end":11858,"line_start":441,"line_end":441,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11863,"byte_end":11866,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11871,"byte_end":11883,"line_start":443,"line_end":443,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11888,"byte_end":11891,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11896,"byte_end":11970,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":11975,"byte_end":11998,"line_start":446,"line_end":446,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12003,"byte_end":12006,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12011,"byte_end":12025,"line_start":448,"line_end":448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12030,"byte_end":12033,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12038,"byte_end":12097,"line_start":450,"line_end":450,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12102,"byte_end":12105,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12110,"byte_end":12121,"line_start":452,"line_end":452,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12126,"byte_end":12171,"line_start":453,"line_end":453,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12176,"byte_end":12179,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12184,"byte_end":12209,"line_start":455,"line_end":455,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12214,"byte_end":12267,"line_start":456,"line_end":456,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12272,"byte_end":12332,"line_start":457,"line_end":457,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":12337,"byte_end":12344,"line_start":458,"line_end":458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13528,"byte_end":13536,"line_start":500,"line_end":500,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"pub fn read_i16(&[u8]) -> i16","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13062,"byte_end":13107,"line_start":482,"line_end":482,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13112,"byte_end":13115,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13120,"byte_end":13132,"line_start":484,"line_end":484,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13137,"byte_end":13140,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13145,"byte_end":13177,"line_start":486,"line_end":486,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13182,"byte_end":13185,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13190,"byte_end":13204,"line_start":488,"line_end":488,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13209,"byte_end":13212,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13217,"byte_end":13273,"line_start":490,"line_end":490,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13278,"byte_end":13281,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13286,"byte_end":13297,"line_start":492,"line_end":492,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13302,"byte_end":13347,"line_start":493,"line_end":493,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13352,"byte_end":13355,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13360,"byte_end":13385,"line_start":495,"line_end":495,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13390,"byte_end":13436,"line_start":496,"line_end":496,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13441,"byte_end":13494,"line_start":497,"line_end":497,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13499,"byte_end":13506,"line_start":498,"line_end":498,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13511,"byte_end":13520,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14100,"byte_end":14108,"line_start":522,"line_end":522,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"pub fn read_i24(&[u8]) -> i32","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from `buf`, stored in i32.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13604,"byte_end":13664,"line_start":504,"line_end":504,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13669,"byte_end":13672,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13677,"byte_end":13689,"line_start":506,"line_end":506,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13694,"byte_end":13697,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13702,"byte_end":13734,"line_start":508,"line_end":508,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13739,"byte_end":13742,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13747,"byte_end":13761,"line_start":510,"line_end":510,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13766,"byte_end":13769,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13774,"byte_end":13837,"line_start":512,"line_end":512,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13842,"byte_end":13845,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13850,"byte_end":13861,"line_start":514,"line_end":514,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13866,"byte_end":13911,"line_start":515,"line_end":515,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13916,"byte_end":13919,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13924,"byte_end":13949,"line_start":517,"line_end":517,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":13954,"byte_end":14004,"line_start":518,"line_end":518,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14009,"byte_end":14066,"line_start":519,"line_end":519,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14071,"byte_end":14078,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14083,"byte_end":14092,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14653,"byte_end":14661,"line_start":544,"line_end":544,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"pub fn read_i32(&[u8]) -> i32","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14179,"byte_end":14224,"line_start":526,"line_end":526,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14229,"byte_end":14232,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14237,"byte_end":14249,"line_start":528,"line_end":528,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14254,"byte_end":14257,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14262,"byte_end":14294,"line_start":530,"line_end":530,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14299,"byte_end":14302,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14307,"byte_end":14321,"line_start":532,"line_end":532,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14326,"byte_end":14329,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14334,"byte_end":14390,"line_start":534,"line_end":534,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14395,"byte_end":14398,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14403,"byte_end":14414,"line_start":536,"line_end":536,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14419,"byte_end":14464,"line_start":537,"line_end":537,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14469,"byte_end":14472,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14477,"byte_end":14502,"line_start":539,"line_end":539,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14507,"byte_end":14557,"line_start":540,"line_end":540,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14562,"byte_end":14619,"line_start":541,"line_end":541,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14624,"byte_end":14631,"line_start":542,"line_end":542,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14636,"byte_end":14645,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15211,"byte_end":15219,"line_start":566,"line_end":566,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"pub fn read_i64(&[u8]) -> i64","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14729,"byte_end":14774,"line_start":548,"line_end":548,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14779,"byte_end":14782,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14787,"byte_end":14799,"line_start":550,"line_end":550,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14804,"byte_end":14807,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14812,"byte_end":14844,"line_start":552,"line_end":552,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14849,"byte_end":14852,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14857,"byte_end":14871,"line_start":554,"line_end":554,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14876,"byte_end":14879,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14884,"byte_end":14940,"line_start":556,"line_end":556,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14945,"byte_end":14948,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14953,"byte_end":14964,"line_start":558,"line_end":558,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":14969,"byte_end":15014,"line_start":559,"line_end":559,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15019,"byte_end":15022,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15027,"byte_end":15052,"line_start":561,"line_end":561,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15057,"byte_end":15111,"line_start":562,"line_end":562,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15116,"byte_end":15177,"line_start":563,"line_end":563,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15182,"byte_end":15189,"line_start":564,"line_end":564,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15194,"byte_end":15203,"line_start":565,"line_end":565,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16411,"byte_end":16419,"line_start":612,"line_end":612,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"pub fn read_int(&[u8], usize) -> i64","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15884,"byte_end":15930,"line_start":593,"line_end":593,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15935,"byte_end":15938,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15943,"byte_end":15955,"line_start":595,"line_end":595,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15960,"byte_end":15963,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":15968,"byte_end":16015,"line_start":597,"line_end":597,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16020,"byte_end":16044,"line_start":598,"line_end":598,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16049,"byte_end":16052,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16057,"byte_end":16071,"line_start":600,"line_end":600,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16076,"byte_end":16079,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16084,"byte_end":16150,"line_start":602,"line_end":602,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16155,"byte_end":16158,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16163,"byte_end":16174,"line_start":604,"line_end":604,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16179,"byte_end":16224,"line_start":605,"line_end":605,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16229,"byte_end":16232,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16237,"byte_end":16262,"line_start":607,"line_end":607,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16267,"byte_end":16316,"line_start":608,"line_end":608,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16321,"byte_end":16377,"line_start":609,"line_end":609,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16382,"byte_end":16389,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":16394,"byte_end":16403,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17717,"byte_end":17725,"line_start":659,"line_end":659,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"pub fn read_f32(&[u8]) -> f32","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17212,"byte_end":17281,"line_start":640,"line_end":640,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17286,"byte_end":17289,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17294,"byte_end":17306,"line_start":642,"line_end":642,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17311,"byte_end":17314,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17319,"byte_end":17351,"line_start":644,"line_end":644,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17356,"byte_end":17359,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17364,"byte_end":17378,"line_start":646,"line_end":646,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17383,"byte_end":17386,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17391,"byte_end":17447,"line_start":648,"line_end":648,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17452,"byte_end":17455,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17460,"byte_end":17471,"line_start":650,"line_end":650,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17476,"byte_end":17521,"line_start":651,"line_end":651,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17526,"byte_end":17529,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17534,"byte_end":17554,"line_start":653,"line_end":653,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17559,"byte_end":17584,"line_start":654,"line_end":654,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17589,"byte_end":17630,"line_start":655,"line_end":655,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17635,"byte_end":17683,"line_start":656,"line_end":656,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17688,"byte_end":17695,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17700,"byte_end":17709,"line_start":658,"line_end":658,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18345,"byte_end":18353,"line_start":682,"line_end":682,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"pub fn read_f64(&[u8]) -> f64","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17829,"byte_end":17898,"line_start":663,"line_end":663,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17903,"byte_end":17906,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17911,"byte_end":17923,"line_start":665,"line_end":665,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17928,"byte_end":17931,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17936,"byte_end":17968,"line_start":667,"line_end":667,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17973,"byte_end":17976,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":17981,"byte_end":17995,"line_start":669,"line_end":669,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18000,"byte_end":18003,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18008,"byte_end":18064,"line_start":671,"line_end":671,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18069,"byte_end":18072,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18077,"byte_end":18088,"line_start":673,"line_end":673,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18093,"byte_end":18138,"line_start":674,"line_end":674,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18143,"byte_end":18146,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18151,"byte_end":18178,"line_start":676,"line_end":676,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18183,"byte_end":18208,"line_start":677,"line_end":677,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18213,"byte_end":18256,"line_start":678,"line_end":678,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18261,"byte_end":18311,"line_start":679,"line_end":679,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18316,"byte_end":18323,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18328,"byte_end":18337,"line_start":681,"line_end":681,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18926,"byte_end":18935,"line_start":704,"line_end":704,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"pub fn write_i16(&mut [u8], i16)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer `n` to `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18457,"byte_end":18505,"line_start":686,"line_end":686,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18510,"byte_end":18513,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18518,"byte_end":18530,"line_start":688,"line_end":688,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18535,"byte_end":18538,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18543,"byte_end":18575,"line_start":690,"line_end":690,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18580,"byte_end":18583,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18588,"byte_end":18602,"line_start":692,"line_end":692,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18607,"byte_end":18610,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18615,"byte_end":18671,"line_start":694,"line_end":694,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18676,"byte_end":18679,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18684,"byte_end":18695,"line_start":696,"line_end":696,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18700,"byte_end":18745,"line_start":697,"line_end":697,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18750,"byte_end":18753,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18758,"byte_end":18783,"line_start":699,"line_end":699,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18788,"byte_end":18834,"line_start":700,"line_end":700,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18839,"byte_end":18892,"line_start":701,"line_end":701,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18897,"byte_end":18904,"line_start":702,"line_end":702,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":18909,"byte_end":18918,"line_start":703,"line_end":703,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19511,"byte_end":19520,"line_start":726,"line_end":726,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"pub fn write_i24(&mut [u8], i32)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer `n` to `buf`, stored in i32.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19012,"byte_end":19075,"line_start":708,"line_end":708,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19080,"byte_end":19083,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19088,"byte_end":19100,"line_start":710,"line_end":710,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19105,"byte_end":19108,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19113,"byte_end":19145,"line_start":712,"line_end":712,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19150,"byte_end":19153,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19158,"byte_end":19172,"line_start":714,"line_end":714,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19177,"byte_end":19180,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19185,"byte_end":19248,"line_start":716,"line_end":716,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19253,"byte_end":19256,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19261,"byte_end":19272,"line_start":718,"line_end":718,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19277,"byte_end":19322,"line_start":719,"line_end":719,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19327,"byte_end":19330,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19335,"byte_end":19360,"line_start":721,"line_end":721,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19365,"byte_end":19415,"line_start":722,"line_end":722,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19420,"byte_end":19477,"line_start":723,"line_end":723,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19482,"byte_end":19489,"line_start":724,"line_end":724,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19494,"byte_end":19503,"line_start":725,"line_end":725,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20077,"byte_end":20086,"line_start":748,"line_end":748,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"pub fn write_i32(&mut [u8], i32)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer `n` to `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19600,"byte_end":19648,"line_start":730,"line_end":730,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19653,"byte_end":19656,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19661,"byte_end":19673,"line_start":732,"line_end":732,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19678,"byte_end":19681,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19686,"byte_end":19718,"line_start":734,"line_end":734,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19723,"byte_end":19726,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19731,"byte_end":19745,"line_start":736,"line_end":736,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19750,"byte_end":19753,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19758,"byte_end":19814,"line_start":738,"line_end":738,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19819,"byte_end":19822,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19827,"byte_end":19838,"line_start":740,"line_end":740,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19843,"byte_end":19888,"line_start":741,"line_end":741,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19893,"byte_end":19896,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19901,"byte_end":19926,"line_start":743,"line_end":743,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19931,"byte_end":19981,"line_start":744,"line_end":744,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":19986,"byte_end":20043,"line_start":745,"line_end":745,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20048,"byte_end":20055,"line_start":746,"line_end":746,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20060,"byte_end":20069,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20648,"byte_end":20657,"line_start":770,"line_end":770,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"pub fn write_i64(&mut [u8], i64)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer `n` to `buf`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20163,"byte_end":20211,"line_start":752,"line_end":752,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20216,"byte_end":20219,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20224,"byte_end":20236,"line_start":754,"line_end":754,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20241,"byte_end":20244,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20249,"byte_end":20281,"line_start":756,"line_end":756,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20286,"byte_end":20289,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20294,"byte_end":20308,"line_start":758,"line_end":758,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20313,"byte_end":20316,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20321,"byte_end":20377,"line_start":760,"line_end":760,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20382,"byte_end":20385,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20390,"byte_end":20401,"line_start":762,"line_end":762,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20406,"byte_end":20451,"line_start":763,"line_end":763,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20456,"byte_end":20459,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20464,"byte_end":20489,"line_start":765,"line_end":765,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20494,"byte_end":20548,"line_start":766,"line_end":766,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20553,"byte_end":20614,"line_start":767,"line_end":767,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20619,"byte_end":20626,"line_start":768,"line_end":768,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":20631,"byte_end":20640,"line_start":769,"line_end":769,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21912,"byte_end":21921,"line_start":816,"line_end":816,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"pub fn write_int(&mut [u8], i64, usize)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21351,"byte_end":21412,"line_start":797,"line_end":797,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21417,"byte_end":21420,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21425,"byte_end":21437,"line_start":799,"line_end":799,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21442,"byte_end":21445,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21450,"byte_end":21524,"line_start":801,"line_end":801,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21529,"byte_end":21552,"line_start":802,"line_end":802,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21557,"byte_end":21560,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21565,"byte_end":21579,"line_start":804,"line_end":804,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21584,"byte_end":21587,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21592,"byte_end":21651,"line_start":806,"line_end":806,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21656,"byte_end":21659,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21664,"byte_end":21675,"line_start":808,"line_end":808,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21680,"byte_end":21725,"line_start":809,"line_end":809,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21730,"byte_end":21733,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21738,"byte_end":21763,"line_start":811,"line_end":811,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21768,"byte_end":21817,"line_start":812,"line_end":812,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21822,"byte_end":21878,"line_start":813,"line_end":813,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21883,"byte_end":21890,"line_start":814,"line_end":814,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":21895,"byte_end":21904,"line_start":815,"line_end":815,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23284,"byte_end":23293,"line_start":863,"line_end":863,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"pub fn write_f32(&mut [u8], f32)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22778,"byte_end":22848,"line_start":844,"line_end":844,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22853,"byte_end":22856,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22861,"byte_end":22873,"line_start":846,"line_end":846,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22878,"byte_end":22881,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22886,"byte_end":22918,"line_start":848,"line_end":848,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22923,"byte_end":22926,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22931,"byte_end":22945,"line_start":850,"line_end":850,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22950,"byte_end":22953,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":22958,"byte_end":23014,"line_start":852,"line_end":852,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23019,"byte_end":23022,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23027,"byte_end":23038,"line_start":854,"line_end":854,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23043,"byte_end":23088,"line_start":855,"line_end":855,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23093,"byte_end":23096,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23101,"byte_end":23121,"line_start":857,"line_end":857,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23126,"byte_end":23151,"line_start":858,"line_end":858,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23156,"byte_end":23197,"line_start":859,"line_end":859,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23202,"byte_end":23250,"line_start":860,"line_end":860,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23255,"byte_end":23262,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23267,"byte_end":23276,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23942,"byte_end":23951,"line_start":887,"line_end":887,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"pub fn write_f64(&mut [u8], f64)","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23425,"byte_end":23495,"line_start":868,"line_end":868,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23500,"byte_end":23503,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23508,"byte_end":23520,"line_start":870,"line_end":870,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23525,"byte_end":23528,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23533,"byte_end":23565,"line_start":872,"line_end":872,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23570,"byte_end":23573,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23578,"byte_end":23592,"line_start":874,"line_end":874,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23597,"byte_end":23600,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23605,"byte_end":23661,"line_start":876,"line_end":876,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23666,"byte_end":23669,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23674,"byte_end":23685,"line_start":878,"line_end":878,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23690,"byte_end":23735,"line_start":879,"line_end":879,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23740,"byte_end":23743,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23748,"byte_end":23775,"line_start":881,"line_end":881,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23780,"byte_end":23805,"line_start":882,"line_end":882,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23810,"byte_end":23853,"line_start":883,"line_end":883,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23858,"byte_end":23908,"line_start":884,"line_end":884,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23913,"byte_end":23920,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":23925,"byte_end":23934,"line_start":886,"line_end":886,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24726,"byte_end":24739,"line_start":913,"line_end":913,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"pub fn read_u16_into(&[u8], &mut [u16])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24083,"byte_end":24140,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24145,"byte_end":24148,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24153,"byte_end":24165,"line_start":894,"line_end":894,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24170,"byte_end":24173,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 2*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24178,"byte_end":24221,"line_start":896,"line_end":896,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24226,"byte_end":24229,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24234,"byte_end":24248,"line_start":898,"line_end":898,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24253,"byte_end":24256,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24261,"byte_end":24317,"line_start":900,"line_end":900,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24322,"byte_end":24325,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24330,"byte_end":24341,"line_start":902,"line_end":902,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24346,"byte_end":24391,"line_start":903,"line_end":903,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24396,"byte_end":24399,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24404,"byte_end":24431,"line_start":905,"line_end":905,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24436,"byte_end":24483,"line_start":906,"line_end":906,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24488,"byte_end":24549,"line_start":907,"line_end":907,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24554,"byte_end":24557,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24562,"byte_end":24595,"line_start":909,"line_end":909,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24600,"byte_end":24658,"line_start":910,"line_end":910,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24663,"byte_end":24706,"line_start":911,"line_end":911,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24711,"byte_end":24718,"line_start":912,"line_end":912,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25419,"byte_end":25432,"line_start":936,"line_end":936,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24775,"byte_end":24832,"line_start":915,"line_end":915,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24837,"byte_end":24840,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24845,"byte_end":24857,"line_start":917,"line_end":917,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24862,"byte_end":24865,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24870,"byte_end":24913,"line_start":919,"line_end":919,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24918,"byte_end":24921,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24926,"byte_end":24940,"line_start":921,"line_end":921,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24945,"byte_end":24948,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":24953,"byte_end":25009,"line_start":923,"line_end":923,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25014,"byte_end":25017,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25022,"byte_end":25033,"line_start":925,"line_end":925,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25038,"byte_end":25083,"line_start":926,"line_end":926,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25088,"byte_end":25091,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25096,"byte_end":25124,"line_start":928,"line_end":928,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25129,"byte_end":25176,"line_start":929,"line_end":929,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25181,"byte_end":25242,"line_start":930,"line_end":930,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25247,"byte_end":25250,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25255,"byte_end":25288,"line_start":932,"line_end":932,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25293,"byte_end":25351,"line_start":933,"line_end":933,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25356,"byte_end":25399,"line_start":934,"line_end":934,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25404,"byte_end":25411,"line_start":935,"line_end":935,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26112,"byte_end":26125,"line_start":959,"line_end":959,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25468,"byte_end":25525,"line_start":938,"line_end":938,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25530,"byte_end":25533,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25538,"byte_end":25550,"line_start":940,"line_end":940,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25555,"byte_end":25558,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25563,"byte_end":25606,"line_start":942,"line_end":942,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25611,"byte_end":25614,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25619,"byte_end":25633,"line_start":944,"line_end":944,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25638,"byte_end":25641,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25646,"byte_end":25702,"line_start":946,"line_end":946,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25707,"byte_end":25710,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25715,"byte_end":25726,"line_start":948,"line_end":948,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25731,"byte_end":25776,"line_start":949,"line_end":949,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25781,"byte_end":25784,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25789,"byte_end":25817,"line_start":951,"line_end":951,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25822,"byte_end":25869,"line_start":952,"line_end":952,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25874,"byte_end":25935,"line_start":953,"line_end":953,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25940,"byte_end":25943,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25948,"byte_end":25981,"line_start":955,"line_end":955,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":25986,"byte_end":26044,"line_start":956,"line_end":956,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26049,"byte_end":26092,"line_start":957,"line_end":957,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26097,"byte_end":26104,"line_start":958,"line_end":958,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27543,"byte_end":27556,"line_start":1007,"line_end":1007,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"pub fn read_i16_into(&[u8], &mut [i16])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 16 bit integers from `src` to `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26890,"byte_end":26943,"line_start":985,"line_end":985,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26948,"byte_end":26951,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26956,"byte_end":26968,"line_start":987,"line_end":987,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26973,"byte_end":26976,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":26981,"byte_end":27024,"line_start":989,"line_end":989,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27029,"byte_end":27032,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27037,"byte_end":27051,"line_start":991,"line_end":991,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27056,"byte_end":27059,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27064,"byte_end":27120,"line_start":993,"line_end":993,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27125,"byte_end":27128,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27133,"byte_end":27144,"line_start":995,"line_end":995,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27149,"byte_end":27194,"line_start":996,"line_end":996,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27199,"byte_end":27202,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27207,"byte_end":27234,"line_start":998,"line_end":998,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27239,"byte_end":27286,"line_start":999,"line_end":999,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27291,"byte_end":27352,"line_start":1000,"line_end":1000,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27357,"byte_end":27360,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27365,"byte_end":27398,"line_start":1002,"line_end":1002,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27403,"byte_end":27461,"line_start":1003,"line_end":1003,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27466,"byte_end":27509,"line_start":1004,"line_end":1004,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27514,"byte_end":27521,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27526,"byte_end":27535,"line_start":1006,"line_end":1006,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28410,"byte_end":28423,"line_start":1036,"line_end":1036,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"pub fn read_i32_into(&[u8], &mut [i32])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27754,"byte_end":27809,"line_start":1014,"line_end":1014,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27814,"byte_end":27817,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27822,"byte_end":27834,"line_start":1016,"line_end":1016,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27839,"byte_end":27842,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27847,"byte_end":27890,"line_start":1018,"line_end":1018,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27895,"byte_end":27898,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27903,"byte_end":27917,"line_start":1020,"line_end":1020,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27922,"byte_end":27925,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27930,"byte_end":27986,"line_start":1022,"line_end":1022,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27991,"byte_end":27994,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":27999,"byte_end":28010,"line_start":1024,"line_end":1024,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28015,"byte_end":28060,"line_start":1025,"line_end":1025,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28065,"byte_end":28068,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28073,"byte_end":28101,"line_start":1027,"line_end":1027,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28106,"byte_end":28153,"line_start":1028,"line_end":1028,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28158,"byte_end":28219,"line_start":1029,"line_end":1029,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28224,"byte_end":28227,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28232,"byte_end":28265,"line_start":1031,"line_end":1031,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28270,"byte_end":28328,"line_start":1032,"line_end":1032,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28333,"byte_end":28376,"line_start":1033,"line_end":1033,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28381,"byte_end":28388,"line_start":1034,"line_end":1034,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28393,"byte_end":28402,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29278,"byte_end":29291,"line_start":1065,"line_end":1065,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"pub fn read_i64_into(&[u8], &mut [i64])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28622,"byte_end":28677,"line_start":1043,"line_end":1043,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28682,"byte_end":28685,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28690,"byte_end":28702,"line_start":1045,"line_end":1045,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28707,"byte_end":28710,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28715,"byte_end":28758,"line_start":1047,"line_end":1047,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28763,"byte_end":28766,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28771,"byte_end":28785,"line_start":1049,"line_end":1049,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28790,"byte_end":28793,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28798,"byte_end":28854,"line_start":1051,"line_end":1051,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28859,"byte_end":28862,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28867,"byte_end":28878,"line_start":1053,"line_end":1053,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28883,"byte_end":28928,"line_start":1054,"line_end":1054,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28933,"byte_end":28936,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28941,"byte_end":28969,"line_start":1056,"line_end":1056,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":28974,"byte_end":29021,"line_start":1057,"line_end":1057,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29026,"byte_end":29087,"line_start":1058,"line_end":1058,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29092,"byte_end":29095,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29100,"byte_end":29133,"line_start":1060,"line_end":1060,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29138,"byte_end":29196,"line_start":1061,"line_end":1061,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29201,"byte_end":29244,"line_start":1062,"line_end":1062,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29249,"byte_end":29256,"line_start":1063,"line_end":1063,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":29261,"byte_end":29270,"line_start":1064,"line_end":1064,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31118,"byte_end":31141,"line_start":1125,"line_end":1125,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked(&[u8], &mut [f32])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30396,"byte_end":30468,"line_start":1102,"line_end":1102,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30473,"byte_end":30494,"line_start":1103,"line_end":1103,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30499,"byte_end":30502,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30507,"byte_end":30519,"line_start":1105,"line_end":1105,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30524,"byte_end":30527,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30532,"byte_end":30575,"line_start":1107,"line_end":1107,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30580,"byte_end":30583,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30588,"byte_end":30602,"line_start":1109,"line_end":1109,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30607,"byte_end":30610,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30615,"byte_end":30671,"line_start":1111,"line_end":1111,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30676,"byte_end":30679,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30684,"byte_end":30695,"line_start":1113,"line_end":1113,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30700,"byte_end":30745,"line_start":1114,"line_end":1114,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30750,"byte_end":30753,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30758,"byte_end":30786,"line_start":1116,"line_end":1116,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30791,"byte_end":30849,"line_start":1117,"line_end":1117,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30854,"byte_end":30915,"line_start":1118,"line_end":1118,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30920,"byte_end":30923,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30928,"byte_end":30963,"line_start":1120,"line_end":1120,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":30968,"byte_end":31036,"line_start":1121,"line_end":1121,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31041,"byte_end":31084,"line_start":1122,"line_end":1122,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31089,"byte_end":31096,"line_start":1123,"line_end":1123,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31101,"byte_end":31110,"line_start":1124,"line_end":1124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32062,"byte_end":32085,"line_start":1155,"line_end":1155,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked(&[u8], &mut [f64])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31340,"byte_end":31412,"line_start":1132,"line_end":1132,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31417,"byte_end":31438,"line_start":1133,"line_end":1133,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31443,"byte_end":31446,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31451,"byte_end":31463,"line_start":1135,"line_end":1135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31468,"byte_end":31471,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31476,"byte_end":31519,"line_start":1137,"line_end":1137,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31524,"byte_end":31527,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31532,"byte_end":31546,"line_start":1139,"line_end":1139,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31551,"byte_end":31554,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31559,"byte_end":31615,"line_start":1141,"line_end":1141,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31620,"byte_end":31623,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31628,"byte_end":31639,"line_start":1143,"line_end":1143,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31644,"byte_end":31689,"line_start":1144,"line_end":1144,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31694,"byte_end":31697,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31702,"byte_end":31730,"line_start":1146,"line_end":1146,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31735,"byte_end":31793,"line_start":1147,"line_end":1147,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31798,"byte_end":31859,"line_start":1148,"line_end":1148,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31864,"byte_end":31867,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31872,"byte_end":31907,"line_start":1150,"line_end":1150,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31912,"byte_end":31980,"line_start":1151,"line_end":1151,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":31985,"byte_end":32028,"line_start":1152,"line_end":1152,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32033,"byte_end":32040,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32045,"byte_end":32054,"line_start":1154,"line_end":1154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32928,"byte_end":32942,"line_start":1183,"line_end":1183,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"pub fn write_u16_into(&[u16], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32284,"byte_end":32342,"line_start":1162,"line_end":1162,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32347,"byte_end":32350,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32355,"byte_end":32367,"line_start":1164,"line_end":1164,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32372,"byte_end":32375,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 2*src.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32380,"byte_end":32423,"line_start":1166,"line_end":1166,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32428,"byte_end":32431,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32436,"byte_end":32450,"line_start":1168,"line_end":1168,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32455,"byte_end":32458,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32463,"byte_end":32519,"line_start":1170,"line_end":1170,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32524,"byte_end":32527,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32532,"byte_end":32543,"line_start":1172,"line_end":1172,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32548,"byte_end":32593,"line_start":1173,"line_end":1173,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32598,"byte_end":32601,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32606,"byte_end":32633,"line_start":1175,"line_end":1175,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32638,"byte_end":32685,"line_start":1176,"line_end":1176,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32690,"byte_end":32751,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32756,"byte_end":32759,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32764,"byte_end":32797,"line_start":1179,"line_end":1179,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32802,"byte_end":32860,"line_start":1180,"line_end":1180,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32865,"byte_end":32908,"line_start":1181,"line_end":1181,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32913,"byte_end":32920,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33623,"byte_end":33637,"line_start":1206,"line_end":1206,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"pub fn write_u32_into(&[u32], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":32978,"byte_end":33036,"line_start":1185,"line_end":1185,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33041,"byte_end":33044,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33049,"byte_end":33061,"line_start":1187,"line_end":1187,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33066,"byte_end":33069,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33074,"byte_end":33117,"line_start":1189,"line_end":1189,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33122,"byte_end":33125,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33130,"byte_end":33144,"line_start":1191,"line_end":1191,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33149,"byte_end":33152,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33157,"byte_end":33213,"line_start":1193,"line_end":1193,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33218,"byte_end":33221,"line_start":1194,"line_end":1194,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33226,"byte_end":33237,"line_start":1195,"line_end":1195,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33242,"byte_end":33287,"line_start":1196,"line_end":1196,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33292,"byte_end":33295,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33300,"byte_end":33328,"line_start":1198,"line_end":1198,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33333,"byte_end":33380,"line_start":1199,"line_end":1199,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33385,"byte_end":33446,"line_start":1200,"line_end":1200,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33451,"byte_end":33454,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33459,"byte_end":33492,"line_start":1202,"line_end":1202,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33497,"byte_end":33555,"line_start":1203,"line_end":1203,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33560,"byte_end":33603,"line_start":1204,"line_end":1204,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33608,"byte_end":33615,"line_start":1205,"line_end":1205,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34318,"byte_end":34332,"line_start":1229,"line_end":1229,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"pub fn write_u64_into(&[u64], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33673,"byte_end":33731,"line_start":1208,"line_end":1208,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33736,"byte_end":33739,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33744,"byte_end":33756,"line_start":1210,"line_end":1210,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33761,"byte_end":33764,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33769,"byte_end":33812,"line_start":1212,"line_end":1212,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33817,"byte_end":33820,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33825,"byte_end":33839,"line_start":1214,"line_end":1214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33844,"byte_end":33847,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33852,"byte_end":33908,"line_start":1216,"line_end":1216,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33913,"byte_end":33916,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33921,"byte_end":33932,"line_start":1218,"line_end":1218,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33937,"byte_end":33982,"line_start":1219,"line_end":1219,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33987,"byte_end":33990,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":33995,"byte_end":34023,"line_start":1221,"line_end":1221,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34028,"byte_end":34075,"line_start":1222,"line_end":1222,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34080,"byte_end":34141,"line_start":1223,"line_end":1223,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34146,"byte_end":34149,"line_start":1224,"line_end":1224,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34154,"byte_end":34187,"line_start":1225,"line_end":1225,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34192,"byte_end":34250,"line_start":1226,"line_end":1226,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34255,"byte_end":34298,"line_start":1227,"line_end":1227,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":34303,"byte_end":34310,"line_start":1228,"line_end":1228,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35741,"byte_end":35755,"line_start":1276,"line_end":1276,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"pub fn write_i16_into(&[i16], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 16 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35099,"byte_end":35155,"line_start":1255,"line_end":1255,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35160,"byte_end":35163,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35168,"byte_end":35180,"line_start":1257,"line_end":1257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35185,"byte_end":35188,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*src.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35193,"byte_end":35236,"line_start":1259,"line_end":1259,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35241,"byte_end":35244,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35249,"byte_end":35263,"line_start":1261,"line_end":1261,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35268,"byte_end":35271,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35276,"byte_end":35332,"line_start":1263,"line_end":1263,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35337,"byte_end":35340,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35345,"byte_end":35356,"line_start":1265,"line_end":1265,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35361,"byte_end":35406,"line_start":1266,"line_end":1266,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35411,"byte_end":35414,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35419,"byte_end":35446,"line_start":1268,"line_end":1268,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35451,"byte_end":35498,"line_start":1269,"line_end":1269,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35503,"byte_end":35564,"line_start":1270,"line_end":1270,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35569,"byte_end":35572,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35577,"byte_end":35610,"line_start":1272,"line_end":1272,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35615,"byte_end":35673,"line_start":1273,"line_end":1273,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35678,"byte_end":35721,"line_start":1274,"line_end":1274,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35726,"byte_end":35733,"line_start":1275,"line_end":1275,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36592,"byte_end":36606,"line_start":1304,"line_end":1304,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"pub fn write_i32_into(&[i32], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":35949,"byte_end":36005,"line_start":1283,"line_end":1283,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36010,"byte_end":36013,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36018,"byte_end":36030,"line_start":1285,"line_end":1285,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36035,"byte_end":36038,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36043,"byte_end":36086,"line_start":1287,"line_end":1287,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36091,"byte_end":36094,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36099,"byte_end":36113,"line_start":1289,"line_end":1289,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36118,"byte_end":36121,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36126,"byte_end":36182,"line_start":1291,"line_end":1291,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36187,"byte_end":36190,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36195,"byte_end":36206,"line_start":1293,"line_end":1293,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36211,"byte_end":36256,"line_start":1294,"line_end":1294,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36261,"byte_end":36264,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36269,"byte_end":36297,"line_start":1296,"line_end":1296,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36302,"byte_end":36349,"line_start":1297,"line_end":1297,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36354,"byte_end":36415,"line_start":1298,"line_end":1298,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36420,"byte_end":36423,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36428,"byte_end":36461,"line_start":1300,"line_end":1300,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36466,"byte_end":36524,"line_start":1301,"line_end":1301,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36529,"byte_end":36572,"line_start":1302,"line_end":1302,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36577,"byte_end":36584,"line_start":1303,"line_end":1303,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37443,"byte_end":37457,"line_start":1332,"line_end":1332,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"pub fn write_i64_into(&[i64], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36800,"byte_end":36856,"line_start":1311,"line_end":1311,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36861,"byte_end":36864,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36869,"byte_end":36881,"line_start":1313,"line_end":1313,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36886,"byte_end":36889,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36894,"byte_end":36937,"line_start":1315,"line_end":1315,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36942,"byte_end":36945,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36950,"byte_end":36964,"line_start":1317,"line_end":1317,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36969,"byte_end":36972,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":36977,"byte_end":37033,"line_start":1319,"line_end":1319,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37038,"byte_end":37041,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37046,"byte_end":37057,"line_start":1321,"line_end":1321,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37062,"byte_end":37107,"line_start":1322,"line_end":1322,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37112,"byte_end":37115,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37120,"byte_end":37148,"line_start":1324,"line_end":1324,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37153,"byte_end":37200,"line_start":1325,"line_end":1325,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37205,"byte_end":37266,"line_start":1326,"line_end":1326,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37271,"byte_end":37274,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37279,"byte_end":37312,"line_start":1328,"line_end":1328,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37317,"byte_end":37375,"line_start":1329,"line_end":1329,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37380,"byte_end":37423,"line_start":1330,"line_end":1330,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":37428,"byte_end":37435,"line_start":1331,"line_end":1331,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39280,"byte_end":39294,"line_start":1392,"line_end":1392,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"pub fn write_f32_into(&[f32], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38540,"byte_end":38613,"line_start":1368,"line_end":1368,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38618,"byte_end":38639,"line_start":1369,"line_end":1369,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38644,"byte_end":38647,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38652,"byte_end":38664,"line_start":1371,"line_end":1371,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38669,"byte_end":38672,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38677,"byte_end":38720,"line_start":1373,"line_end":1373,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38725,"byte_end":38728,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38733,"byte_end":38747,"line_start":1375,"line_end":1375,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38752,"byte_end":38755,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38760,"byte_end":38816,"line_start":1377,"line_end":1377,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38821,"byte_end":38824,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38829,"byte_end":38840,"line_start":1379,"line_end":1379,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38845,"byte_end":38890,"line_start":1380,"line_end":1380,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38895,"byte_end":38898,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38903,"byte_end":38931,"line_start":1382,"line_end":1382,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38936,"byte_end":38994,"line_start":1383,"line_end":1383,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":38999,"byte_end":39060,"line_start":1384,"line_end":1384,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39065,"byte_end":39068,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39073,"byte_end":39108,"line_start":1386,"line_end":1386,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39113,"byte_end":39125,"line_start":1387,"line_end":1387,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39130,"byte_end":39202,"line_start":1388,"line_end":1388,"column_start":5,"column_end":77}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39207,"byte_end":39212,"line_start":1389,"line_end":1389,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39217,"byte_end":39260,"line_start":1390,"line_end":1390,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39265,"byte_end":39272,"line_start":1391,"line_end":1391,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40228,"byte_end":40242,"line_start":1423,"line_end":1423,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"pub fn write_f64_into(&[f64], &mut [u8])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 double-precision (8 bytes) floating point numbers from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39488,"byte_end":39561,"line_start":1399,"line_end":1399,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39566,"byte_end":39587,"line_start":1400,"line_end":1400,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39592,"byte_end":39595,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39600,"byte_end":39612,"line_start":1402,"line_end":1402,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39617,"byte_end":39620,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39625,"byte_end":39668,"line_start":1404,"line_end":1404,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39673,"byte_end":39676,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39681,"byte_end":39695,"line_start":1406,"line_end":1406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39700,"byte_end":39703,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39708,"byte_end":39764,"line_start":1408,"line_end":1408,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39769,"byte_end":39772,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39777,"byte_end":39788,"line_start":1410,"line_end":1410,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39793,"byte_end":39838,"line_start":1411,"line_end":1411,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39843,"byte_end":39846,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39851,"byte_end":39879,"line_start":1413,"line_end":1413,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39884,"byte_end":39942,"line_start":1414,"line_end":1414,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":39947,"byte_end":40008,"line_start":1415,"line_end":1415,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40013,"byte_end":40016,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40021,"byte_end":40056,"line_start":1417,"line_end":1417,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40061,"byte_end":40073,"line_start":1418,"line_end":1418,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40078,"byte_end":40150,"line_start":1419,"line_end":1419,"column_start":5,"column_end":77}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40155,"byte_end":40160,"line_start":1420,"line_end":1420,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40165,"byte_end":40208,"line_start":1421,"line_end":1421,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40213,"byte_end":40220,"line_start":1422,"line_end":1422,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41113,"byte_end":41127,"line_start":1451,"line_end":1451,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"pub fn from_slice_u16(&mut [u16])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 16 bit integers to a particular","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40436,"byte_end":40508,"line_start":1430,"line_end":1430,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40513,"byte_end":40528,"line_start":1431,"line_end":1431,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40533,"byte_end":40536,"line_start":1432,"line_end":1432,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40541,"byte_end":40612,"line_start":1433,"line_end":1433,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40617,"byte_end":40637,"line_start":1434,"line_end":1434,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40642,"byte_end":40645,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40650,"byte_end":40664,"line_start":1436,"line_end":1436,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40669,"byte_end":40672,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40677,"byte_end":40734,"line_start":1438,"line_end":1438,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40739,"byte_end":40742,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40747,"byte_end":40758,"line_start":1440,"line_end":1440,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40763,"byte_end":40805,"line_start":1441,"line_end":1441,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40810,"byte_end":40813,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40818,"byte_end":40851,"line_start":1443,"line_end":1443,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u16(&mut numbers);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40856,"byte_end":40900,"line_start":1444,"line_end":1444,"column_start":5,"column_end":49}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40905,"byte_end":40944,"line_start":1445,"line_end":1445,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(numbers, [5u16.swap_bytes(), 65000u16.swap_bytes()]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":40949,"byte_end":41021,"line_start":1446,"line_end":1446,"column_start":5,"column_end":77}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41026,"byte_end":41038,"line_start":1447,"line_end":1447,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(numbers, [5, 65000]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41043,"byte_end":41083,"line_start":1448,"line_end":1448,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41088,"byte_end":41093,"line_start":1449,"line_end":1449,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41098,"byte_end":41105,"line_start":1450,"line_end":1450,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41832,"byte_end":41846,"line_start":1474,"line_end":1474,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"pub fn from_slice_u32(&mut [u32])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 32 bit integers to a particular","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41155,"byte_end":41227,"line_start":1453,"line_end":1453,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41232,"byte_end":41247,"line_start":1454,"line_end":1454,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41252,"byte_end":41255,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41260,"byte_end":41331,"line_start":1456,"line_end":1456,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41336,"byte_end":41356,"line_start":1457,"line_end":1457,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41361,"byte_end":41364,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41369,"byte_end":41383,"line_start":1459,"line_end":1459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41388,"byte_end":41391,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41396,"byte_end":41453,"line_start":1461,"line_end":1461,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41458,"byte_end":41461,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41466,"byte_end":41477,"line_start":1463,"line_end":1463,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41482,"byte_end":41524,"line_start":1464,"line_end":1464,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41529,"byte_end":41532,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41537,"byte_end":41570,"line_start":1466,"line_end":1466,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u32(&mut numbers);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41575,"byte_end":41619,"line_start":1467,"line_end":1467,"column_start":5,"column_end":49}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41624,"byte_end":41663,"line_start":1468,"line_end":1468,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(numbers, [5u32.swap_bytes(), 65000u32.swap_bytes()]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41668,"byte_end":41740,"line_start":1469,"line_end":1469,"column_start":5,"column_end":77}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41745,"byte_end":41757,"line_start":1470,"line_end":1470,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(numbers, [5, 65000]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41762,"byte_end":41802,"line_start":1471,"line_end":1471,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41807,"byte_end":41812,"line_start":1472,"line_end":1472,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41817,"byte_end":41824,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42551,"byte_end":42565,"line_start":1497,"line_end":1497,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"pub fn from_slice_u64(&mut [u64])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 64 bit integers to a particular","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41874,"byte_end":41946,"line_start":1476,"line_end":1476,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41951,"byte_end":41966,"line_start":1477,"line_end":1477,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41971,"byte_end":41974,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":41979,"byte_end":42050,"line_start":1479,"line_end":1479,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42055,"byte_end":42075,"line_start":1480,"line_end":1480,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42080,"byte_end":42083,"line_start":1481,"line_end":1481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42088,"byte_end":42102,"line_start":1482,"line_end":1482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42107,"byte_end":42110,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42115,"byte_end":42172,"line_start":1484,"line_end":1484,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42177,"byte_end":42180,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42185,"byte_end":42196,"line_start":1486,"line_end":1486,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42201,"byte_end":42243,"line_start":1487,"line_end":1487,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42248,"byte_end":42251,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42256,"byte_end":42289,"line_start":1489,"line_end":1489,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u64(&mut numbers);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42294,"byte_end":42338,"line_start":1490,"line_end":1490,"column_start":5,"column_end":49}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42343,"byte_end":42382,"line_start":1491,"line_end":1491,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(numbers, [5u64.swap_bytes(), 65000u64.swap_bytes()]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42387,"byte_end":42459,"line_start":1492,"line_end":1492,"column_start":5,"column_end":77}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42464,"byte_end":42476,"line_start":1493,"line_end":1493,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(numbers, [5, 65000]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42481,"byte_end":42521,"line_start":1494,"line_end":1494,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42526,"byte_end":42531,"line_start":1495,"line_end":1495,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":42536,"byte_end":42543,"line_start":1496,"line_end":1496,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44075,"byte_end":44089,"line_start":1547,"line_end":1547,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"pub fn from_slice_i16(&mut [i16])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 16 bit integers to a particular","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43386,"byte_end":43456,"line_start":1525,"line_end":1525,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43461,"byte_end":43476,"line_start":1526,"line_end":1526,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43481,"byte_end":43484,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43489,"byte_end":43560,"line_start":1528,"line_end":1528,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43565,"byte_end":43585,"line_start":1529,"line_end":1529,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43590,"byte_end":43593,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43598,"byte_end":43612,"line_start":1531,"line_end":1531,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43617,"byte_end":43620,"line_start":1532,"line_end":1532,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43625,"byte_end":43682,"line_start":1533,"line_end":1533,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43687,"byte_end":43690,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43695,"byte_end":43706,"line_start":1535,"line_end":1535,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43711,"byte_end":43753,"line_start":1536,"line_end":1536,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43758,"byte_end":43761,"line_start":1537,"line_end":1537,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43766,"byte_end":43799,"line_start":1538,"line_end":1538,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i16(&mut numbers);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43804,"byte_end":43848,"line_start":1539,"line_end":1539,"column_start":5,"column_end":49}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43853,"byte_end":43892,"line_start":1540,"line_end":1540,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(numbers, [5i16.swap_bytes(), 65000i16.swap_bytes()]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43897,"byte_end":43969,"line_start":1541,"line_end":1541,"column_start":5,"column_end":77}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43974,"byte_end":43986,"line_start":1542,"line_end":1542,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(numbers, [5, 65000]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":43991,"byte_end":44031,"line_start":1543,"line_end":1543,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44036,"byte_end":44041,"line_start":1544,"line_end":1544,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44046,"byte_end":44053,"line_start":1545,"line_end":1545,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44058,"byte_end":44067,"line_start":1546,"line_end":1546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44957,"byte_end":44971,"line_start":1576,"line_end":1576,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"pub fn from_slice_i32(&mut [i32])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 32 bit integers to a particular","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44268,"byte_end":44338,"line_start":1554,"line_end":1554,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44343,"byte_end":44358,"line_start":1555,"line_end":1555,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44363,"byte_end":44366,"line_start":1556,"line_end":1556,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44371,"byte_end":44442,"line_start":1557,"line_end":1557,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44447,"byte_end":44467,"line_start":1558,"line_end":1558,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44472,"byte_end":44475,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44480,"byte_end":44494,"line_start":1560,"line_end":1560,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44499,"byte_end":44502,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44507,"byte_end":44564,"line_start":1562,"line_end":1562,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44569,"byte_end":44572,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44577,"byte_end":44588,"line_start":1564,"line_end":1564,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44593,"byte_end":44635,"line_start":1565,"line_end":1565,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44640,"byte_end":44643,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44648,"byte_end":44681,"line_start":1567,"line_end":1567,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i32(&mut numbers);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44686,"byte_end":44730,"line_start":1568,"line_end":1568,"column_start":5,"column_end":49}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44735,"byte_end":44774,"line_start":1569,"line_end":1569,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(numbers, [5i32.swap_bytes(), 65000i32.swap_bytes()]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44779,"byte_end":44851,"line_start":1570,"line_end":1570,"column_start":5,"column_end":77}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44856,"byte_end":44868,"line_start":1571,"line_end":1571,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(numbers, [5, 65000]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44873,"byte_end":44913,"line_start":1572,"line_end":1572,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44918,"byte_end":44923,"line_start":1573,"line_end":1573,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44928,"byte_end":44935,"line_start":1574,"line_end":1574,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":44940,"byte_end":44949,"line_start":1575,"line_end":1575,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45839,"byte_end":45853,"line_start":1605,"line_end":1605,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"pub fn from_slice_i64(&mut [i64])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 64 bit integers to a particular","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45150,"byte_end":45220,"line_start":1583,"line_end":1583,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45225,"byte_end":45240,"line_start":1584,"line_end":1584,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45245,"byte_end":45248,"line_start":1585,"line_end":1585,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45253,"byte_end":45324,"line_start":1586,"line_end":1586,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45329,"byte_end":45349,"line_start":1587,"line_end":1587,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45354,"byte_end":45357,"line_start":1588,"line_end":1588,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45362,"byte_end":45376,"line_start":1589,"line_end":1589,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45381,"byte_end":45384,"line_start":1590,"line_end":1590,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45389,"byte_end":45446,"line_start":1591,"line_end":1591,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45451,"byte_end":45454,"line_start":1592,"line_end":1592,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45459,"byte_end":45470,"line_start":1593,"line_end":1593,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45475,"byte_end":45517,"line_start":1594,"line_end":1594,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45522,"byte_end":45525,"line_start":1595,"line_end":1595,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45530,"byte_end":45563,"line_start":1596,"line_end":1596,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i64(&mut numbers);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45568,"byte_end":45612,"line_start":1597,"line_end":1597,"column_start":5,"column_end":49}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45617,"byte_end":45656,"line_start":1598,"line_end":1598,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(numbers, [5i64.swap_bytes(), 65000i64.swap_bytes()]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45661,"byte_end":45733,"line_start":1599,"line_end":1599,"column_start":5,"column_end":77}},{"value":"/ } else {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45738,"byte_end":45750,"line_start":1600,"line_end":1600,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(numbers, [5, 65000]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45755,"byte_end":45795,"line_start":1601,"line_end":1601,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45800,"byte_end":45805,"line_start":1602,"line_end":1602,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45810,"byte_end":45817,"line_start":1603,"line_end":1603,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":45822,"byte_end":45831,"line_start":1604,"line_end":1604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47232,"byte_end":47246,"line_start":1649,"line_end":1649,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"pub fn from_slice_f32(&mut [f32])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":46990,"byte_end":47065,"line_start":1644,"line_end":1644,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47070,"byte_end":47115,"line_start":1645,"line_end":1645,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47120,"byte_end":47123,"line_start":1646,"line_end":1646,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47128,"byte_end":47199,"line_start":1647,"line_end":1647,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47204,"byte_end":47224,"line_start":1648,"line_end":1648,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47516,"byte_end":47530,"line_start":1656,"line_end":1656,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"pub fn from_slice_f64(&mut [f64])","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47274,"byte_end":47349,"line_start":1651,"line_end":1651,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47354,"byte_end":47399,"line_start":1652,"line_end":1652,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47404,"byte_end":47407,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47412,"byte_end":47483,"line_start":1654,"line_end":1654,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47488,"byte_end":47508,"line_start":1655,"line_end":1655,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":237},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48041,"byte_end":48050,"line_start":1676,"line_end":1676,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"pub enum BigEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"/ Defines big-endian serialization.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47556,"byte_end":47593,"line_start":1659,"line_end":1659,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47594,"byte_end":47597,"line_start":1660,"line_end":1660,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47598,"byte_end":47672,"line_start":1661,"line_end":1661,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47673,"byte_end":47688,"line_start":1662,"line_end":1662,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47689,"byte_end":47692,"line_start":1663,"line_end":1663,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47693,"byte_end":47707,"line_start":1664,"line_end":1664,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47708,"byte_end":47711,"line_start":1665,"line_end":1665,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in big endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47712,"byte_end":47765,"line_start":1666,"line_end":1666,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47766,"byte_end":47769,"line_start":1667,"line_end":1667,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47770,"byte_end":47781,"line_start":1668,"line_end":1668,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47782,"byte_end":47824,"line_start":1669,"line_end":1669,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47825,"byte_end":47828,"line_start":1670,"line_end":1670,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47829,"byte_end":47854,"line_start":1671,"line_end":1671,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47855,"byte_end":47901,"line_start":1672,"line_end":1672,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(1_000_000, BigEndian::read_u32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47902,"byte_end":47955,"line_start":1673,"line_end":1673,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":47956,"byte_end":47963,"line_start":1674,"line_end":1674,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":182},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48249,"byte_end":48251,"line_start":1687,"line_end":1687,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`BigEndian`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48161,"byte_end":48196,"line_start":1684,"line_end":1684,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48197,"byte_end":48200,"line_start":1685,"line_end":1685,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48201,"byte_end":48239,"line_start":1686,"line_end":1686,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":256},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48766,"byte_end":48778,"line_start":1706,"line_end":1706,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"pub enum LittleEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"/ Defines little-endian serialization.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48266,"byte_end":48306,"line_start":1689,"line_end":1689,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48307,"byte_end":48310,"line_start":1690,"line_end":1690,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48311,"byte_end":48385,"line_start":1691,"line_end":1691,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48386,"byte_end":48401,"line_start":1692,"line_end":1692,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48402,"byte_end":48405,"line_start":1693,"line_end":1693,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48406,"byte_end":48420,"line_start":1694,"line_end":1694,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48421,"byte_end":48424,"line_start":1695,"line_end":1695,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48425,"byte_end":48481,"line_start":1696,"line_end":1696,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48482,"byte_end":48485,"line_start":1697,"line_end":1697,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48486,"byte_end":48497,"line_start":1698,"line_end":1698,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48498,"byte_end":48543,"line_start":1699,"line_end":1699,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48544,"byte_end":48547,"line_start":1700,"line_end":1700,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48548,"byte_end":48573,"line_start":1701,"line_end":1701,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48574,"byte_end":48623,"line_start":1702,"line_end":1702,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48624,"byte_end":48680,"line_start":1703,"line_end":1703,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48681,"byte_end":48688,"line_start":1704,"line_end":1704,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":185},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48995,"byte_end":48997,"line_start":1717,"line_end":1717,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`LittleEndian`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48898,"byte_end":48936,"line_start":1714,"line_end":1714,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48937,"byte_end":48940,"line_start":1715,"line_end":1715,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48941,"byte_end":48985,"line_start":1716,"line_end":1716,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":186},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49724,"byte_end":49737,"line_start":1743,"line_end":1743,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[{"value":"/ Defines network byte order serialization.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49015,"byte_end":49060,"line_start":1719,"line_end":1719,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49061,"byte_end":49064,"line_start":1720,"line_end":1720,"column_start":1,"column_end":4}},{"value":"/ Network byte order is defined by [RFC 1700][1] to be big-endian, and is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49065,"byte_end":49140,"line_start":1721,"line_end":1721,"column_start":1,"column_end":76}},{"value":"/ referred to in several protocol specifications.  This type is an alias of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49141,"byte_end":49218,"line_start":1722,"line_end":1722,"column_start":1,"column_end":78}},{"value":"/ [`BigEndian`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49219,"byte_end":49237,"line_start":1723,"line_end":1723,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49238,"byte_end":49241,"line_start":1724,"line_end":1724,"column_start":1,"column_end":4}},{"value":"/ [1]: https://tools.ietf.org/html/rfc1700","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49242,"byte_end":49286,"line_start":1725,"line_end":1725,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49287,"byte_end":49290,"line_start":1726,"line_end":1726,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49291,"byte_end":49365,"line_start":1727,"line_end":1727,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49366,"byte_end":49381,"line_start":1728,"line_end":1728,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49382,"byte_end":49385,"line_start":1729,"line_end":1729,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49386,"byte_end":49400,"line_start":1730,"line_end":1730,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49401,"byte_end":49404,"line_start":1731,"line_end":1731,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49405,"byte_end":49458,"line_start":1732,"line_end":1732,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49459,"byte_end":49462,"line_start":1733,"line_end":1733,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49463,"byte_end":49474,"line_start":1734,"line_end":1734,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, NetworkEndian, BigEndian};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49475,"byte_end":49532,"line_start":1735,"line_end":1735,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49533,"byte_end":49536,"line_start":1736,"line_end":1736,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49537,"byte_end":49562,"line_start":1737,"line_end":1737,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -50_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49563,"byte_end":49607,"line_start":1738,"line_end":1738,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(-50_000, NetworkEndian::read_i16(&buf));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49608,"byte_end":49663,"line_start":1739,"line_end":1739,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49664,"byte_end":49671,"line_start":1740,"line_end":1740,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49672,"byte_end":49675,"line_start":1741,"line_end":1741,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49676,"byte_end":49714,"line_start":1742,"line_end":1742,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":187},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":50051,"byte_end":50063,"line_start":1754,"line_end":1754,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"/ Defines system native-endian serialization.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49752,"byte_end":49799,"line_start":1745,"line_end":1745,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49800,"byte_end":49803,"line_start":1746,"line_end":1746,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49804,"byte_end":49878,"line_start":1747,"line_end":1747,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49879,"byte_end":49894,"line_start":1748,"line_end":1748,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49895,"byte_end":49898,"line_start":1749,"line_end":1749,"column_start":1,"column_end":4}},{"value":"/ On this platform, this is an alias for [`LittleEndian`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49899,"byte_end":49959,"line_start":1750,"line_end":1750,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49960,"byte_end":49963,"line_start":1751,"line_end":1751,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":49964,"byte_end":50008,"line_start":1752,"line_end":1752,"column_start":1,"column_end":45}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":50009,"byte_end":50041,"line_start":1753,"line_end":1753,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130947,"byte_end":130948,"line_start":972,"line_end":972,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":140321,"byte_end":140322,"line_start":1262,"line_end":1262,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4410,"byte_end":4422,"line_start":173,"line_end":173,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4453,"byte_end":4462,"line_start":174,"line_end":174,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48072,"byte_end":48081,"line_start":1678,"line_end":1678,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48800,"byte_end":48812,"line_start":1708,"line_end":1708,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":52304,"byte_end":52313,"line_start":1834,"line_end":1834,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":58033,"byte_end":58045,"line_start":2049,"line_end":2049,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":100923,"byte_end":100927,"line_start":28,"line_end":28,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3068},"to":{"krate":0,"index":17}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":130947,"byte_end":130948,"line_start":972,"line_end":972,"column_start":45,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":79},"to":{"krate":0,"index":17}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":131758,"byte_end":131763,"line_start":996,"line_end":996,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":80}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/io.rs","byte_start":140321,"byte_end":140322,"line_start":1262,"line_end":1262,"column_start":47,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":120},"to":{"krate":0,"index":80}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4410,"byte_end":4422,"line_start":173,"line_end":173,"column_start":28,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":256},"to":{"krate":0,"index":128}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":4453,"byte_end":4462,"line_start":174,"line_end":174,"column_start":28,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":237},"to":{"krate":0,"index":128}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5644,"byte_end":5649,"line_start":213,"line_end":213,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":1732},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5652,"byte_end":5656,"line_start":213,"line_end":213,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5659,"byte_end":5664,"line_start":213,"line_end":213,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":6555},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5667,"byte_end":5674,"line_start":213,"line_end":213,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2022},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5677,"byte_end":5679,"line_start":213,"line_end":213,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1765},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5682,"byte_end":5686,"line_start":213,"line_end":213,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":6743},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5689,"byte_end":5692,"line_start":213,"line_end":213,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1786},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5695,"byte_end":5704,"line_start":213,"line_end":213,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":1760},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5707,"byte_end":5717,"line_start":213,"line_end":213,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":1797},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":5733,"byte_end":5739,"line_start":214,"line_end":214,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":128},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48072,"byte_end":48081,"line_start":1678,"line_end":1678,"column_start":18,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":237},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":48800,"byte_end":48812,"line_start":1708,"line_end":1708,"column_start":18,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":256},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":52304,"byte_end":52313,"line_start":1834,"line_end":1834,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":237},"to":{"krate":0,"index":131}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs","byte_start":58033,"byte_end":58045,"line_start":2049,"line_end":2049,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":256},"to":{"krate":0,"index":131}}]}