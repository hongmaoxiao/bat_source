{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2","program":"/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bincode","/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=c1e09c6bbc3f4b99","-C","extra-filename=-c1e09c6bbc3f4b99","--out-dir","/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","-L","dependency=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","--extern","byteorder=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libbyteorder-bc9970f9238f86e1.rmeta","--extern","serde=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libserde-96168f66c94fdab2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libbincode-c1e09c6bbc3f4b99.rmeta"},"prelude":{"crate_id":{"name":"bincode","disambiguator":[14417065922521294587,5576534350403903112]},"crate_root":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src","external_crates":[{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":16,"id":{"name":"byteorder","disambiguator":[2273452714677096099,13008791525014639813]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","num":17,"id":{"name":"serde","disambiguator":[3387539804157223919,6064402187243503805]}}],"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":0,"byte_end":6688,"line_start":1,"line_end":200,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":339},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43060,"byte_end":43072,"line_start":12,"line_end":12,"column_start":20,"column_end":32},"alias_span":null,"name":"Deserializer","value":"","parent":{"krate":0,"index":477}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43095,"byte_end":43105,"line_start":14,"line_end":14,"column_start":21,"column_end":31},"alias_span":null,"name":"Serializer","value":"","parent":{"krate":0,"index":477}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1509,"byte_end":1520,"line_start":48,"line_end":48,"column_start":24,"column_end":35},"alias_span":null,"name":"SliceReader","value":"","parent":{"krate":0,"index":537}},{"kind":"Use","ref_id":{"krate":0,"index":290},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1522,"byte_end":1533,"line_start":48,"line_end":48,"column_start":37,"column_end":48},"alias_span":null,"name":"BincodeRead","value":"","parent":{"krate":0,"index":537}},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1535,"byte_end":1543,"line_start":48,"line_end":48,"column_start":50,"column_end":58},"alias_span":null,"name":"IoReader","value":"","parent":{"krate":0,"index":537}},{"kind":"Use","ref_id":{"krate":0,"index":608},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1597,"byte_end":1606,"line_start":53,"line_end":53,"column_start":20,"column_end":29},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":498},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1608,"byte_end":1613,"line_start":53,"line_end":53,"column_start":31,"column_end":36},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":496},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1615,"byte_end":1621,"line_start":53,"line_end":53,"column_start":38,"column_end":44},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":524},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1623,"byte_end":1638,"line_start":53,"line_end":53,"column_start":46,"column_end":61},"alias_span":null,"name":"serialized_size","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1640,"byte_end":1663,"line_start":53,"line_end":53,"column_start":63,"column_end":86},"alias_span":null,"name":"serialized_size_bounded","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":0,"byte_end":6688,"line_start":1,"line_end":200,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":271},{"krate":0,"index":477},{"krate":0,"index":537},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":563},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":634},{"krate":0,"index":639},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":644},{"krate":0,"index":642},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582}],"decl_id":null,"docs":" `bincode` is a crate for encoding and decoding using a tiny binary\n serialization strategy.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/ `bincode` is a crate for encoding and decoding using a tiny binary","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":24,"byte_end":94,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ serialization strategy.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":95,"byte_end":122,"line_start":4,"line_end":4,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":123,"byte_end":126,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are simple functions for encoding to `Vec<u8>` and decoding from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":127,"byte_end":201,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ `&[u8]`, but the meat of the library is the `serialize_into` and `deserialize_from`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":202,"byte_end":289,"line_start":7,"line_end":7,"column_start":1,"column_end":88}},{"value":"/ functions which respectively allow encoding into any `std::io::Write`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":290,"byte_end":363,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ or decode from any `std::io::Read`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":364,"byte_end":403,"line_start":9,"line_end":9,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":404,"byte_end":407,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Modules","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":408,"byte_end":422,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/ Until \"default type parameters\" lands, we have an extra module called `endian_choice`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":423,"byte_end":512,"line_start":12,"line_end":12,"column_start":1,"column_end":90}},{"value":"/ that duplicates all of the core bincode functionality but with the option to choose","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":513,"byte_end":600,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/ which endianness the integers are encoded using.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":601,"byte_end":653,"line_start":14,"line_end":14,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":654,"byte_end":657,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The default endianness is little.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":658,"byte_end":695,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":696,"byte_end":699,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ### Using Basic Functions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":700,"byte_end":729,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":730,"byte_end":733,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":734,"byte_end":745,"line_start":20,"line_end":20,"column_start":1,"column_end":12}},{"value":"/ extern crate bincode;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":746,"byte_end":771,"line_start":21,"line_end":21,"column_start":1,"column_end":26}},{"value":"/ use bincode::{serialize, deserialize, Bounded};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":772,"byte_end":823,"line_start":22,"line_end":22,"column_start":1,"column_end":52}},{"value":"/ fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":824,"byte_end":839,"line_start":23,"line_end":23,"column_start":1,"column_end":16}},{"value":"/     // The object that we will serialize.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":840,"byte_end":885,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"/     let target = Some(\"hello world\".to_string());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":886,"byte_end":939,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/     // The maximum size of the encoded message.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":940,"byte_end":991,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/     let limit = Bounded(20);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":992,"byte_end":1024,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1025,"byte_end":1028,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     let encoded: Vec<u8>        = serialize(&target, limit).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1029,"byte_end":1102,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/     let decoded: Option<String> = deserialize(&encoded[..]).unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1103,"byte_end":1176,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/     assert_eq!(target, decoded);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1177,"byte_end":1213,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1214,"byte_end":1219,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1220,"byte_end":1227,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"crate_name = \"bincode\"","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1229,"byte_end":1255,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"crate_type = \"rlib\"","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1256,"byte_end":1279,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"crate_type = \"dylib\"","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1280,"byte_end":1304,"line_start":37,"line_end":37,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7160,"byte_end":7170,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::ser::Serializer","value":"Serializer {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22}],"decl_id":null,"docs":" An Serializer that encodes values directly into a Writer.","sig":null,"attributes":[{"value":"/ An Serializer that encodes values directly into a Writer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":6888,"byte_end":6949,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":6950,"byte_end":6953,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The specified byte-order will impact the endianness that is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":6954,"byte_end":7017,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ used during the encoding.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7018,"byte_end":7047,"line_start":15,"line_end":15,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7048,"byte_end":7051,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This struct should not be used often.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7052,"byte_end":7093,"line_start":17,"line_end":17,"column_start":1,"column_end":42}},{"value":"/ For most cases, prefer the `encode_into` function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7094,"byte_end":7148,"line_start":18,"line_end":18,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7355,"byte_end":7358,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Serializer<W, E>>::new","value":"pub fn new(W) -> Serializer<W, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Serializer with the given `Write`r.\n","sig":null,"attributes":[{"value":"/ Creates a new Serializer with the given `Write`r.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7290,"byte_end":7343,"line_start":25,"line_end":25,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":71},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":12412,"byte_end":12423,"line_start":208,"line_end":208,"column_start":12,"column_end":23},"name":"SizeChecker","qualname":"::ser::SizeChecker","value":"SizeChecker { size_limit }","parent":null,"children":[{"krate":0,"index":73}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":73},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":12448,"byte_end":12458,"line_start":209,"line_end":209,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::ser::SizeChecker::size_limit","value":"S","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":12513,"byte_end":12516,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"new","qualname":"<SizeChecker<S>>::new","value":"pub fn new(S) -> SizeChecker<S>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":124},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":17265,"byte_end":17273,"line_start":398,"line_end":398,"column_start":12,"column_end":20},"name":"Compound","qualname":"::ser::Compound","value":"Compound {  }","parent":null,"children":[{"krate":0,"index":128}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":194},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":20411,"byte_end":20423,"line_start":565,"line_end":565,"column_start":12,"column_end":24},"name":"SizeCompound","qualname":"::ser::SizeCompound","value":"SizeCompound {  }","parent":null,"children":[{"krate":0,"index":197}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":290},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38230,"byte_end":38241,"line_start":7,"line_end":7,"column_start":11,"column_end":22},"name":"BincodeRead","qualname":"::de::read::BincodeRead","value":"BincodeRead<'storage>: io::Read + ::private::Sealed","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":295}],"decl_id":null,"docs":" A byte-oriented reading trait that is specialized for\n slices and generic readers.\n","sig":null,"attributes":[{"value":"/ A byte-oriented reading trait that is specialized for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38130,"byte_end":38187,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ slices and generic readers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38188,"byte_end":38219,"line_start":6,"line_end":6,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38310,"byte_end":38326,"line_start":9,"line_end":9,"column_start":8,"column_end":24},"name":"forward_read_str","qualname":"::de::read::BincodeRead::forward_read_str","value":"pub fn forward_read_str<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38466,"byte_end":38481,"line_start":14,"line_end":14,"column_start":8,"column_end":23},"name":"get_byte_buffer","qualname":"::de::read::BincodeRead::get_byte_buffer","value":"pub fn get_byte_buffer(&mut Self, usize) -> Result<Vec<u8>>","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38555,"byte_end":38573,"line_start":17,"line_end":17,"column_start":8,"column_end":26},"name":"forward_read_bytes","qualname":"::de::read::BincodeRead::forward_read_bytes","value":"pub fn forward_read_bytes<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":297},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38749,"byte_end":38760,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"SliceReader","qualname":"::de::read::SliceReader","value":"SliceReader {  }","parent":null,"children":[{"krate":0,"index":299}],"decl_id":null,"docs":" A BincodeRead implementation for byte slices\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for byte slices","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38689,"byte_end":38737,"line_start":22,"line_end":22,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":300},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38863,"byte_end":38871,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"IoReader","qualname":"::de::read::IoReader","value":"IoReader {  }","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303}],"decl_id":null,"docs":" A BincodeRead implementation for io::Readers\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for io::Readers","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38803,"byte_end":38851,"line_start":27,"line_end":27,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39005,"byte_end":39008,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<SliceReader>::new","value":"pub fn new(&'storage [u8]) -> SliceReader","parent":null,"children":[],"decl_id":null,"docs":" Constructs a slice reader\n","sig":null,"attributes":[{"value":"/ Constructs a slice reader","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38964,"byte_end":38993,"line_start":34,"line_end":34,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39173,"byte_end":39176,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<IoReader<R>>::new","value":"pub fn new(R) -> IoReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an IoReadReader\n","sig":null,"attributes":[{"value":"/ Constructs an IoReadReader","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39131,"byte_end":39161,"line_start":41,"line_end":41,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":339},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25278,"byte_end":25290,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::de::Deserializer","value":"Deserializer {  }","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"decl_id":null,"docs":" A Deserializer that reads bytes from a buffer.","sig":null,"attributes":[{"value":"/ A Deserializer that reads bytes from a buffer.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":24811,"byte_end":24861,"line_start":14,"line_end":14,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":24862,"byte_end":24865,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This struct should rarely be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":24866,"byte_end":24904,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/ In most cases, prefer the `decode_from` function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":24905,"byte_end":24958,"line_start":17,"line_end":17,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":24959,"byte_end":24962,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The ByteOrder that is chosen will impact the endianness that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":24963,"byte_end":25027,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/ is used to read integers out of the reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25028,"byte_end":25075,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25076,"byte_end":25079,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25080,"byte_end":25098,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/ let d = Deserializer::new(&mut some_reader, SizeLimit::new());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25099,"byte_end":25165,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/ serde::Deserialize::deserialize(&mut deserializer);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25166,"byte_end":25221,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/ let bytes_read = d.bytes_read();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25222,"byte_end":25258,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25259,"byte_end":25266,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25560,"byte_end":25563,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Deserializer<R, S, E>>::new","value":"pub fn new(R, S) -> Deserializer<R, S, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Deserializer with a given `Read`er and a size_limit.\n","sig":null,"attributes":[{"value":"/ Creates a new Deserializer with a given `Read`er and a size_limit.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25478,"byte_end":25548,"line_start":34,"line_end":34,"column_start":5,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":477},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::internal","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":608},{"krate":0,"index":632},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":517},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":533}],"decl_id":null,"docs":" A collection of serialization and deserialization functions\n that use the `serde` crate for the serializable and deserializable\n implementation.\n","sig":null,"attributes":[{"value":"/ A collection of serialization and deserialization functions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":42705,"byte_end":42768,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/ that use the `serde` crate for the serializable and deserializable","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":42769,"byte_end":42839,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/ implementation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":42840,"byte_end":42859,"line_start":3,"line_end":3,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":496},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43238,"byte_end":43244,"line_start":21,"line_end":21,"column_start":10,"column_end":16},"name":"Result","qualname":"::internal::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a serialization or deserialization operation.\n","sig":null,"attributes":[{"value":"/ The result of a serialization or deserialization operation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43165,"byte_end":43228,"line_start":20,"line_end":20,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":498},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43344,"byte_end":43349,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Error","qualname":"::internal::Error","value":"Box<ErrorKind>","parent":null,"children":[],"decl_id":null,"docs":" An error that can be produced during (de)serializing.\n","sig":null,"attributes":[{"value":"/ An error that can be produced during (de)serializing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43277,"byte_end":43334,"line_start":23,"line_end":23,"column_start":1,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":609},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43645,"byte_end":43647,"line_start":31,"line_end":31,"column_start":5,"column_end":7},"name":"Io","qualname":"::internal::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" If the error stems from the reader/writer that is being used\n during (de)serialization, that error will be stored and returned here.\n","sig":null,"attributes":[{"value":"/ If the error stems from the reader/writer that is being used","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43497,"byte_end":43561,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"/ during (de)serialization, that error will be stored and returned here.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43566,"byte_end":43640,"line_start":30,"line_end":30,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":612},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43757,"byte_end":43776,"line_start":33,"line_end":33,"column_start":5,"column_end":24},"name":"InvalidUtf8Encoding","qualname":"::internal::ErrorKind::InvalidUtf8Encoding","value":"ErrorKind::InvalidUtf8Encoding(Utf8Error)","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a string that is not valid utf8\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a string that is not valid utf8","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43664,"byte_end":43752,"line_start":32,"line_end":32,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":615},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43911,"byte_end":43930,"line_start":36,"line_end":36,"column_start":5,"column_end":24},"name":"InvalidBoolEncoding","qualname":"::internal::ErrorKind::InvalidBoolEncoding","value":"ErrorKind::InvalidBoolEncoding(u8)","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a bool that was\n not encoded as either a 1 or a 0\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a bool that was","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43793,"byte_end":43865,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ not encoded as either a 1 or a 0","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43870,"byte_end":43906,"line_start":35,"line_end":35,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":618},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44043,"byte_end":44062,"line_start":38,"line_end":38,"column_start":5,"column_end":24},"name":"InvalidCharEncoding","qualname":"::internal::ErrorKind::InvalidCharEncoding","value":"ErrorKind::InvalidCharEncoding","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a char that is not in the correct format.\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a char that is not in the correct format.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43940,"byte_end":44038,"line_start":37,"line_end":37,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":620},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44191,"byte_end":44209,"line_start":41,"line_end":41,"column_start":5,"column_end":23},"name":"InvalidTagEncoding","qualname":"::internal::ErrorKind::InvalidTagEncoding","value":"ErrorKind::InvalidTagEncoding(usize)","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize the tag of an enum that is\n not in the expected ranges\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize the tag of an enum that is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44068,"byte_end":44151,"line_start":39,"line_end":39,"column_start":5,"column_end":88}},{"value":"/ not in the expected ranges","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44156,"byte_end":44186,"line_start":40,"line_end":40,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":623},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44351,"byte_end":44377,"line_start":44,"line_end":44,"column_start":5,"column_end":31},"name":"DeserializeAnyNotSupported","qualname":"::internal::ErrorKind::DeserializeAnyNotSupported","value":"ErrorKind::DeserializeAnyNotSupported","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Serde has a deserialize_any method that lets the format hint to the\n object which route to take in deserializing.\n","sig":null,"attributes":[{"value":"/ Serde has a deserialize_any method that lets the format hint to the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44222,"byte_end":44293,"line_start":42,"line_end":42,"column_start":5,"column_end":76}},{"value":"/ object which route to take in deserializing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44298,"byte_end":44346,"line_start":43,"line_end":43,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":625},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44493,"byte_end":44502,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"SizeLimit","qualname":"::internal::ErrorKind::SizeLimit","value":"ErrorKind::SizeLimit","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" If (de)serializing a message takes more than the provided size limit, this\n error is returned.\n","sig":null,"attributes":[{"value":"/ If (de)serializing a message takes more than the provided size limit, this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44383,"byte_end":44461,"line_start":45,"line_end":45,"column_start":5,"column_end":83}},{"value":"/ error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44466,"byte_end":44488,"line_start":46,"line_end":46,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":627},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44585,"byte_end":44607,"line_start":49,"line_end":49,"column_start":5,"column_end":27},"name":"SequenceMustHaveLength","qualname":"::internal::ErrorKind::SequenceMustHaveLength","value":"ErrorKind::SequenceMustHaveLength","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Bincode can not encode sequences of unknown length (like iterators).\n","sig":null,"attributes":[{"value":"/ Bincode can not encode sequences of unknown length (like iterators).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44508,"byte_end":44580,"line_start":48,"line_end":48,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":629},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44656,"byte_end":44662,"line_start":51,"line_end":51,"column_start":5,"column_end":11},"name":"Custom","qualname":"::internal::ErrorKind::Custom","value":"ErrorKind::Custom(String)","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" A custom error message from Serde.\n","sig":null,"attributes":[{"value":"/ A custom error message from Serde.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44613,"byte_end":44651,"line_start":50,"line_end":50,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":608},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43481,"byte_end":43490,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::internal::ErrorKind","value":"pub enum ErrorKind {\n\n    /// If the error stems from the reader/writer that is being used\n    /// during (de)serialization, that error will be stored and returned here.\n    Io(io::Error),\n\n    /// Returned if the deserializer attempts to deserialize a string that is not valid utf8\n    InvalidUtf8Encoding(Utf8Error),\n\n    /// Returned if the deserializer attempts to deserialize a bool that was\n    /// not encoded as either a 1 or a 0\n    InvalidBoolEncoding(u8),\n\n    /// Returned if the deserializer attempts to deserialize a char that is not in the correct format.\n    InvalidCharEncoding,\n\n    /// Returned if the deserializer attempts to deserialize the tag of an enum that is\n    /// not in the expected ranges\n    InvalidTagEncoding(usize),\n\n    /// Serde has a deserialize_any method that lets the format hint to the\n    /// object which route to take in deserializing.\n    DeserializeAnyNotSupported,\n\n    /// If (de)serializing a message takes more than the provided size limit, this\n    /// error is returned.\n    SizeLimit,\n\n    /// Bincode can not encode sequences of unknown length (like iterators).\n    SequenceMustHaveLength,\n\n    /// A custom error message from Serde.\n    Custom(String),\n}","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629}],"decl_id":null,"docs":" The kind of error that can be produced during a serialization or deserialization.\n","sig":null,"attributes":[{"value":"/ The kind of error that can be produced during a serialization or deserialization.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":43369,"byte_end":43454,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48140,"byte_end":48154,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"serialize_into","qualname":"::internal::serialize_into","value":"pub fn serialize_into<W, T: ?Sized, S, E>(W, &T, S) -> Result<()> where\nW: Write, T: serde::Serialize, S: SizeLimit, E: ByteOrder","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer`.","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47756,"byte_end":47806,"line_start":135,"line_end":135,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47807,"byte_end":47810,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ If the serialization would take more bytes than allowed by `size_limit`, an error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47811,"byte_end":47896,"line_start":137,"line_end":137,"column_start":1,"column_end":86}},{"value":"/ is returned and *no bytes* will be written into the `Writer`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47897,"byte_end":47962,"line_start":138,"line_end":138,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47963,"byte_end":47966,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error` (other than SizeLimit), assume that the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47967,"byte_end":48037,"line_start":140,"line_end":140,"column_start":1,"column_end":71}},{"value":"/ writer is in an invalid state, as writing could bail out in the middle of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48038,"byte_end":48115,"line_start":141,"line_end":141,"column_start":1,"column_end":78}},{"value":"/ serializing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48116,"byte_end":48132,"line_start":142,"line_end":142,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48757,"byte_end":48766,"line_start":164,"line_end":164,"column_start":8,"column_end":17},"name":"serialize","qualname":"::internal::serialize","value":"pub fn serialize<T: ?Sized, S, E>(&T, S) -> Result<Vec<u8>> where\nT: serde::Serialize, S: SizeLimit, E: ByteOrder","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes.","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48583,"byte_end":48642,"line_start":160,"line_end":160,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48643,"byte_end":48646,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ If the serialization would take more bytes than allowed by `size_limit`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48647,"byte_end":48723,"line_start":162,"line_end":162,"column_start":1,"column_end":77}},{"value":"/ an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":48724,"byte_end":48749,"line_start":163,"line_end":163,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50012,"byte_end":50027,"line_start":211,"line_end":211,"column_start":8,"column_end":23},"name":"serialized_size","qualname":"::internal::serialized_size","value":"pub fn serialized_size<T: ?Sized>(&T) -> u64 where T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using bincode.","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using bincode.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":49789,"byte_end":49862,"line_start":207,"line_end":207,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":49863,"byte_end":49866,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ This is used internally as part of the check for encode_into, but it can","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":49867,"byte_end":49943,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ be useful for preallocating buffers if thats your style.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":49944,"byte_end":50004,"line_start":210,"line_end":210,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50571,"byte_end":50594,"line_start":231,"line_end":231,"column_start":8,"column_end":31},"name":"serialized_size_bounded","qualname":"::internal::serialized_size_bounded","value":"pub fn serialized_size_bounded<T: ?Sized>(&T, u64) -> Option<u64> where\nT: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Given a maximum size limit, check how large an object would be if it\n were to be serialized.","sig":null,"attributes":[{"value":"/ Given a maximum size limit, check how large an object would be if it","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50311,"byte_end":50383,"line_start":226,"line_end":226,"column_start":1,"column_end":73}},{"value":"/ were to be serialized.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50384,"byte_end":50410,"line_start":227,"line_end":227,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50411,"byte_end":50414,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ If it can be serialized in `max` or fewer bytes, that number will be returned","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50415,"byte_end":50496,"line_start":229,"line_end":229,"column_start":1,"column_end":82}},{"value":"/ inside `Some`.  If it goes over bounds, then None is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50497,"byte_end":50563,"line_start":230,"line_end":230,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51426,"byte_end":51442,"line_start":257,"line_end":257,"column_start":8,"column_end":24},"name":"deserialize_from","qualname":"::internal::deserialize_from","value":"pub fn deserialize_from<R, T, S, E>(R, S) -> Result<T> where R: Read,\nT: serde::de::DeserializeOwned, S: SizeLimit, E: ByteOrder","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er.","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":50953,"byte_end":51005,"line_start":248,"line_end":248,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51006,"byte_end":51009,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ If the provided `SizeLimit` is reached, the deserialization will bail immediately.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51010,"byte_end":51096,"line_start":250,"line_end":250,"column_start":1,"column_end":87}},{"value":"/ A SizeLimit can help prevent an attacker from flooding your server with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51097,"byte_end":51172,"line_start":251,"line_end":251,"column_start":1,"column_end":76}},{"value":"/ a neverending stream of values that runs your server out of memory.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51173,"byte_end":51244,"line_start":252,"line_end":252,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51245,"byte_end":51248,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, assume that the buffer that you passed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51249,"byte_end":51319,"line_start":254,"line_end":254,"column_start":1,"column_end":71}},{"value":"/ in is in an invalid state, as the error could be returned during any point","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51320,"byte_end":51398,"line_start":255,"line_end":255,"column_start":1,"column_end":79}},{"value":"/ in the reading.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51399,"byte_end":51418,"line_start":256,"line_end":256,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51981,"byte_end":51992,"line_start":273,"line_end":273,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::internal::deserialize","value":"pub fn deserialize<'a, T, E: ByteOrder>(&'a [u8]) -> Result<T> where\nT: serde::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an object.","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51774,"byte_end":51823,"line_start":269,"line_end":269,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51824,"byte_end":51827,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ This method does not have a size-limit because if you already have the bytes","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51828,"byte_end":51908,"line_start":271,"line_end":271,"column_start":1,"column_end":81}},{"value":"/ in memory, then you don't gain anything by having a limiter.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":51909,"byte_end":51973,"line_start":272,"line_end":272,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":537},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1410,"byte_end":1420,"line_start":46,"line_end":46,"column_start":9,"column_end":19},"name":"read_types","qualname":"::read_types","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"decl_id":null,"docs":" The types that the deserializer uses for optimizations\n","sig":null,"attributes":[{"value":"/ The types that the deserializer uses for optimizations","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1427,"byte_end":1485,"line_start":47,"line_end":47,"column_start":5,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":551},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1728,"byte_end":1740,"line_start":56,"line_end":56,"column_start":10,"column_end":22},"name":"Deserializer","qualname":"::Deserializer","value":"internal::Deserializer<W, S, byteorder::LittleEndian>","parent":null,"children":[],"decl_id":null,"docs":" A Deserializer that uses LittleEndian byteorder\n","sig":null,"attributes":[{"value":"/ A Deserializer that uses LittleEndian byteorder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1667,"byte_end":1718,"line_start":55,"line_end":55,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":554},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1863,"byte_end":1873,"line_start":58,"line_end":58,"column_start":10,"column_end":20},"name":"Serializer","qualname":"::Serializer","value":"internal::Serializer<W, byteorder::LittleEndian>","parent":null,"children":[],"decl_id":null,"docs":" A Serializer that uses LittleEndian byteorder\n","sig":null,"attributes":[{"value":"/ A Serializer that uses LittleEndian byteorder","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1804,"byte_end":1853,"line_start":57,"line_end":57,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2137,"byte_end":2148,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::deserialize","value":"pub fn deserialize<'a, T>(&'a [u8]) -> internal::Result<T> where\nT: serde_crate::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an object.","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an object.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1930,"byte_end":1979,"line_start":60,"line_end":60,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1980,"byte_end":1983,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This method does not have a size-limit because if you already have the bytes","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1984,"byte_end":2064,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ in memory, then you don't gain anything by having a limiter.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2065,"byte_end":2129,"line_start":63,"line_end":63,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2793,"byte_end":2809,"line_start":80,"line_end":80,"column_start":8,"column_end":24},"name":"deserialize_from","qualname":"::deserialize_from","value":"pub fn deserialize_from<R: ?Sized, T, S>(&mut R, S) -> internal::Result<T>\nwhere R: Read, T: serde_crate::de::DeserializeOwned, S: SizeLimit","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Buffer`ed Reader.","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Buffer`ed Reader.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2311,"byte_end":2372,"line_start":71,"line_end":71,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2373,"byte_end":2376,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ If the provided `SizeLimit` is reached, the deserialization will bail immediately.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2377,"byte_end":2463,"line_start":73,"line_end":73,"column_start":1,"column_end":87}},{"value":"/ A SizeLimit can help prevent an attacker from flooding your server with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2464,"byte_end":2539,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ a neverending stream of values that runs your server out of memory.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2540,"byte_end":2611,"line_start":75,"line_end":75,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2612,"byte_end":2615,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, assume that the buffer that you passed","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2616,"byte_end":2686,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ in is in an invalid state, as the error could be returned during any point","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2687,"byte_end":2765,"line_start":78,"line_end":78,"column_start":1,"column_end":79}},{"value":"/ in the reading.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":2766,"byte_end":2785,"line_start":79,"line_end":79,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3436,"byte_end":3450,"line_start":97,"line_end":97,"column_start":8,"column_end":22},"name":"serialize_into","qualname":"::serialize_into","value":"pub fn serialize_into<W: ?Sized, T: ?Sized, S>(&mut W, &T, S)\n-> internal::Result<()> where W: Write, T: serde_crate::Serialize,\nS: SizeLimit","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer`.","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3052,"byte_end":3102,"line_start":89,"line_end":89,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3103,"byte_end":3106,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ If the serialization would take more bytes than allowed by `size_limit`, an error","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3107,"byte_end":3192,"line_start":91,"line_end":91,"column_start":1,"column_end":86}},{"value":"/ is returned and *no bytes* will be written into the `Writer`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3193,"byte_end":3258,"line_start":92,"line_end":92,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3259,"byte_end":3262,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error` (other than SizeLimit), assume that the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3263,"byte_end":3333,"line_start":94,"line_end":94,"column_start":1,"column_end":71}},{"value":"/ writer is in an invalid state, as writing could bail out in the middle of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3334,"byte_end":3411,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/ serializing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3412,"byte_end":3428,"line_start":96,"line_end":96,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3897,"byte_end":3906,"line_start":114,"line_end":114,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serialize","value":"pub fn serialize<T: ?Sized, S>(&T, S) -> internal::Result<Vec<u8>> where\nT: serde_crate::Serialize, S: SizeLimit","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes.","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3723,"byte_end":3782,"line_start":110,"line_end":110,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3783,"byte_end":3786,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ If the serialization would take more bytes than allowed by `size_limit`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3787,"byte_end":3863,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/ an error is returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":3864,"byte_end":3889,"line_start":113,"line_end":113,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":570},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5200,"byte_end":5209,"line_start":140,"line_end":140,"column_start":11,"column_end":20},"name":"SizeLimit","qualname":"::SizeLimit","value":"SizeLimit: private::Sealed","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"decl_id":null,"docs":" A limit on the amount of bytes that can be read or written.","sig":null,"attributes":[{"value":"/ A limit on the amount of bytes that can be read or written.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4112,"byte_end":4175,"line_start":122,"line_end":122,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4176,"byte_end":4179,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ Size limits are an incredibly important part of both encoding and decoding.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4180,"byte_end":4259,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4260,"byte_end":4263,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ In order to prevent DOS attacks on a decoder, it is important to limit the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4264,"byte_end":4342,"line_start":126,"line_end":126,"column_start":1,"column_end":79}},{"value":"/ amount of bytes that a single encoded message can be; otherwise, if you","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4343,"byte_end":4418,"line_start":127,"line_end":127,"column_start":1,"column_end":76}},{"value":"/ are decoding bytes right off of a TCP stream for example, it would be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4419,"byte_end":4492,"line_start":128,"line_end":128,"column_start":1,"column_end":74}},{"value":"/ possible for an attacker to flood your server with a 3TB vec, causing the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4493,"byte_end":4570,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ decoder to run out of memory and crash your application!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4571,"byte_end":4631,"line_start":130,"line_end":130,"column_start":1,"column_end":61}},{"value":"/ Because of this, you can provide a maximum-number-of-bytes that can be read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4632,"byte_end":4711,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ during decoding, and the decoder will explicitly fail if it has to read","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4712,"byte_end":4787,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/ any more than that.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4788,"byte_end":4811,"line_start":133,"line_end":133,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4812,"byte_end":4815,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ On the other side, you want to make sure that you aren't encoding a message","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4816,"byte_end":4895,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/ that is larger than your decoder expects.  By supplying a size limit to an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4896,"byte_end":4974,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ encoding function, the encoder will verify that the structure can be encoded","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":4975,"byte_end":5055,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/ within that limit.  This verification occurs before any bytes are written to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5056,"byte_end":5136,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ the Writer, so recovering from an error is easy.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5137,"byte_end":5189,"line_start":139,"line_end":139,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5374,"byte_end":5377,"line_start":143,"line_end":143,"column_start":8,"column_end":11},"name":"add","qualname":"::SizeLimit::add","value":"pub fn add(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Tells the SizeLimit that a certain number of bytes has been\n read or written.  Returns Err if the limit has been exceeded.\n","sig":null,"attributes":[{"value":"/ Tells the SizeLimit that a certain number of bytes has been","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5233,"byte_end":5296,"line_start":141,"line_end":141,"column_start":5,"column_end":68}},{"value":"/ read or written.  Returns Err if the limit has been exceeded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5301,"byte_end":5366,"line_start":142,"line_end":142,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5466,"byte_end":5471,"line_start":145,"line_end":145,"column_start":8,"column_end":13},"name":"limit","qualname":"::SizeLimit::limit","value":"pub fn limit(&Self) -> Option<u64>","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Returns the hard limit (if one exists)\n","sig":null,"attributes":[{"value":"/ Returns the hard limit (if one exists)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5416,"byte_end":5458,"line_start":144,"line_end":144,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":634},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5641,"byte_end":5648,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"Bounded","qualname":"::Bounded","value":"","parent":null,"children":[],"decl_id":null,"docs":" A SizeLimit that restricts serialized or deserialized messages from\n exceeding a certain byte length.\n","sig":null,"attributes":[{"value":"/ A SizeLimit that restricts serialized or deserialized messages from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5498,"byte_end":5569,"line_start":148,"line_end":148,"column_start":1,"column_end":72}},{"value":"/ exceeding a certain byte length.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5570,"byte_end":5606,"line_start":149,"line_end":149,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":636},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5649,"byte_end":5656,"line_start":151,"line_end":151,"column_start":20,"column_end":27},"name":"0","qualname":"::Bounded::0","value":"u64","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5805,"byte_end":5813,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"Infinite","qualname":"::Infinite","value":"","parent":null,"children":[],"decl_id":null,"docs":" A SizeLimit without a limit!\n Use this if you don't care about the size of encoded or decoded messages.\n","sig":null,"attributes":[{"value":"/ A SizeLimit without a limit!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5660,"byte_end":5692,"line_start":153,"line_end":153,"column_start":1,"column_end":33}},{"value":"/ Use this if you don't care about the size of encoded or decoded messages.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5693,"byte_end":5770,"line_start":154,"line_end":154,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":583},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6444,"byte_end":6450,"line_start":193,"line_end":193,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7267,"byte_end":7277,"line_start":24,"line_end":24,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":12485,"byte_end":12496,"line_start":212,"line_end":212,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":17388,"byte_end":17396,"line_start":402,"line_end":402,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":17790,"byte_end":17798,"line_start":424,"line_end":424,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":18198,"byte_end":18206,"line_start":446,"line_end":446,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":18605,"byte_end":18613,"line_start":468,"line_end":468,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":19003,"byte_end":19011,"line_start":490,"line_end":490,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":19583,"byte_end":19591,"line_start":520,"line_end":520,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":20011,"byte_end":20019,"line_start":542,"line_end":542,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":20537,"byte_end":20549,"line_start":569,"line_end":569,"column_start":53,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":20910,"byte_end":20922,"line_start":587,"line_end":587,"column_start":55,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":21289,"byte_end":21301,"line_start":605,"line_end":605,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":21667,"byte_end":21679,"line_start":623,"line_end":623,"column_start":62,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":22041,"byte_end":22053,"line_start":641,"line_end":641,"column_start":58,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":22592,"byte_end":22604,"line_start":667,"line_end":667,"column_start":56,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":22991,"byte_end":23003,"line_start":685,"line_end":685,"column_start":63,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":24430,"byte_end":24440,"line_start":740,"line_end":740,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38936,"byte_end":38947,"line_start":33,"line_end":33,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39113,"byte_end":39121,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39322,"byte_end":39333,"line_start":50,"line_end":50,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39597,"byte_end":39605,"line_start":59,"line_end":59,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39834,"byte_end":39845,"line_start":68,"line_end":68,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":40069,"byte_end":40080,"line_start":76,"line_end":76,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":41338,"byte_end":41346,"line_start":119,"line_end":119,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":41814,"byte_end":41822,"line_start":137,"line_end":137,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25450,"byte_end":25462,"line_start":33,"line_end":33,"column_start":60,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":31849,"byte_end":31855,"line_start":247,"line_end":247,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":33779,"byte_end":33785,"line_start":314,"line_end":314,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44693,"byte_end":44702,"line_start":54,"line_end":54,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":46102,"byte_end":46107,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":46214,"byte_end":46223,"line_start":93,"line_end":93,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47494,"byte_end":47499,"line_start":123,"line_end":123,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47640,"byte_end":47645,"line_start":129,"line_end":129,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":49452,"byte_end":49461,"line_start":191,"line_end":191,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5897,"byte_end":5904,"line_start":163,"line_end":163,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6234,"byte_end":6242,"line_start":180,"line_end":180,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6496,"byte_end":6507,"line_start":195,"line_end":195,"column_start":42,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6555,"byte_end":6563,"line_start":196,"line_end":196,"column_start":41,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6597,"byte_end":6605,"line_start":197,"line_end":197,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6636,"byte_end":6643,"line_start":198,"line_end":198,"column_start":28,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6674,"byte_end":6683,"line_start":199,"line_end":199,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":1391,"byte_end":1399,"line_start":44,"line_end":44,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":477}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":7267,"byte_end":7277,"line_start":24,"line_end":24,"column_start":30,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":12485,"byte_end":12496,"line_start":212,"line_end":212,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":71},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":17388,"byte_end":17396,"line_start":402,"line_end":402,"column_start":45,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":124},"to":{"krate":17,"index":1483}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":17790,"byte_end":17798,"line_start":424,"line_end":424,"column_start":47,"column_end":55},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":124},"to":{"krate":17,"index":1489}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":18198,"byte_end":18206,"line_start":446,"line_end":446,"column_start":53,"column_end":61},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":124},"to":{"krate":17,"index":1495}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":18605,"byte_end":18613,"line_start":468,"line_end":468,"column_start":54,"column_end":62},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":124},"to":{"krate":17,"index":1501}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":19003,"byte_end":19011,"line_start":490,"line_end":490,"column_start":45,"column_end":53},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":124},"to":{"krate":17,"index":1507}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":19583,"byte_end":19591,"line_start":520,"line_end":520,"column_start":48,"column_end":56},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":124},"to":{"krate":17,"index":1518}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":20011,"byte_end":20019,"line_start":542,"line_end":542,"column_start":55,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":124},"to":{"krate":17,"index":1525}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":20537,"byte_end":20549,"line_start":569,"line_end":569,"column_start":53,"column_end":65},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":194},"to":{"krate":17,"index":1483}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":20910,"byte_end":20922,"line_start":587,"line_end":587,"column_start":55,"column_end":67},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":194},"to":{"krate":17,"index":1489}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":21289,"byte_end":21301,"line_start":605,"line_end":605,"column_start":61,"column_end":73},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":194},"to":{"krate":17,"index":1495}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":21667,"byte_end":21679,"line_start":623,"line_end":623,"column_start":62,"column_end":74},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":194},"to":{"krate":17,"index":1501}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":22041,"byte_end":22053,"line_start":641,"line_end":641,"column_start":58,"column_end":70},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":194},"to":{"krate":17,"index":1507}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":22592,"byte_end":22604,"line_start":667,"line_end":667,"column_start":56,"column_end":68},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":194},"to":{"krate":17,"index":1518}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":22991,"byte_end":23003,"line_start":685,"line_end":685,"column_start":63,"column_end":75},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":194},"to":{"krate":17,"index":1525}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/ser/mod.rs","byte_start":24430,"byte_end":24440,"line_start":740,"line_end":740,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38257,"byte_end":38261,"line_start":7,"line_end":7,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":3068},"to":{"krate":0,"index":290}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38275,"byte_end":38281,"line_start":7,"line_end":7,"column_start":56,"column_end":62},"kind":"SuperTrait","from":{"krate":0,"index":583},"to":{"krate":0,"index":290}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":38936,"byte_end":38947,"line_start":33,"line_end":33,"column_start":16,"column_end":27},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39113,"byte_end":39121,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39322,"byte_end":39333,"line_start":50,"line_end":50,"column_start":29,"column_end":40},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":297},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39597,"byte_end":39605,"line_start":59,"line_end":59,"column_start":32,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":300},"to":{"krate":1,"index":3068}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":39834,"byte_end":39845,"line_start":68,"line_end":68,"column_start":16,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":40069,"byte_end":40080,"line_start":76,"line_end":76,"column_start":42,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":297},"to":{"krate":0,"index":290}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":41338,"byte_end":41346,"line_start":119,"line_end":119,"column_start":9,"column_end":17},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/read.rs","byte_start":41814,"byte_end":41822,"line_start":137,"line_end":137,"column_start":34,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":300},"to":{"krate":0,"index":290}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":25450,"byte_end":25462,"line_start":33,"line_end":33,"column_start":60,"column_end":72},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":31849,"byte_end":31855,"line_start":247,"line_end":247,"column_start":41,"column_end":47},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":404},"to":{"krate":17,"index":1143}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/de/mod.rs","byte_start":33779,"byte_end":33785,"line_start":314,"line_end":314,"column_start":41,"column_end":47},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":428},"to":{"krate":17,"index":1161}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":44693,"byte_end":44702,"line_start":54,"line_end":54,"column_start":19,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":608},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":46102,"byte_end":46107,"line_start":87,"line_end":87,"column_start":26,"column_end":31},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":498},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":46214,"byte_end":46223,"line_start":93,"line_end":93,"column_start":23,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":608},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47494,"byte_end":47499,"line_start":123,"line_end":123,"column_start":27,"column_end":32},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":498},"to":{"krate":17,"index":7261}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":47640,"byte_end":47645,"line_start":129,"line_end":129,"column_start":28,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":498},"to":{"krate":17,"index":7784}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/internal.rs","byte_start":49452,"byte_end":49461,"line_start":191,"line_end":191,"column_start":20,"column_end":29},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":573},"to":{"krate":0,"index":570}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5220,"byte_end":5226,"line_start":140,"line_end":140,"column_start":31,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":583},"to":{"krate":0,"index":570}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":5897,"byte_end":5904,"line_start":163,"line_end":163,"column_start":20,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":634},"to":{"krate":0,"index":570}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6234,"byte_end":6242,"line_start":180,"line_end":180,"column_start":20,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":640},"to":{"krate":0,"index":570}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6496,"byte_end":6507,"line_start":195,"line_end":195,"column_start":42,"column_end":53},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":297},"to":{"krate":0,"index":583}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6555,"byte_end":6563,"line_start":196,"line_end":196,"column_start":41,"column_end":49},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":300},"to":{"krate":0,"index":583}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6597,"byte_end":6605,"line_start":197,"line_end":197,"column_start":28,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":640},"to":{"krate":0,"index":583}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6636,"byte_end":6643,"line_start":198,"line_end":198,"column_start":28,"column_end":35},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":634},"to":{"krate":0,"index":583}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-0.9.2/src/lib.rs","byte_start":6674,"byte_end":6683,"line_start":199,"line_end":199,"column_start":28,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":573},"to":{"krate":0,"index":583}}]}