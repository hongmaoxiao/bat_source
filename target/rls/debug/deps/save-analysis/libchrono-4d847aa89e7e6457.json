{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1","program":"/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","chrono","/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=4d847aa89e7e6457","-C","extra-filename=-4d847aa89e7e6457","--out-dir","/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","-L","dependency=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","--extern","num_integer=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libnum_integer-4d354ffb0331afb4.rmeta","--extern","num_traits=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libnum_traits-f8aae93336683c5d.rmeta","--extern","time=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libtime-2ae9405107f37ca6.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libchrono-4d847aa89e7e6457.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[14237252514532798403,9817532683657961276]},"crate_root":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src","external_crates":[{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":16,"id":{"name":"time","disambiguator":[11116484050865069670,5493687901376993671]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":17,"id":{"name":"libc","disambiguator":[8000104344433599533,15219794654319678357]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":18,"id":{"name":"num_integer","disambiguator":[10836126408315650435,10433351967068449405]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","num":19,"id":{"name":"num_traits","disambiguator":[17353925895579993518,5837209790691450315]}}],"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":76,"byte_end":37239,"line_start":4,"line_end":967,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":292},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":18979,"byte_end":18987,"line_start":408,"line_end":408,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19025,"byte_end":19033,"line_start":410,"line_end":410,"column_start":36,"column_end":44},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19035,"byte_end":19041,"line_start":410,"line_end":410,"column_start":46,"column_end":52},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1298},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19043,"byte_end":19054,"line_start":410,"line_end":410,"column_start":54,"column_end":65},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19056,"byte_end":19059,"line_start":410,"line_end":410,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1322},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19056,"byte_end":19059,"line_start":410,"line_end":410,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":1332},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19061,"byte_end":19072,"line_start":410,"line_end":410,"column_start":72,"column_end":83},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1344},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19074,"byte_end":19079,"line_start":410,"line_end":410,"column_start":85,"column_end":90},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1345},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19074,"byte_end":19079,"line_start":410,"line_end":410,"column_start":85,"column_end":90},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19116,"byte_end":19125,"line_start":411,"line_end":411,"column_start":35,"column_end":44},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1419},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19127,"byte_end":19134,"line_start":411,"line_end":411,"column_start":46,"column_end":53},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19136,"byte_end":19145,"line_start":411,"line_end":411,"column_start":55,"column_end":64},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1464},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19147,"byte_end":19160,"line_start":411,"line_end":411,"column_start":66,"column_end":79},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1489},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19178,"byte_end":19182,"line_start":412,"line_end":412,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":681},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19184,"byte_end":19192,"line_start":412,"line_end":412,"column_start":22,"column_end":30},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":682},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19194,"byte_end":19202,"line_start":412,"line_end":412,"column_start":32,"column_end":40},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19224,"byte_end":19232,"line_start":413,"line_end":413,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1496},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19234,"byte_end":19247,"line_start":413,"line_end":413,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1698},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19349,"byte_end":19359,"line_start":415,"line_end":415,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1009},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19361,"byte_end":19372,"line_start":415,"line_end":415,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1247},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19390,"byte_end":19401,"line_start":416,"line_end":416,"column_start":16,"column_end":27},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1268},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19536,"byte_end":19544,"line_start":420,"line_end":420,"column_start":32,"column_end":40},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1287},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19546,"byte_end":19554,"line_start":420,"line_end":420,"column_start":42,"column_end":50},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1800},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19556,"byte_end":19563,"line_start":420,"line_end":420,"column_start":52,"column_end":59},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19597,"byte_end":19605,"line_start":421,"line_end":421,"column_start":32,"column_end":40},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19607,"byte_end":19613,"line_start":421,"line_end":421,"column_start":42,"column_end":48},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19647,"byte_end":19650,"line_start":422,"line_end":422,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1322},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19647,"byte_end":19650,"line_start":422,"line_end":422,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":39}},{"kind":"Use","ref_id":{"krate":0,"index":1332},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19652,"byte_end":19663,"line_start":422,"line_end":422,"column_start":37,"column_end":48},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1344},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19665,"byte_end":19670,"line_start":422,"line_end":422,"column_start":50,"column_end":55},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1345},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19665,"byte_end":19670,"line_start":422,"line_end":422,"column_start":50,"column_end":55},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19704,"byte_end":19713,"line_start":423,"line_end":423,"column_start":32,"column_end":41},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19715,"byte_end":19724,"line_start":423,"line_end":423,"column_start":43,"column_end":52},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1464},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19726,"byte_end":19739,"line_start":423,"line_end":423,"column_start":54,"column_end":67},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1489},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19772,"byte_end":19776,"line_start":424,"line_end":424,"column_start":31,"column_end":35},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19809,"byte_end":19817,"line_start":425,"line_end":425,"column_start":32,"column_end":40},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1496},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19819,"byte_end":19832,"line_start":425,"line_end":425,"column_start":42,"column_end":55},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1247},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19865,"byte_end":19876,"line_start":426,"line_end":426,"column_start":31,"column_end":42},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54645,"byte_end":54648,"line_start":376,"line_end":376,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":0,"index":1322},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54645,"byte_end":54648,"line_start":376,"line_end":376,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":240}},{"kind":"Use","ref_id":{"krate":0,"index":1332},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54671,"byte_end":54682,"line_start":377,"line_end":377,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":0,"index":1344},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54705,"byte_end":54710,"line_start":378,"line_end":378,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":58}},{"kind":"Use","ref_id":{"krate":0,"index":1345},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54705,"byte_end":54710,"line_start":378,"line_end":378,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":242}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20423,"byte_end":20432,"line_start":449,"line_end":449,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20434,"byte_end":20442,"line_start":449,"line_end":449,"column_start":37,"column_end":45},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":364},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20444,"byte_end":20452,"line_start":449,"line_end":449,"column_start":47,"column_end":55},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":1419},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20482,"byte_end":20489,"line_start":450,"line_end":450,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20515,"byte_end":20524,"line_start":451,"line_end":451,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":1464},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20554,"byte_end":20567,"line_start":452,"line_end":452,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":1772},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401130,"byte_end":401143,"line_start":27,"line_end":27,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":964}},{"kind":"Use","ref_id":{"krate":0,"index":1739},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401167,"byte_end":401173,"line_start":28,"line_end":28,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":964}},{"kind":"Use","ref_id":{"krate":0,"index":1200},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401196,"byte_end":401201,"line_start":29,"line_end":29,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":964}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":76,"byte_end":37239,"line_start":4,"line_end":967,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":1852},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":1856},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":52},{"krate":0,"index":58},{"krate":0,"index":243},{"krate":0,"index":656},{"krate":0,"index":785},{"krate":0,"index":964},{"krate":0,"index":1241},{"krate":0,"index":1800},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1829},{"krate":0,"index":1827},{"krate":0,"index":1825},{"krate":0,"index":1822},{"krate":0,"index":1255},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1836},{"krate":0,"index":1842},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1287}],"decl_id":null,"docs":" # Chrono 0.4.0","sig":null,"attributes":[{"value":"/ # Chrono 0.4.0","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":76,"byte_end":94,"line_start":4,"line_end":4,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":95,"byte_end":98,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Date and time handling for Rust.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":99,"byte_end":135,"line_start":6,"line_end":6,"column_start":1,"column_end":37}},{"value":"/ It aims to be a feature-complete superset of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":136,"byte_end":184,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/ the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":185,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ In particular,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":255,"byte_end":273,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":274,"byte_end":277,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Chrono strictly adheres to ISO 8601.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":278,"byte_end":320,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":321,"byte_end":399,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":400,"byte_end":490,"line_start":13,"line_end":13,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":491,"byte_end":494,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":495,"byte_end":582,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/ which Chrono builds upon and should acknowledge:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":583,"byte_end":635,"line_start":16,"line_end":16,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":636,"byte_end":639,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ * [Initial research on","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":640,"byte_end":666,"line_start":18,"line_end":18,"column_start":1,"column_end":27}},{"value":"/    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":667,"byte_end":758,"line_start":19,"line_end":19,"column_start":1,"column_end":92}},{"value":"/ * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":759,"byte_end":830,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":831,"byte_end":915,"line_start":21,"line_end":21,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":916,"byte_end":919,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Any significant changes to Chrono are documented in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":920,"byte_end":975,"line_start":23,"line_end":23,"column_start":1,"column_end":56}},{"value":"/ the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/master/CHANGELOG.md) file.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":976,"byte_end":1069,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1070,"byte_end":1073,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1074,"byte_end":1086,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1087,"byte_end":1090,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Put this in your `Cargo.toml`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1091,"byte_end":1125,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1126,"byte_end":1129,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1130,"byte_end":1141,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1142,"byte_end":1160,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ chrono = \"0.4\"","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1161,"byte_end":1179,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1180,"byte_end":1187,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1188,"byte_end":1191,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Or, if you want [Serde](https://github.com/serde-rs/serde) or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1192,"byte_end":1257,"line_start":35,"line_end":35,"column_start":1,"column_end":66}},{"value":"/ [rustc-serialize](https://github.com/rust-lang-nursery/rustc-serialize) support,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1258,"byte_end":1342,"line_start":36,"line_end":36,"column_start":1,"column_end":85}},{"value":"/ include the features like this:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1343,"byte_end":1378,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1379,"byte_end":1382,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1383,"byte_end":1394,"line_start":39,"line_end":39,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1395,"byte_end":1413,"line_start":40,"line_end":40,"column_start":1,"column_end":19}},{"value":"/ chrono = { version = \"0.4\", features = [\"serde\", \"rustc-serialize\"] }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1414,"byte_end":1487,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1488,"byte_end":1495,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1496,"byte_end":1499,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ > Note that Chrono's support for rustc-serialize is now considered deprecated.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1500,"byte_end":1582,"line_start":44,"line_end":44,"column_start":1,"column_end":83}},{"value":"/ Starting from 0.4.0 there is no further guarantee that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1583,"byte_end":1641,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/ the features available in Serde will be also available to rustc-serialize,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1642,"byte_end":1720,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ and the support can be removed in any future major version.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1721,"byte_end":1784,"line_start":47,"line_end":47,"column_start":1,"column_end":64}},{"value":"/ **Rustc-serialize users are strongly recommended to migrate to Serde.**","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1785,"byte_end":1860,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1861,"byte_end":1864,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Then put this in your crate root:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1865,"byte_end":1902,"line_start":50,"line_end":50,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1903,"byte_end":1906,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1907,"byte_end":1918,"line_start":52,"line_end":52,"column_start":1,"column_end":12}},{"value":"/ extern crate chrono;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1919,"byte_end":1943,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1944,"byte_end":1951,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1952,"byte_end":1955,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Avoid using `use chrono::*;` as Chrono exports several modules other than types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":1956,"byte_end":2040,"line_start":56,"line_end":56,"column_start":1,"column_end":85}},{"value":"/ If you prefer the glob imports, use the following instead:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2041,"byte_end":2103,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2104,"byte_end":2107,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2108,"byte_end":2119,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2120,"byte_end":2147,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2148,"byte_end":2155,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2156,"byte_end":2159,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2160,"byte_end":2175,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2176,"byte_end":2179,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ### Duration","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2180,"byte_end":2196,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2197,"byte_end":2200,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Chrono currently uses","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2201,"byte_end":2226,"line_start":67,"line_end":67,"column_start":1,"column_end":26}},{"value":"/ the [`time::Duration`](https://doc.rust-lang.org/time/time/struct.Duration.html) type","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2227,"byte_end":2316,"line_start":68,"line_end":68,"column_start":1,"column_end":90}},{"value":"/ from the `time` crate to represent the magnitude of a time span.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2317,"byte_end":2385,"line_start":69,"line_end":69,"column_start":1,"column_end":69}},{"value":"/ Since this has the same name to the newer, standard type for duration,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2386,"byte_end":2460,"line_start":70,"line_end":70,"column_start":1,"column_end":75}},{"value":"/ the reference will refer this type as `OldDuration`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2461,"byte_end":2517,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"/ Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2518,"byte_end":2589,"line_start":72,"line_end":72,"column_start":1,"column_end":72}},{"value":"/ nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2590,"byte_end":2665,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/ months.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2666,"byte_end":2677,"line_start":74,"line_end":74,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2678,"byte_end":2681,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Chrono does not yet natively support","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2682,"byte_end":2722,"line_start":76,"line_end":76,"column_start":1,"column_end":41}},{"value":"/ the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2723,"byte_end":2815,"line_start":77,"line_end":77,"column_start":1,"column_end":93}},{"value":"/ but it will be supported in the future.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2816,"byte_end":2859,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"/ Meanwhile you can convert between two types with","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2860,"byte_end":2912,"line_start":79,"line_end":79,"column_start":1,"column_end":53}},{"value":"/ [`Duration::from_std`](https://doc.rust-lang.org/time/time/struct.Duration.html#method.from_std)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":2913,"byte_end":3013,"line_start":80,"line_end":80,"column_start":1,"column_end":101}},{"value":"/ and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3014,"byte_end":3021,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ [`Duration::to_std`](https://doc.rust-lang.org/time/time/struct.Duration.html#method.to_std)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3022,"byte_end":3118,"line_start":82,"line_end":82,"column_start":1,"column_end":97}},{"value":"/ methods.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3119,"byte_end":3131,"line_start":83,"line_end":83,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3132,"byte_end":3135,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ### Date and Time","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3136,"byte_end":3157,"line_start":85,"line_end":85,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3158,"byte_end":3161,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Chrono provides a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3162,"byte_end":3183,"line_start":87,"line_end":87,"column_start":1,"column_end":22}},{"value":"/ [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3184,"byte_end":3228,"line_start":88,"line_end":88,"column_start":1,"column_end":45}},{"value":"/ type to represent a date and a time in a timezone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3229,"byte_end":3283,"line_start":89,"line_end":89,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3284,"byte_end":3287,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3288,"byte_end":3362,"line_start":91,"line_end":91,"column_start":1,"column_end":75}},{"value":"/ that is unconcerned with timezones, consider","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3363,"byte_end":3411,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"/ [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3412,"byte_end":3496,"line_start":93,"line_end":93,"column_start":1,"column_end":85}},{"value":"/ which tracks your system clock, or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3497,"byte_end":3535,"line_start":94,"line_end":94,"column_start":1,"column_end":39}},{"value":"/ [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3536,"byte_end":3620,"line_start":95,"line_end":95,"column_start":1,"column_end":85}},{"value":"/ is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3621,"byte_end":3702,"line_start":96,"line_end":96,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3703,"byte_end":3706,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3707,"byte_end":3768,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"/ the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3769,"byte_end":3831,"line_start":99,"line_end":99,"column_start":1,"column_end":63}},{"value":"/ which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3832,"byte_end":3912,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"/ There are three well-known `TimeZone` implementations:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3913,"byte_end":3971,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3972,"byte_end":3975,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":3976,"byte_end":4070,"line_start":103,"line_end":103,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4071,"byte_end":4074,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4075,"byte_end":4160,"line_start":105,"line_end":105,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4161,"byte_end":4164,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4165,"byte_end":4234,"line_start":107,"line_end":107,"column_start":1,"column_end":70}},{"value":"/   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4235,"byte_end":4302,"line_start":108,"line_end":108,"column_start":1,"column_end":68}},{"value":"/   This often results from the parsed textual date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4303,"byte_end":4366,"line_start":109,"line_end":109,"column_start":1,"column_end":64}},{"value":"/   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4367,"byte_end":4456,"line_start":110,"line_end":110,"column_start":1,"column_end":90}},{"value":"/   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4457,"byte_end":4524,"line_start":111,"line_end":111,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4525,"byte_end":4528,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4529,"byte_end":4605,"line_start":113,"line_end":113,"column_start":1,"column_end":77}},{"value":"/ but can be converted to each other using","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4606,"byte_end":4650,"line_start":114,"line_end":114,"column_start":1,"column_end":45}},{"value":"/ the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4651,"byte_end":4739,"line_start":115,"line_end":115,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4740,"byte_end":4743,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ You can get the current date and time in the UTC time zone","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4744,"byte_end":4806,"line_start":117,"line_end":117,"column_start":1,"column_end":63}},{"value":"/ ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4807,"byte_end":4864,"line_start":118,"line_end":118,"column_start":1,"column_end":58}},{"value":"/ or in the local time zone","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4865,"byte_end":4894,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/ ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4895,"byte_end":4957,"line_start":120,"line_end":120,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4958,"byte_end":4961,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4962,"byte_end":4973,"line_start":122,"line_end":122,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":4974,"byte_end":5001,"line_start":123,"line_end":123,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5002,"byte_end":5005,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5006,"byte_end":5093,"line_start":125,"line_end":125,"column_start":1,"column_end":88}},{"value":"/ let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5094,"byte_end":5186,"line_start":126,"line_end":126,"column_start":1,"column_end":93}},{"value":"/ # let _ = utc; let _ = local;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5187,"byte_end":5220,"line_start":127,"line_end":127,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5221,"byte_end":5228,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5229,"byte_end":5232,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can create your own date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5233,"byte_end":5290,"line_start":130,"line_end":130,"column_start":1,"column_end":58}},{"value":"/ This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5291,"byte_end":5371,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/ but in turn we get a rich combination of initialization methods.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5372,"byte_end":5440,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5441,"byte_end":5444,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5445,"byte_end":5456,"line_start":134,"line_end":134,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5457,"byte_end":5484,"line_start":135,"line_end":135,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5485,"byte_end":5521,"line_start":136,"line_end":136,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5522,"byte_end":5525,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5526,"byte_end":5604,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5605,"byte_end":5668,"line_start":139,"line_end":139,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5669,"byte_end":5726,"line_start":140,"line_end":140,"column_start":1,"column_end":58}},{"value":"/ // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5727,"byte_end":5784,"line_start":141,"line_end":141,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5785,"byte_end":5859,"line_start":142,"line_end":142,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5860,"byte_end":5863,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5864,"byte_end":5956,"line_start":144,"line_end":144,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":5957,"byte_end":6030,"line_start":145,"line_end":145,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6031,"byte_end":6107,"line_start":146,"line_end":146,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6108,"byte_end":6111,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ // dynamic verification","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6112,"byte_end":6139,"line_start":148,"line_end":148,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6140,"byte_end":6203,"line_start":149,"line_end":149,"column_start":1,"column_end":64}},{"value":"/            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6204,"byte_end":6281,"line_start":150,"line_end":150,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6282,"byte_end":6365,"line_start":151,"line_end":151,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6366,"byte_end":6450,"line_start":152,"line_end":152,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6451,"byte_end":6454,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // other time zone objects can be used to construct a local datetime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6455,"byte_end":6528,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"/ // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6529,"byte_end":6626,"line_start":155,"line_end":155,"column_start":1,"column_end":98}},{"value":"/ let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6627,"byte_end":6697,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"/ let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6698,"byte_end":6791,"line_start":157,"line_end":157,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(dt, fixed_dt);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6792,"byte_end":6821,"line_start":158,"line_end":158,"column_start":1,"column_end":30}},{"value":"/ # let _ = local_dt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6822,"byte_end":6845,"line_start":159,"line_end":159,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6846,"byte_end":6853,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6854,"byte_end":6857,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6858,"byte_end":6949,"line_start":162,"line_end":162,"column_start":1,"column_end":92}},{"value":"/ Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":6950,"byte_end":7032,"line_start":163,"line_end":163,"column_start":1,"column_end":83}},{"value":"/ [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7033,"byte_end":7103,"line_start":164,"line_end":164,"column_start":1,"column_end":71}},{"value":"/ Addition and subtraction is also supported.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7104,"byte_end":7151,"line_start":165,"line_end":165,"column_start":1,"column_end":48}},{"value":"/ The following illustrates most supported operations to the date and time:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7152,"byte_end":7229,"line_start":166,"line_end":166,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7230,"byte_end":7233,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7234,"byte_end":7245,"line_start":168,"line_end":168,"column_start":1,"column_end":12}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7246,"byte_end":7303,"line_start":169,"line_end":169,"column_start":1,"column_end":58}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7304,"byte_end":7331,"line_start":170,"line_end":170,"column_start":1,"column_end":28}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7332,"byte_end":7355,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7356,"byte_end":7359,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # /* we intentionally fake the datetime...","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7360,"byte_end":7406,"line_start":173,"line_end":173,"column_start":1,"column_end":47}},{"value":"/ // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7407,"byte_end":7473,"line_start":174,"line_end":174,"column_start":1,"column_end":67}},{"value":"/ let dt = Local::now();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7474,"byte_end":7500,"line_start":175,"line_end":175,"column_start":1,"column_end":27}},{"value":"/ # */ // up to here. we now define a fixed datetime for the illustrative purpose.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7501,"byte_end":7585,"line_start":176,"line_end":176,"column_start":1,"column_end":85}},{"value":"/ # let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7586,"byte_end":7681,"line_start":177,"line_end":177,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7682,"byte_end":7685,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ // property accessors","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7686,"byte_end":7711,"line_start":179,"line_end":179,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7712,"byte_end":7778,"line_start":180,"line_end":180,"column_start":1,"column_end":67}},{"value":"/ assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7779,"byte_end":7855,"line_start":181,"line_end":181,"column_start":1,"column_end":77}},{"value":"/ assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7856,"byte_end":7924,"line_start":182,"line_end":182,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7925,"byte_end":7968,"line_start":183,"line_end":183,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sat=7","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":7969,"byte_end":8043,"line_start":184,"line_end":184,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8044,"byte_end":8097,"line_start":185,"line_end":185,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8098,"byte_end":8194,"line_start":186,"line_end":186,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8195,"byte_end":8198,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ // time zone accessor and manipulation","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8199,"byte_end":8241,"line_start":188,"line_end":188,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8242,"byte_end":8304,"line_start":189,"line_end":189,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8305,"byte_end":8364,"line_start":190,"line_end":190,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8365,"byte_end":8463,"line_start":191,"line_end":191,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8464,"byte_end":8467,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ // a sample of property manipulations (validates dynamically)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8468,"byte_end":8533,"line_start":193,"line_end":193,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8534,"byte_end":8625,"line_start":194,"line_end":194,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(dt.with_day(32), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8626,"byte_end":8664,"line_start":195,"line_end":195,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8665,"byte_end":8761,"line_start":196,"line_end":196,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8762,"byte_end":8765,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ // arithmetic operations","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8766,"byte_end":8794,"line_start":198,"line_end":198,"column_start":1,"column_end":29}},{"value":"/ let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8795,"byte_end":8849,"line_start":199,"line_end":199,"column_start":1,"column_end":55}},{"value":"/ let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8850,"byte_end":8904,"line_start":200,"line_end":200,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8905,"byte_end":8986,"line_start":201,"line_end":201,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":8987,"byte_end":9067,"line_start":202,"line_end":202,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9068,"byte_end":9155,"line_start":203,"line_end":203,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9156,"byte_end":9211,"line_start":204,"line_end":204,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9212,"byte_end":9299,"line_start":205,"line_end":205,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9300,"byte_end":9357,"line_start":206,"line_end":206,"column_start":1,"column_end":58}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9358,"byte_end":9365,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9366,"byte_end":9373,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9374,"byte_end":9377,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9378,"byte_end":9465,"line_start":210,"line_end":210,"column_start":1,"column_end":88}},{"value":"/ which format is equivalent to the familiar `strftime` format.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9466,"byte_end":9531,"line_start":211,"line_end":211,"column_start":1,"column_end":66}},{"value":"/ (See the [`format::strftime` module documentation](./format/strftime/index.html#specifiers)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9532,"byte_end":9627,"line_start":212,"line_end":212,"column_start":1,"column_end":96}},{"value":"/ for full syntax.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9628,"byte_end":9649,"line_start":213,"line_end":213,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9650,"byte_end":9653,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9654,"byte_end":9748,"line_start":215,"line_end":215,"column_start":1,"column_end":95}},{"value":"/ Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9749,"byte_end":9834,"line_start":216,"line_end":216,"column_start":1,"column_end":86}},{"value":"/ [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9835,"byte_end":9903,"line_start":217,"line_end":217,"column_start":1,"column_end":69}},{"value":"/ for well-known formats.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9904,"byte_end":9931,"line_start":218,"line_end":218,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9932,"byte_end":9935,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9936,"byte_end":9947,"line_start":220,"line_end":220,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9948,"byte_end":9975,"line_start":221,"line_end":221,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9976,"byte_end":9979,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":9980,"byte_end":10033,"line_start":223,"line_end":223,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10034,"byte_end":10116,"line_start":224,"line_end":224,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10117,"byte_end":10201,"line_start":225,"line_end":225,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10202,"byte_end":10287,"line_start":226,"line_end":226,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10288,"byte_end":10291,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10292,"byte_end":10350,"line_start":228,"line_end":228,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10351,"byte_end":10418,"line_start":229,"line_end":229,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10419,"byte_end":10480,"line_start":230,"line_end":230,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10481,"byte_end":10541,"line_start":231,"line_end":231,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10542,"byte_end":10549,"line_start":232,"line_end":232,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10550,"byte_end":10553,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ Parsing can be done with three methods:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10554,"byte_end":10597,"line_start":234,"line_end":234,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10598,"byte_end":10601,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10602,"byte_end":10693,"line_start":236,"line_end":236,"column_start":1,"column_end":92}},{"value":"/    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10694,"byte_end":10785,"line_start":237,"line_end":237,"column_start":1,"column_end":92}},{"value":"/    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10786,"byte_end":10874,"line_start":238,"line_end":238,"column_start":1,"column_end":89}},{"value":"/    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10875,"byte_end":10935,"line_start":239,"line_end":239,"column_start":1,"column_end":61}},{"value":"/    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":10936,"byte_end":11016,"line_start":240,"line_end":240,"column_start":1,"column_end":81}},{"value":"/    format specifier prints, and requires the offset to be present.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11017,"byte_end":11087,"line_start":241,"line_end":241,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11088,"byte_end":11091,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11092,"byte_end":11180,"line_start":243,"line_end":243,"column_start":1,"column_end":89}},{"value":"/    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11181,"byte_end":11253,"line_start":244,"line_end":244,"column_start":1,"column_end":73}},{"value":"/    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11254,"byte_end":11349,"line_start":245,"line_end":245,"column_start":1,"column_end":96}},{"value":"/    It *cannot* be used when the offset can be missing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11350,"byte_end":11408,"line_start":246,"line_end":246,"column_start":1,"column_end":59}},{"value":"/    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11409,"byte_end":11498,"line_start":247,"line_end":247,"column_start":1,"column_end":90}},{"value":"/    and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11499,"byte_end":11509,"line_start":248,"line_end":248,"column_start":1,"column_end":11}},{"value":"/    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11510,"byte_end":11599,"line_start":249,"line_end":249,"column_start":1,"column_end":90}},{"value":"/    are similar but for well-known formats.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11600,"byte_end":11646,"line_start":250,"line_end":250,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11647,"byte_end":11650,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11651,"byte_end":11745,"line_start":252,"line_end":252,"column_start":1,"column_end":95}},{"value":"/    similar but returns `DateTime` of given offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11746,"byte_end":11800,"line_start":253,"line_end":253,"column_start":1,"column_end":55}},{"value":"/    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11801,"byte_end":11888,"line_start":254,"line_end":254,"column_start":1,"column_end":88}},{"value":"/    It issues an error when the input contains an explicit offset different","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11889,"byte_end":11967,"line_start":255,"line_end":255,"column_start":1,"column_end":79}},{"value":"/    from the current offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":11968,"byte_end":11999,"line_start":256,"line_end":256,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12000,"byte_end":12003,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ More detailed control over the parsing process is available via","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12004,"byte_end":12071,"line_start":258,"line_end":258,"column_start":1,"column_end":68}},{"value":"/ [`format`](./format/index.html) module.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12072,"byte_end":12115,"line_start":259,"line_end":259,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12116,"byte_end":12119,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12120,"byte_end":12131,"line_start":261,"line_end":261,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12132,"byte_end":12159,"line_start":262,"line_end":262,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12160,"byte_end":12163,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12164,"byte_end":12217,"line_start":264,"line_end":264,"column_start":1,"column_end":54}},{"value":"/ let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12218,"byte_end":12282,"line_start":265,"line_end":265,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12283,"byte_end":12286,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ // method 1","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12287,"byte_end":12302,"line_start":267,"line_end":267,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12303,"byte_end":12383,"line_start":268,"line_end":268,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12384,"byte_end":12469,"line_start":269,"line_end":269,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12470,"byte_end":12569,"line_start":270,"line_end":270,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12570,"byte_end":12573,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ // method 2","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12574,"byte_end":12589,"line_start":272,"line_end":272,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12590,"byte_end":12684,"line_start":273,"line_end":273,"column_start":1,"column_end":95}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12685,"byte_end":12722,"line_start":274,"line_end":274,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12723,"byte_end":12802,"line_start":275,"line_end":275,"column_start":1,"column_end":80}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12803,"byte_end":12840,"line_start":276,"line_end":276,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12841,"byte_end":12937,"line_start":277,"line_end":277,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12938,"byte_end":12941,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ // method 3","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12942,"byte_end":12957,"line_start":279,"line_end":279,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":12958,"byte_end":13056,"line_start":280,"line_end":280,"column_start":1,"column_end":99}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13057,"byte_end":13157,"line_start":281,"line_end":281,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13158,"byte_end":13161,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ // oops, the year is missing!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13162,"byte_end":13195,"line_start":283,"line_end":283,"column_start":1,"column_end":34}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13196,"byte_end":13281,"line_start":284,"line_end":284,"column_start":1,"column_end":86}},{"value":"/ // oops, the format string does not include the year at all!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13282,"byte_end":13346,"line_start":285,"line_end":285,"column_start":1,"column_end":65}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13347,"byte_end":13429,"line_start":286,"line_end":286,"column_start":1,"column_end":83}},{"value":"/ // oops, the weekday is incorrect!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13430,"byte_end":13468,"line_start":287,"line_end":287,"column_start":1,"column_end":39}},{"value":"/ assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13469,"byte_end":13559,"line_start":288,"line_end":288,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13560,"byte_end":13567,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13568,"byte_end":13571,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ ### Conversion from and to EPOCH timestamps","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13572,"byte_end":13619,"line_start":291,"line_end":291,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13620,"byte_end":13623,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp) ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13624,"byte_end":13719,"line_start":293,"line_end":293,"column_start":1,"column_end":96}},{"value":"/ to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13720,"byte_end":13803,"line_start":294,"line_end":294,"column_start":1,"column_end":84}},{"value":"/ (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13804,"byte_end":13866,"line_start":295,"line_end":295,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13867,"byte_end":13870,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13871,"byte_end":13976,"line_start":297,"line_end":297,"column_start":1,"column_end":106}},{"value":"/ from a [`DateTime`](./struct.DateTime.html). Additionally, you can use ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":13977,"byte_end":14052,"line_start":298,"line_end":298,"column_start":1,"column_end":76}},{"value":"/ [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14053,"byte_end":14146,"line_start":299,"line_end":299,"column_start":1,"column_end":94}},{"value":"/ to get the number of additional number of nanoseconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14147,"byte_end":14205,"line_start":300,"line_end":300,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14206,"byte_end":14209,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14210,"byte_end":14221,"line_start":302,"line_end":302,"column_start":1,"column_end":12}},{"value":"/ # use chrono::DateTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14222,"byte_end":14249,"line_start":303,"line_end":303,"column_start":1,"column_end":28}},{"value":"/ # use chrono::Utc;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14250,"byte_end":14272,"line_start":304,"line_end":304,"column_start":1,"column_end":23}},{"value":"/ // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14273,"byte_end":14331,"line_start":305,"line_end":305,"column_start":1,"column_end":59}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14332,"byte_end":14357,"line_start":306,"line_end":306,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14358,"byte_end":14361,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ // Construct a datetime from epoch:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14362,"byte_end":14401,"line_start":308,"line_end":308,"column_start":1,"column_end":40}},{"value":"/ let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14402,"byte_end":14447,"line_start":309,"line_end":309,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14448,"byte_end":14515,"line_start":310,"line_end":310,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14516,"byte_end":14519,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ // Get epoch value from a datetime:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14520,"byte_end":14559,"line_start":312,"line_end":312,"column_start":1,"column_end":40}},{"value":"/ let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14560,"byte_end":14646,"line_start":313,"line_end":313,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14647,"byte_end":14693,"line_start":314,"line_end":314,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14694,"byte_end":14701,"line_start":315,"line_end":315,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14702,"byte_end":14705,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ ### Individual date","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14706,"byte_end":14729,"line_start":317,"line_end":317,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14730,"byte_end":14733,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14734,"byte_end":14818,"line_start":319,"line_end":319,"column_start":1,"column_end":85}},{"value":"/ It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14819,"byte_end":14898,"line_start":320,"line_end":320,"column_start":1,"column_end":80}},{"value":"/ Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14899,"byte_end":14993,"line_start":321,"line_end":321,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14994,"byte_end":14997,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":14998,"byte_end":15009,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15010,"byte_end":15037,"line_start":324,"line_end":324,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15038,"byte_end":15074,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15075,"byte_end":15078,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15079,"byte_end":15179,"line_start":327,"line_end":327,"column_start":1,"column_end":101}},{"value":"/ assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15180,"byte_end":15228,"line_start":328,"line_end":328,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15229,"byte_end":15281,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15282,"byte_end":15285,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15286,"byte_end":15348,"line_start":331,"line_end":331,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15349,"byte_end":15410,"line_start":332,"line_end":332,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15411,"byte_end":15504,"line_start":333,"line_end":333,"column_start":1,"column_end":94}},{"value":"/            \"070809\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15505,"byte_end":15530,"line_start":334,"line_end":334,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15531,"byte_end":15538,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15539,"byte_end":15542,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15543,"byte_end":15635,"line_start":337,"line_end":337,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15636,"byte_end":15639,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15640,"byte_end":15710,"line_start":339,"line_end":339,"column_start":1,"column_end":71}},{"value":"/ which returns a `Date` which represents its date component.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15711,"byte_end":15774,"line_start":340,"line_end":340,"column_start":1,"column_end":64}},{"value":"/ There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15775,"byte_end":15847,"line_start":341,"line_end":341,"column_start":1,"column_end":73}},{"value":"/ which simply returns a naive local time described below.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15848,"byte_end":15908,"line_start":342,"line_end":342,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15909,"byte_end":15912,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ ### Naive date and time","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15913,"byte_end":15940,"line_start":344,"line_end":344,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15941,"byte_end":15944,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":15945,"byte_end":16031,"line_start":346,"line_end":346,"column_start":1,"column_end":87}},{"value":"/ as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16032,"byte_end":16088,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16089,"byte_end":16145,"line_start":348,"line_end":348,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16146,"byte_end":16220,"line_start":349,"line_end":349,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16221,"byte_end":16224,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16225,"byte_end":16298,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"/ but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16299,"byte_end":16377,"line_start":352,"line_end":352,"column_start":1,"column_end":79}},{"value":"/ They are mostly useful for building blocks for higher-level types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16378,"byte_end":16448,"line_start":353,"line_end":353,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16449,"byte_end":16452,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16453,"byte_end":16542,"line_start":355,"line_end":355,"column_start":1,"column_end":90}},{"value":"/ [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16543,"byte_end":16613,"line_start":356,"line_end":356,"column_start":1,"column_end":71}},{"value":"/ a view to the naive local time,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16614,"byte_end":16649,"line_start":357,"line_end":357,"column_start":1,"column_end":36}},{"value":"/ and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16650,"byte_end":16720,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"/ a view to the naive UTC time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16721,"byte_end":16754,"line_start":359,"line_end":359,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16755,"byte_end":16758,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16759,"byte_end":16777,"line_start":361,"line_end":361,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16778,"byte_end":16781,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16782,"byte_end":16872,"line_start":363,"line_end":363,"column_start":1,"column_end":91}},{"value":"/ Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16873,"byte_end":16972,"line_start":364,"line_end":364,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16973,"byte_end":16976,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":16977,"byte_end":17053,"line_start":366,"line_end":366,"column_start":1,"column_end":77}},{"value":"/ Time types are limited in the nanosecond accuracy.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17054,"byte_end":17108,"line_start":367,"line_end":367,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17109,"byte_end":17112,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ [Leap seconds are supported in the representation but","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17113,"byte_end":17170,"line_start":369,"line_end":369,"column_start":1,"column_end":58}},{"value":"/ Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17171,"byte_end":17267,"line_start":370,"line_end":370,"column_start":1,"column_end":97}},{"value":"/ (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17268,"byte_end":17338,"line_start":371,"line_end":371,"column_start":1,"column_end":71}},{"value":"/ Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17339,"byte_end":17416,"line_start":372,"line_end":372,"column_start":1,"column_end":78}},{"value":"/ Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17417,"byte_end":17507,"line_start":373,"line_end":373,"column_start":1,"column_end":91}},{"value":"/ if you want.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17508,"byte_end":17524,"line_start":374,"line_end":374,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17525,"byte_end":17528,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17529,"byte_end":17622,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"/ Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17623,"byte_end":17696,"line_start":377,"line_end":377,"column_start":1,"column_end":74}},{"value":"/ For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17697,"byte_end":17763,"line_start":378,"line_end":378,"column_start":1,"column_end":67}},{"value":"/ and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17764,"byte_end":17837,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17838,"byte_end":17841,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ Advanced time zone handling is not yet supported.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17842,"byte_end":17895,"line_start":381,"line_end":381,"column_start":1,"column_end":54}},{"value":"/ For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":17896,"byte_end":17992,"line_start":382,"line_end":382,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":18129,"byte_end":18151,"line_start":387,"line_end":387,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":18152,"byte_end":18191,"line_start":388,"line_end":388,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19495,"byte_end":19502,"line_start":419,"line_end":419,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":1892},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":1896},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":19404,"byte_end":19486,"line_start":418,"line_end":418,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":1298},{"krate":0,"index":1318},{"krate":0,"index":1312},{"krate":0,"index":1314},{"krate":0,"index":1309},{"krate":0,"index":73},{"krate":0,"index":81},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":115},{"krate":0,"index":145},{"krate":0,"index":204},{"krate":0,"index":240},{"krate":0,"index":2010},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":2014}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"/ The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":38724,"byte_end":38795,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":38796,"byte_end":38799,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are four operations provided by the `TimeZone` trait:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":38800,"byte_end":38863,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":38864,"byte_end":38867,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":38868,"byte_end":38929,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":38930,"byte_end":38989,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":38990,"byte_end":39051,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39052,"byte_end":39115,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39116,"byte_end":39119,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39120,"byte_end":39216,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39217,"byte_end":39313,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39314,"byte_end":39405,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39406,"byte_end":39486,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39487,"byte_end":39555,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ and provides implementations for 1 and 3.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39556,"byte_end":39601,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39602,"byte_end":39691,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1300},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40128,"byte_end":40132,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40000,"byte_end":40047,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40052,"byte_end":40123,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1302},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40206,"byte_end":40212,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40138,"byte_end":40201,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1305},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40378,"byte_end":40387,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40221,"byte_end":40297,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40302,"byte_end":40373,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1298},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39979,"byte_end":39990,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"pub enum LocalResult<T> {\n\n    /// Given local time representation is invalid.\n    /// This can occur when, for example, the positive timezone transition.\n    None,\n\n    /// Given local time representation has a single unique result.\n    Single(T),\n\n    /// Given local time representation has multiple results and thus ambiguous.\n    /// This can occur when, for example, the negative timezone transition.\n    Ambiguous(T, T),\n}","parent":null,"children":[{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1305}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":39851,"byte_end":39934,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40537,"byte_end":40543,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"pub fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40443,"byte_end":40525,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40738,"byte_end":40746,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"pub fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40644,"byte_end":40726,"line_start":47,"line_end":47,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40969,"byte_end":40975,"line_start":53,"line_end":53,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"pub fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40877,"byte_end":40957,"line_start":52,"line_end":52,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41188,"byte_end":41191,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"pub fn map<U, F: FnMut(T) -> U>(Self, F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41106,"byte_end":41176,"line_start":57,"line_end":57,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41766,"byte_end":41774,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"pub fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41541,"byte_end":41612,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41617,"byte_end":41665,"line_start":69,"line_end":69,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41670,"byte_end":41673,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41678,"byte_end":41740,"line_start":71,"line_end":71,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41745,"byte_end":41754,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42278,"byte_end":42289,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"pub fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42050,"byte_end":42124,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42129,"byte_end":42177,"line_start":82,"line_end":82,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42182,"byte_end":42185,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42190,"byte_end":42252,"line_start":84,"line_end":84,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42257,"byte_end":42266,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42918,"byte_end":42935,"line_start":100,"line_end":100,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42592,"byte_end":42679,"line_start":94,"line_end":94,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42684,"byte_end":42764,"line_start":95,"line_end":95,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42769,"byte_end":42817,"line_start":96,"line_end":96,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42822,"byte_end":42825,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42830,"byte_end":42892,"line_start":98,"line_end":98,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":42897,"byte_end":42906,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43622,"byte_end":43639,"line_start":115,"line_end":115,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43292,"byte_end":43379,"line_start":109,"line_end":109,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43384,"byte_end":43468,"line_start":110,"line_end":110,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43473,"byte_end":43521,"line_start":111,"line_end":111,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43526,"byte_end":43529,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43534,"byte_end":43596,"line_start":113,"line_end":113,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43601,"byte_end":43610,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44328,"byte_end":44344,"line_start":130,"line_end":130,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":43996,"byte_end":44082,"line_start":124,"line_end":124,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44087,"byte_end":44174,"line_start":125,"line_end":125,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44179,"byte_end":44227,"line_start":126,"line_end":126,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44232,"byte_end":44235,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44240,"byte_end":44302,"line_start":128,"line_end":128,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44307,"byte_end":44316,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44820,"byte_end":44826,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"pub fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44737,"byte_end":44808,"line_start":142,"line_end":142,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45180,"byte_end":45186,"line_start":155,"line_end":155,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":92}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45127,"byte_end":45169,"line_start":154,"line_end":154,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45292,"byte_end":45295,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"pub fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45221,"byte_end":45284,"line_start":156,"line_end":156,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45494,"byte_end":45502,"line_start":164,"line_end":164,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45322,"byte_end":45340,"line_start":160,"line_end":160,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45341,"byte_end":45344,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45345,"byte_end":45434,"line_start":162,"line_end":162,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45435,"byte_end":45483,"line_start":163,"line_end":163,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45725,"byte_end":45731,"line_start":168,"line_end":168,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45524,"byte_end":45554,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45559,"byte_end":45631,"line_start":166,"line_end":166,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45636,"byte_end":45715,"line_start":167,"line_end":167,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46348,"byte_end":46351,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"pub fn ymd(&Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45746,"byte_end":45817,"line_start":170,"line_end":170,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45822,"byte_end":45901,"line_start":171,"line_end":171,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45906,"byte_end":45909,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45914,"byte_end":46007,"line_start":173,"line_end":173,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46012,"byte_end":46089,"line_start":174,"line_end":174,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46094,"byte_end":46097,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46102,"byte_end":46164,"line_start":176,"line_end":176,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46169,"byte_end":46172,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46177,"byte_end":46190,"line_start":178,"line_end":178,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46195,"byte_end":46198,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46203,"byte_end":46211,"line_start":180,"line_end":180,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46216,"byte_end":46248,"line_start":181,"line_end":181,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46253,"byte_end":46256,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46261,"byte_end":46327,"line_start":183,"line_end":183,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46332,"byte_end":46340,"line_start":184,"line_end":184,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47167,"byte_end":47174,"line_start":205,"line_end":205,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"pub fn ymd_opt(&Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46467,"byte_end":46538,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46543,"byte_end":46622,"line_start":190,"line_end":190,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46627,"byte_end":46630,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46635,"byte_end":46728,"line_start":192,"line_end":192,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46733,"byte_end":46810,"line_start":193,"line_end":193,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46815,"byte_end":46818,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46823,"byte_end":46893,"line_start":195,"line_end":195,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46898,"byte_end":46901,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46906,"byte_end":46919,"line_start":197,"line_end":197,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46924,"byte_end":46927,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46932,"byte_end":46940,"line_start":199,"line_end":199,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46945,"byte_end":46990,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":46995,"byte_end":46998,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47003,"byte_end":47082,"line_start":202,"line_end":202,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47087,"byte_end":47146,"line_start":203,"line_end":203,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47151,"byte_end":47159,"line_start":204,"line_end":204,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48023,"byte_end":48025,"line_start":227,"line_end":227,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"pub fn yo(&Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47411,"byte_end":47502,"line_start":212,"line_end":212,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47507,"byte_end":47586,"line_start":213,"line_end":213,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47591,"byte_end":47594,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47599,"byte_end":47692,"line_start":215,"line_end":215,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47697,"byte_end":47774,"line_start":216,"line_end":216,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47779,"byte_end":47782,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47787,"byte_end":47842,"line_start":218,"line_end":218,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47847,"byte_end":47850,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47855,"byte_end":47868,"line_start":220,"line_end":220,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47873,"byte_end":47876,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47881,"byte_end":47889,"line_start":222,"line_end":222,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47894,"byte_end":47926,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47931,"byte_end":47934,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":47939,"byte_end":48002,"line_start":225,"line_end":225,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48007,"byte_end":48015,"line_start":226,"line_end":226,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48576,"byte_end":48582,"line_start":238,"line_end":238,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"pub fn yo_opt(&Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48129,"byte_end":48220,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48225,"byte_end":48304,"line_start":232,"line_end":232,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48309,"byte_end":48312,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48317,"byte_end":48410,"line_start":234,"line_end":234,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48415,"byte_end":48492,"line_start":235,"line_end":235,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48497,"byte_end":48500,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48505,"byte_end":48568,"line_start":237,"line_end":237,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49560,"byte_end":49566,"line_start":262,"line_end":262,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"pub fn isoywd(&Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48807,"byte_end":48898,"line_start":245,"line_end":245,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48903,"byte_end":48929,"line_start":246,"line_end":246,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":48934,"byte_end":49013,"line_start":247,"line_end":247,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49018,"byte_end":49089,"line_start":248,"line_end":248,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49094,"byte_end":49097,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49102,"byte_end":49195,"line_start":250,"line_end":250,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49200,"byte_end":49277,"line_start":251,"line_end":251,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49282,"byte_end":49285,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49290,"byte_end":49353,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49358,"byte_end":49361,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49366,"byte_end":49379,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49384,"byte_end":49387,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49392,"byte_end":49400,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49405,"byte_end":49446,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49451,"byte_end":49454,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49459,"byte_end":49539,"line_start":260,"line_end":260,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49544,"byte_end":49552,"line_start":261,"line_end":261,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50257,"byte_end":50267,"line_start":275,"line_end":275,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"pub fn isoywd_opt(&Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49695,"byte_end":49786,"line_start":266,"line_end":266,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49791,"byte_end":49817,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49822,"byte_end":49901,"line_start":268,"line_end":268,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49906,"byte_end":49977,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49982,"byte_end":49985,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":49990,"byte_end":50083,"line_start":271,"line_end":271,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50088,"byte_end":50165,"line_start":272,"line_end":272,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50170,"byte_end":50173,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50178,"byte_end":50249,"line_start":274,"line_end":274,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51092,"byte_end":51101,"line_start":296,"line_end":296,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"pub fn timestamp(&Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50517,"byte_end":50579,"line_start":282,"line_end":282,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50584,"byte_end":50644,"line_start":283,"line_end":283,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50649,"byte_end":50720,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50725,"byte_end":50728,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50733,"byte_end":50808,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50813,"byte_end":50890,"line_start":287,"line_end":287,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50895,"byte_end":50898,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50903,"byte_end":50916,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50921,"byte_end":50924,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50929,"byte_end":50937,"line_start":291,"line_end":291,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50942,"byte_end":50974,"line_start":292,"line_end":292,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50979,"byte_end":50982,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":50987,"byte_end":51071,"line_start":294,"line_end":294,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51076,"byte_end":51084,"line_start":295,"line_end":295,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51584,"byte_end":51597,"line_start":306,"line_end":306,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"pub fn timestamp_opt(&Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51212,"byte_end":51274,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51279,"byte_end":51339,"line_start":301,"line_end":301,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51344,"byte_end":51415,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51420,"byte_end":51423,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51428,"byte_end":51500,"line_start":304,"line_end":304,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51505,"byte_end":51576,"line_start":305,"line_end":305,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52362,"byte_end":52379,"line_start":323,"line_end":323,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"pub fn datetime_from_str(&Self, &str, &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51858,"byte_end":51914,"line_start":313,"line_end":313,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51919,"byte_end":51968,"line_start":314,"line_end":314,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":51973,"byte_end":52043,"line_start":315,"line_end":315,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52048,"byte_end":52086,"line_start":316,"line_end":316,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52091,"byte_end":52094,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52099,"byte_end":52173,"line_start":318,"line_end":318,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52178,"byte_end":52236,"line_start":319,"line_end":319,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52241,"byte_end":52244,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52249,"byte_end":52319,"line_start":321,"line_end":321,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52324,"byte_end":52354,"line_start":322,"line_end":322,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52655,"byte_end":52666,"line_start":330,"line_end":330,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"pub fn from_offset(&Self::Offset) -> Self","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52600,"byte_end":52647,"line_start":329,"line_end":329,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52778,"byte_end":52800,"line_start":333,"line_end":333,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"pub fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52704,"byte_end":52770,"line_start":332,"line_end":332,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52940,"byte_end":52966,"line_start":336,"line_end":336,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"pub fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":52862,"byte_end":52932,"line_start":335,"line_end":335,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53116,"byte_end":53131,"line_start":339,"line_end":339,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"pub fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53032,"byte_end":53108,"line_start":338,"line_end":338,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53483,"byte_end":53502,"line_start":347,"line_end":347,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"pub fn from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53391,"byte_end":53475,"line_start":346,"line_end":346,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53787,"byte_end":53807,"line_start":354,"line_end":354,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"pub fn offset_from_utc_date(&Self, &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53712,"byte_end":53779,"line_start":353,"line_end":353,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53933,"byte_end":53957,"line_start":357,"line_end":357,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"pub fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":53854,"byte_end":53925,"line_start":356,"line_end":356,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54164,"byte_end":54177,"line_start":361,"line_end":361,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"pub fn from_utc_date(&Self, &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54008,"byte_end":54059,"line_start":359,"line_end":359,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54064,"byte_end":54156,"line_start":360,"line_end":360,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54450,"byte_end":54467,"line_start":367,"line_end":367,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"pub fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54290,"byte_end":54345,"line_start":365,"line_end":365,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":54350,"byte_end":54442,"line_start":366,"line_end":366,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55636,"byte_end":55639,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":54990,"byte_end":55085,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55086,"byte_end":55148,"line_start":14,"line_end":14,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55149,"byte_end":55152,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55153,"byte_end":55210,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55211,"byte_end":55282,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55283,"byte_end":55297,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55298,"byte_end":55301,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55302,"byte_end":55315,"line_start":20,"line_end":20,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55316,"byte_end":55319,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55320,"byte_end":55328,"line_start":22,"line_end":22,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55329,"byte_end":55386,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55387,"byte_end":55390,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55391,"byte_end":55473,"line_start":25,"line_end":25,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55474,"byte_end":55477,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55478,"byte_end":55519,"line_start":27,"line_end":27,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55520,"byte_end":55577,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55578,"byte_end":55586,"line_start":29,"line_end":29,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55728,"byte_end":55733,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"pub fn today() -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55657,"byte_end":55716,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55851,"byte_end":55854,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"pub fn now() -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55776,"byte_end":55839,"line_start":37,"line_end":37,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57556,"byte_end":57567,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1333}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57186,"byte_end":57257,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57258,"byte_end":57261,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57262,"byte_end":57319,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57320,"byte_end":57383,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57384,"byte_end":57457,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57458,"byte_end":57506,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58171,"byte_end":58175,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"pub fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57622,"byte_end":57710,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57715,"byte_end":57768,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57773,"byte_end":57776,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57781,"byte_end":57819,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57824,"byte_end":57827,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57832,"byte_end":57845,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57850,"byte_end":57853,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57858,"byte_end":57866,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57871,"byte_end":57911,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57916,"byte_end":57936,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57941,"byte_end":58005,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58010,"byte_end":58074,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58079,"byte_end":58146,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58151,"byte_end":58159,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58510,"byte_end":58518,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"pub fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58293,"byte_end":58381,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58386,"byte_end":58439,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58444,"byte_end":58447,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58452,"byte_end":58498,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59260,"byte_end":59264,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"pub fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58711,"byte_end":58799,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58804,"byte_end":58857,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58862,"byte_end":58865,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58870,"byte_end":58908,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58913,"byte_end":58916,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58921,"byte_end":58934,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58939,"byte_end":58942,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58947,"byte_end":58955,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":58960,"byte_end":59000,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59005,"byte_end":59025,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59030,"byte_end":59094,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59099,"byte_end":59163,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59168,"byte_end":59235,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59240,"byte_end":59248,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59599,"byte_end":59607,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"pub fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59382,"byte_end":59470,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59475,"byte_end":59528,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59533,"byte_end":59536,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59541,"byte_end":59587,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59892,"byte_end":59907,"line_start":89,"line_end":89,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"pub fn local_minus_utc(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59801,"byte_end":59880,"line_start":88,"line_end":88,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":60055,"byte_end":60070,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"pub fn utc_minus_local(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":59964,"byte_end":60043,"line_start":93,"line_end":93,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66974,"byte_end":66979,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66518,"byte_end":66593,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66594,"byte_end":66597,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66598,"byte_end":66655,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66656,"byte_end":66731,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66732,"byte_end":66746,"line_start":70,"line_end":70,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66747,"byte_end":66750,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66751,"byte_end":66764,"line_start":72,"line_end":72,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66765,"byte_end":66768,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66769,"byte_end":66777,"line_start":74,"line_end":74,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66778,"byte_end":66822,"line_start":75,"line_end":75,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66823,"byte_end":66826,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66827,"byte_end":66870,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66871,"byte_end":66923,"line_start":78,"line_end":78,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66924,"byte_end":66932,"line_start":79,"line_end":79,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":67070,"byte_end":67075,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"pub fn today() -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66999,"byte_end":67058,"line_start":84,"line_end":84,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":67209,"byte_end":67212,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"pub fn now() -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":67134,"byte_end":67197,"line_start":89,"line_end":89,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":243},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20040,"byte_end":20045,"line_start":436,"line_end":436,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":324},{"krate":0,"index":443},{"krate":0,"index":456},{"krate":0,"index":536},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655}],"decl_id":null,"docs":" Date and time types which do not concern about the timezones.","sig":null,"attributes":[{"value":"/ Date and time types which do not concern about the timezones.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20052,"byte_end":20117,"line_start":437,"line_end":437,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20122,"byte_end":20125,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ They are primarily building blocks for other types","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20130,"byte_end":20184,"line_start":439,"line_end":439,"column_start":5,"column_end":59}},{"value":"/ (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20189,"byte_end":20244,"line_start":440,"line_end":440,"column_start":5,"column_end":60}},{"value":"/ but can be also used for the simpler date and time handling.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20249,"byte_end":20313,"line_start":441,"line_end":441,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1396},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106744,"byte_end":106753,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1397}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104170,"byte_end":104214,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104215,"byte_end":104278,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104279,"byte_end":104327,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104328,"byte_end":104397,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104398,"byte_end":104401,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104402,"byte_end":104421,"line_start":53,"line_end":53,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104422,"byte_end":104425,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104426,"byte_end":104502,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104503,"byte_end":104575,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104576,"byte_end":104579,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104580,"byte_end":104676,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104677,"byte_end":104764,"line_start":59,"line_end":59,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104765,"byte_end":104854,"line_start":60,"line_end":60,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104855,"byte_end":104858,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104859,"byte_end":104949,"line_start":62,"line_end":62,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":104950,"byte_end":105031,"line_start":63,"line_end":63,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105032,"byte_end":105118,"line_start":64,"line_end":64,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105119,"byte_end":105122,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105123,"byte_end":105200,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105201,"byte_end":105272,"line_start":67,"line_end":67,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105273,"byte_end":105355,"line_start":68,"line_end":68,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105356,"byte_end":105359,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105360,"byte_end":105375,"line_start":70,"line_end":70,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105376,"byte_end":105379,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105380,"byte_end":105450,"line_start":72,"line_end":72,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105451,"byte_end":105524,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105525,"byte_end":105528,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105529,"byte_end":105617,"line_start":75,"line_end":75,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105618,"byte_end":105688,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105689,"byte_end":105692,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105693,"byte_end":105787,"line_start":78,"line_end":78,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105788,"byte_end":105868,"line_start":79,"line_end":79,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105869,"byte_end":105872,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105873,"byte_end":105962,"line_start":81,"line_end":81,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":105963,"byte_end":106043,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106044,"byte_end":106047,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106048,"byte_end":106128,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106129,"byte_end":106205,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106206,"byte_end":106280,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106281,"byte_end":106332,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106333,"byte_end":106336,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106337,"byte_end":106355,"line_start":89,"line_end":89,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106356,"byte_end":106359,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106360,"byte_end":106451,"line_start":91,"line_end":91,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106452,"byte_end":106525,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ The year number is same to that of the [calendar date](#calendar-date).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106526,"byte_end":106601,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106602,"byte_end":106605,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106606,"byte_end":106671,"line_start":95,"line_end":95,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":363},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106872,"byte_end":106880,"line_start":102,"line_end":102,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106800,"byte_end":106861,"line_start":101,"line_end":101,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":364},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":107030,"byte_end":107038,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":106957,"byte_end":107019,"line_start":103,"line_end":103,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109348,"byte_end":109356,"line_start":161,"line_end":161,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"pub fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108618,"byte_end":108686,"line_start":141,"line_end":141,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108691,"byte_end":108717,"line_start":142,"line_end":142,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108722,"byte_end":108725,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108730,"byte_end":108792,"line_start":144,"line_end":144,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108797,"byte_end":108800,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108805,"byte_end":108818,"line_start":146,"line_end":146,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108823,"byte_end":108826,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108831,"byte_end":108839,"line_start":148,"line_end":148,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108844,"byte_end":108891,"line_start":149,"line_end":149,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108896,"byte_end":108899,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108904,"byte_end":108949,"line_start":151,"line_end":151,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108954,"byte_end":108985,"line_start":152,"line_end":152,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108990,"byte_end":109019,"line_start":153,"line_end":153,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109024,"byte_end":109052,"line_start":154,"line_end":154,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109057,"byte_end":109104,"line_start":155,"line_end":155,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109109,"byte_end":109151,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109156,"byte_end":109196,"line_start":157,"line_end":157,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109201,"byte_end":109243,"line_start":158,"line_end":158,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109248,"byte_end":109323,"line_start":159,"line_end":159,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109328,"byte_end":109336,"line_start":160,"line_end":160,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110207,"byte_end":110219,"line_start":184,"line_end":184,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"pub fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109505,"byte_end":109573,"line_start":165,"line_end":165,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109578,"byte_end":109604,"line_start":166,"line_end":166,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109609,"byte_end":109612,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109617,"byte_end":109687,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109692,"byte_end":109695,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109700,"byte_end":109713,"line_start":170,"line_end":170,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109718,"byte_end":109721,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109726,"byte_end":109734,"line_start":172,"line_end":172,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109739,"byte_end":109765,"line_start":173,"line_end":173,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109770,"byte_end":109773,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109778,"byte_end":109825,"line_start":175,"line_end":175,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109830,"byte_end":109833,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109838,"byte_end":109887,"line_start":177,"line_end":177,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109892,"byte_end":109941,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":109946,"byte_end":109995,"line_start":179,"line_end":179,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110000,"byte_end":110071,"line_start":180,"line_end":180,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110076,"byte_end":110126,"line_start":181,"line_end":181,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110131,"byte_end":110182,"line_start":182,"line_end":182,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110187,"byte_end":110195,"line_start":183,"line_end":183,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111113,"byte_end":111120,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"pub fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110398,"byte_end":110464,"line_start":189,"line_end":189,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110469,"byte_end":110500,"line_start":190,"line_end":190,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110505,"byte_end":110508,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110513,"byte_end":110576,"line_start":192,"line_end":192,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110581,"byte_end":110584,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110589,"byte_end":110602,"line_start":194,"line_end":194,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110607,"byte_end":110610,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110615,"byte_end":110623,"line_start":196,"line_end":196,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110628,"byte_end":110675,"line_start":197,"line_end":197,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110680,"byte_end":110683,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110688,"byte_end":110729,"line_start":199,"line_end":199,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110734,"byte_end":110766,"line_start":200,"line_end":200,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110771,"byte_end":110802,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110807,"byte_end":110836,"line_start":202,"line_end":202,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110841,"byte_end":110869,"line_start":203,"line_end":203,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110874,"byte_end":110916,"line_start":204,"line_end":204,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110921,"byte_end":110961,"line_start":205,"line_end":205,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":110966,"byte_end":111008,"line_start":206,"line_end":206,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111013,"byte_end":111088,"line_start":207,"line_end":207,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111093,"byte_end":111101,"line_start":208,"line_end":208,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111990,"byte_end":112001,"line_start":233,"line_end":233,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"pub fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111257,"byte_end":111323,"line_start":213,"line_end":213,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111328,"byte_end":111359,"line_start":214,"line_end":214,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111364,"byte_end":111367,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111372,"byte_end":111443,"line_start":216,"line_end":216,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111448,"byte_end":111451,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111456,"byte_end":111469,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111474,"byte_end":111477,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111482,"byte_end":111490,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111495,"byte_end":111521,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111526,"byte_end":111529,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111534,"byte_end":111579,"line_start":223,"line_end":223,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111584,"byte_end":111587,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111592,"byte_end":111638,"line_start":225,"line_end":225,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111643,"byte_end":111687,"line_start":226,"line_end":226,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111692,"byte_end":111738,"line_start":227,"line_end":227,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111743,"byte_end":111789,"line_start":228,"line_end":228,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111794,"byte_end":111862,"line_start":229,"line_end":229,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111867,"byte_end":111913,"line_start":230,"line_end":230,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111918,"byte_end":111965,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":111970,"byte_end":111978,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113007,"byte_end":113018,"line_start":259,"line_end":259,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"pub fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112167,"byte_end":112231,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112236,"byte_end":112280,"line_start":239,"line_end":239,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112285,"byte_end":112361,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112366,"byte_end":112369,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112374,"byte_end":112437,"line_start":242,"line_end":242,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112442,"byte_end":112445,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112450,"byte_end":112463,"line_start":244,"line_end":244,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112468,"byte_end":112471,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112476,"byte_end":112484,"line_start":246,"line_end":246,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112489,"byte_end":112536,"line_start":247,"line_end":247,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112541,"byte_end":112544,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112549,"byte_end":112608,"line_start":249,"line_end":249,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112613,"byte_end":112655,"line_start":250,"line_end":250,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112660,"byte_end":112700,"line_start":251,"line_end":251,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112705,"byte_end":112747,"line_start":252,"line_end":252,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112752,"byte_end":112783,"line_start":253,"line_end":253,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112788,"byte_end":112817,"line_start":254,"line_end":254,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112822,"byte_end":112850,"line_start":255,"line_end":255,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112855,"byte_end":112902,"line_start":256,"line_end":256,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112907,"byte_end":112982,"line_start":257,"line_end":257,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":112987,"byte_end":112995,"line_start":258,"line_end":258,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":115381,"byte_end":115396,"line_start":307,"line_end":307,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"pub fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113180,"byte_end":113244,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113249,"byte_end":113293,"line_start":264,"line_end":264,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113298,"byte_end":113374,"line_start":265,"line_end":265,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113379,"byte_end":113382,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113387,"byte_end":113458,"line_start":267,"line_end":267,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113463,"byte_end":113466,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113471,"byte_end":113484,"line_start":269,"line_end":269,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113489,"byte_end":113492,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113497,"byte_end":113505,"line_start":271,"line_end":271,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113510,"byte_end":113547,"line_start":272,"line_end":272,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113552,"byte_end":113555,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113560,"byte_end":113599,"line_start":274,"line_end":274,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113604,"byte_end":113657,"line_start":275,"line_end":275,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113662,"byte_end":113665,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113670,"byte_end":113731,"line_start":277,"line_end":277,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113736,"byte_end":113820,"line_start":278,"line_end":278,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113825,"byte_end":113910,"line_start":279,"line_end":279,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113915,"byte_end":113977,"line_start":280,"line_end":280,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113982,"byte_end":113985,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":113990,"byte_end":114054,"line_start":282,"line_end":282,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114059,"byte_end":114124,"line_start":283,"line_end":283,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114129,"byte_end":114137,"line_start":284,"line_end":284,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114142,"byte_end":114145,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114150,"byte_end":114229,"line_start":286,"line_end":286,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114234,"byte_end":114237,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114242,"byte_end":114250,"line_start":288,"line_end":288,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114255,"byte_end":114294,"line_start":289,"line_end":289,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114299,"byte_end":114340,"line_start":290,"line_end":290,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114345,"byte_end":114400,"line_start":291,"line_end":291,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114405,"byte_end":114442,"line_start":292,"line_end":292,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114447,"byte_end":114512,"line_start":293,"line_end":293,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114517,"byte_end":114583,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114588,"byte_end":114674,"line_start":295,"line_end":295,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114679,"byte_end":114741,"line_start":296,"line_end":296,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114746,"byte_end":114831,"line_start":297,"line_end":297,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114836,"byte_end":114839,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114844,"byte_end":114909,"line_start":299,"line_end":299,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114914,"byte_end":114979,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":114984,"byte_end":115021,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":115026,"byte_end":115112,"line_start":302,"line_end":302,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":115117,"byte_end":115201,"line_start":303,"line_end":303,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":115206,"byte_end":115268,"line_start":304,"line_end":304,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":115273,"byte_end":115356,"line_start":305,"line_end":305,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":115361,"byte_end":115369,"line_start":306,"line_end":306,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118274,"byte_end":118295,"line_start":377,"line_end":377,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"pub fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\n in the proleptic Gregorian calendar.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116546,"byte_end":116624,"line_start":333,"line_end":333,"column_start":5,"column_end":83}},{"value":"/ in the proleptic Gregorian calendar.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116629,"byte_end":116669,"line_start":334,"line_end":334,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116674,"byte_end":116677,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116682,"byte_end":116718,"line_start":336,"line_end":336,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116723,"byte_end":116726,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116731,"byte_end":116744,"line_start":338,"line_end":338,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116749,"byte_end":116752,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116757,"byte_end":116765,"line_start":340,"line_end":340,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116770,"byte_end":116817,"line_start":341,"line_end":341,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116822,"byte_end":116825,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116830,"byte_end":116883,"line_start":343,"line_end":343,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116888,"byte_end":116963,"line_start":344,"line_end":344,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":116968,"byte_end":116999,"line_start":345,"line_end":345,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117004,"byte_end":117033,"line_start":346,"line_end":346,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117038,"byte_end":117066,"line_start":347,"line_end":347,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117071,"byte_end":117118,"line_start":348,"line_end":348,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117123,"byte_end":117165,"line_start":349,"line_end":349,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117170,"byte_end":117210,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117215,"byte_end":117257,"line_start":351,"line_end":351,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117262,"byte_end":117270,"line_start":352,"line_end":352,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117275,"byte_end":117278,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117283,"byte_end":117326,"line_start":354,"line_end":354,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117331,"byte_end":117383,"line_start":355,"line_end":355,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117388,"byte_end":117450,"line_start":356,"line_end":356,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117455,"byte_end":117489,"line_start":357,"line_end":357,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117494,"byte_end":117548,"line_start":358,"line_end":358,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117553,"byte_end":117556,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117561,"byte_end":117569,"line_start":360,"line_end":360,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117574,"byte_end":117600,"line_start":361,"line_end":361,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117605,"byte_end":117608,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117613,"byte_end":117654,"line_start":363,"line_end":363,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117659,"byte_end":117720,"line_start":364,"line_end":364,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117725,"byte_end":117781,"line_start":365,"line_end":365,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117786,"byte_end":117840,"line_start":366,"line_end":366,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117845,"byte_end":117850,"line_start":367,"line_end":367,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117855,"byte_end":117858,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117863,"byte_end":117936,"line_start":369,"line_end":369,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":117941,"byte_end":118007,"line_start":370,"line_end":370,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118012,"byte_end":118015,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118020,"byte_end":118086,"line_start":372,"line_end":372,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118091,"byte_end":118161,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118166,"byte_end":118235,"line_start":374,"line_end":374,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118240,"byte_end":118248,"line_start":375,"line_end":375,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118253,"byte_end":118262,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119241,"byte_end":119266,"line_start":401,"line_end":401,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"pub fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\n in the proleptic Gregorian calendar.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118412,"byte_end":118490,"line_start":381,"line_end":381,"column_start":5,"column_end":83}},{"value":"/ in the proleptic Gregorian calendar.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118495,"byte_end":118535,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118540,"byte_end":118543,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118548,"byte_end":118592,"line_start":384,"line_end":384,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118597,"byte_end":118600,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118605,"byte_end":118618,"line_start":386,"line_end":386,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118623,"byte_end":118626,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118631,"byte_end":118639,"line_start":388,"line_end":388,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118644,"byte_end":118670,"line_start":389,"line_end":389,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118675,"byte_end":118678,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118683,"byte_end":118745,"line_start":391,"line_end":391,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118750,"byte_end":118789,"line_start":392,"line_end":392,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118794,"byte_end":118797,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118802,"byte_end":118875,"line_start":394,"line_end":394,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118880,"byte_end":118950,"line_start":395,"line_end":395,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":118955,"byte_end":119027,"line_start":396,"line_end":396,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119032,"byte_end":119104,"line_start":397,"line_end":397,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119109,"byte_end":119160,"line_start":398,"line_end":398,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119165,"byte_end":119216,"line_start":399,"line_end":399,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119221,"byte_end":119229,"line_start":400,"line_end":400,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121288,"byte_end":121302,"line_start":452,"line_end":452,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119719,"byte_end":119802,"line_start":410,"line_end":410,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119807,"byte_end":119877,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119882,"byte_end":119920,"line_start":412,"line_end":412,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119925,"byte_end":119928,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119933,"byte_end":119946,"line_start":414,"line_end":414,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119951,"byte_end":119954,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119959,"byte_end":119967,"line_start":416,"line_end":416,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":119972,"byte_end":119998,"line_start":417,"line_end":417,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120003,"byte_end":120006,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120011,"byte_end":120062,"line_start":419,"line_end":419,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120067,"byte_end":120070,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120075,"byte_end":120131,"line_start":421,"line_end":421,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120136,"byte_end":120188,"line_start":422,"line_end":422,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120193,"byte_end":120245,"line_start":423,"line_end":423,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120250,"byte_end":120302,"line_start":424,"line_end":424,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120307,"byte_end":120315,"line_start":425,"line_end":425,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120320,"byte_end":120323,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120328,"byte_end":120386,"line_start":427,"line_end":427,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120391,"byte_end":120394,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120399,"byte_end":120407,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120412,"byte_end":120440,"line_start":430,"line_end":430,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120445,"byte_end":120498,"line_start":431,"line_end":431,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120503,"byte_end":120584,"line_start":432,"line_end":432,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120589,"byte_end":120642,"line_start":433,"line_end":433,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120647,"byte_end":120655,"line_start":434,"line_end":434,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120660,"byte_end":120663,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120668,"byte_end":120725,"line_start":436,"line_end":436,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120730,"byte_end":120733,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120738,"byte_end":120746,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120751,"byte_end":120779,"line_start":439,"line_end":439,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120784,"byte_end":120837,"line_start":440,"line_end":440,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120842,"byte_end":120898,"line_start":441,"line_end":441,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120903,"byte_end":120965,"line_start":442,"line_end":442,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120970,"byte_end":120978,"line_start":443,"line_end":443,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120983,"byte_end":120986,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":120991,"byte_end":121073,"line_start":445,"line_end":445,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121078,"byte_end":121081,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121086,"byte_end":121094,"line_start":447,"line_end":447,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121099,"byte_end":121127,"line_start":448,"line_end":448,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121132,"byte_end":121185,"line_start":449,"line_end":449,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121190,"byte_end":121263,"line_start":450,"line_end":450,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121268,"byte_end":121276,"line_start":451,"line_end":451,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121956,"byte_end":121964,"line_start":473,"line_end":473,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121495,"byte_end":121571,"line_start":458,"line_end":458,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121576,"byte_end":121579,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121584,"byte_end":121597,"line_start":460,"line_end":460,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121602,"byte_end":121605,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121610,"byte_end":121618,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121623,"byte_end":121677,"line_start":463,"line_end":463,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121682,"byte_end":121685,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121690,"byte_end":121734,"line_start":465,"line_end":465,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121739,"byte_end":121794,"line_start":466,"line_end":466,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121799,"byte_end":121802,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121807,"byte_end":121849,"line_start":468,"line_end":468,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121854,"byte_end":121883,"line_start":469,"line_end":469,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121888,"byte_end":121917,"line_start":470,"line_end":470,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121922,"byte_end":121930,"line_start":471,"line_end":471,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":121935,"byte_end":121944,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122780,"byte_end":122787,"line_start":497,"line_end":497,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122059,"byte_end":122138,"line_start":477,"line_end":477,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122143,"byte_end":122146,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122151,"byte_end":122234,"line_start":479,"line_end":479,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122239,"byte_end":122313,"line_start":480,"line_end":480,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122318,"byte_end":122321,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122326,"byte_end":122375,"line_start":482,"line_end":482,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122380,"byte_end":122383,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122388,"byte_end":122401,"line_start":484,"line_end":484,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122406,"byte_end":122409,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122414,"byte_end":122422,"line_start":486,"line_end":486,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122427,"byte_end":122499,"line_start":487,"line_end":487,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122504,"byte_end":122507,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122512,"byte_end":122556,"line_start":489,"line_end":489,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122561,"byte_end":122564,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122569,"byte_end":122619,"line_start":491,"line_end":491,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122624,"byte_end":122656,"line_start":492,"line_end":492,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122661,"byte_end":122704,"line_start":493,"line_end":493,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122709,"byte_end":122741,"line_start":494,"line_end":494,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122746,"byte_end":122754,"line_start":495,"line_end":495,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122759,"byte_end":122768,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123673,"byte_end":123684,"line_start":520,"line_end":520,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":122920,"byte_end":122999,"line_start":501,"line_end":501,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123004,"byte_end":123007,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123012,"byte_end":123095,"line_start":503,"line_end":503,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123100,"byte_end":123178,"line_start":504,"line_end":504,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123183,"byte_end":123186,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123191,"byte_end":123248,"line_start":506,"line_end":506,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123253,"byte_end":123256,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123261,"byte_end":123274,"line_start":508,"line_end":508,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123279,"byte_end":123282,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123287,"byte_end":123295,"line_start":510,"line_end":510,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123300,"byte_end":123326,"line_start":511,"line_end":511,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123331,"byte_end":123334,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123339,"byte_end":123383,"line_start":513,"line_end":513,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123388,"byte_end":123437,"line_start":514,"line_end":514,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123442,"byte_end":123526,"line_start":515,"line_end":515,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123531,"byte_end":123580,"line_start":516,"line_end":516,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123585,"byte_end":123634,"line_start":517,"line_end":517,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123639,"byte_end":123647,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123652,"byte_end":123661,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124623,"byte_end":124636,"line_start":545,"line_end":545,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123841,"byte_end":123933,"line_start":524,"line_end":524,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123938,"byte_end":123941,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123946,"byte_end":123987,"line_start":526,"line_end":526,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":123992,"byte_end":124082,"line_start":527,"line_end":527,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124087,"byte_end":124090,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124095,"byte_end":124157,"line_start":529,"line_end":529,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124162,"byte_end":124165,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124170,"byte_end":124183,"line_start":531,"line_end":531,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124188,"byte_end":124191,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124196,"byte_end":124204,"line_start":533,"line_end":533,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124209,"byte_end":124281,"line_start":534,"line_end":534,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124286,"byte_end":124289,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124294,"byte_end":124338,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124343,"byte_end":124346,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124351,"byte_end":124412,"line_start":538,"line_end":538,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124417,"byte_end":124449,"line_start":539,"line_end":539,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124454,"byte_end":124497,"line_start":540,"line_end":540,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124502,"byte_end":124534,"line_start":541,"line_end":541,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124539,"byte_end":124584,"line_start":542,"line_end":542,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124589,"byte_end":124597,"line_start":543,"line_end":543,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124602,"byte_end":124611,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125709,"byte_end":125726,"line_start":570,"line_end":570,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124794,"byte_end":124886,"line_start":549,"line_end":549,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124891,"byte_end":124894,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124899,"byte_end":124940,"line_start":551,"line_end":551,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":124945,"byte_end":125035,"line_start":552,"line_end":552,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125040,"byte_end":125043,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125048,"byte_end":125118,"line_start":554,"line_end":554,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125123,"byte_end":125126,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125131,"byte_end":125144,"line_start":556,"line_end":556,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125149,"byte_end":125152,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125157,"byte_end":125165,"line_start":558,"line_end":558,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125170,"byte_end":125196,"line_start":559,"line_end":559,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125201,"byte_end":125204,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125209,"byte_end":125253,"line_start":561,"line_end":561,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125258,"byte_end":125320,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125325,"byte_end":125402,"line_start":563,"line_end":563,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125407,"byte_end":125469,"line_start":564,"line_end":564,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125474,"byte_end":125536,"line_start":565,"line_end":565,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125541,"byte_end":125603,"line_start":566,"line_end":566,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125608,"byte_end":125670,"line_start":567,"line_end":567,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125675,"byte_end":125683,"line_start":568,"line_end":568,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125688,"byte_end":125697,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126727,"byte_end":126740,"line_start":596,"line_end":596,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":125937,"byte_end":126029,"line_start":575,"line_end":575,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126034,"byte_end":126037,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126042,"byte_end":126087,"line_start":577,"line_end":577,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126092,"byte_end":126182,"line_start":578,"line_end":578,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126187,"byte_end":126190,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126195,"byte_end":126257,"line_start":580,"line_end":580,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126262,"byte_end":126265,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126270,"byte_end":126283,"line_start":582,"line_end":582,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126288,"byte_end":126291,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126296,"byte_end":126304,"line_start":584,"line_end":584,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126309,"byte_end":126381,"line_start":585,"line_end":585,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126386,"byte_end":126389,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126394,"byte_end":126438,"line_start":587,"line_end":587,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126443,"byte_end":126446,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126451,"byte_end":126516,"line_start":589,"line_end":589,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126521,"byte_end":126553,"line_start":590,"line_end":590,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126558,"byte_end":126601,"line_start":591,"line_end":591,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126606,"byte_end":126638,"line_start":592,"line_end":592,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126643,"byte_end":126688,"line_start":593,"line_end":593,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126693,"byte_end":126701,"line_start":594,"line_end":594,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126706,"byte_end":126715,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127841,"byte_end":127858,"line_start":621,"line_end":621,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126898,"byte_end":126990,"line_start":600,"line_end":600,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":126995,"byte_end":126998,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127003,"byte_end":127048,"line_start":602,"line_end":602,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127053,"byte_end":127143,"line_start":603,"line_end":603,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127148,"byte_end":127151,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127156,"byte_end":127226,"line_start":605,"line_end":605,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127231,"byte_end":127234,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127239,"byte_end":127252,"line_start":607,"line_end":607,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127257,"byte_end":127260,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127265,"byte_end":127273,"line_start":609,"line_end":609,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127278,"byte_end":127304,"line_start":610,"line_end":610,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127309,"byte_end":127312,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127317,"byte_end":127361,"line_start":612,"line_end":612,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127366,"byte_end":127432,"line_start":613,"line_end":613,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127437,"byte_end":127518,"line_start":614,"line_end":614,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127523,"byte_end":127589,"line_start":615,"line_end":615,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127594,"byte_end":127660,"line_start":616,"line_end":616,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127665,"byte_end":127731,"line_start":617,"line_end":617,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127736,"byte_end":127802,"line_start":618,"line_end":618,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127807,"byte_end":127815,"line_start":619,"line_end":619,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":127820,"byte_end":127829,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128863,"byte_end":128875,"line_start":647,"line_end":647,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128069,"byte_end":128160,"line_start":626,"line_end":626,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128165,"byte_end":128168,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128173,"byte_end":128221,"line_start":628,"line_end":628,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128226,"byte_end":128316,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128321,"byte_end":128324,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128329,"byte_end":128390,"line_start":631,"line_end":631,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128395,"byte_end":128398,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128403,"byte_end":128416,"line_start":633,"line_end":633,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128421,"byte_end":128424,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128429,"byte_end":128437,"line_start":635,"line_end":635,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128442,"byte_end":128514,"line_start":636,"line_end":636,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128519,"byte_end":128522,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128527,"byte_end":128571,"line_start":638,"line_end":638,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128576,"byte_end":128579,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128584,"byte_end":128652,"line_start":640,"line_end":640,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128657,"byte_end":128689,"line_start":641,"line_end":641,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128694,"byte_end":128737,"line_start":642,"line_end":642,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128742,"byte_end":128774,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128779,"byte_end":128824,"line_start":644,"line_end":644,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128829,"byte_end":128837,"line_start":645,"line_end":645,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":128842,"byte_end":128851,"line_start":646,"line_end":646,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129992,"byte_end":130008,"line_start":672,"line_end":672,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129030,"byte_end":129121,"line_start":651,"line_end":651,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129126,"byte_end":129129,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129134,"byte_end":129182,"line_start":653,"line_end":653,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129187,"byte_end":129277,"line_start":654,"line_end":654,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129282,"byte_end":129285,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129290,"byte_end":129359,"line_start":656,"line_end":656,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129364,"byte_end":129367,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129372,"byte_end":129385,"line_start":658,"line_end":658,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129390,"byte_end":129393,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129398,"byte_end":129406,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129411,"byte_end":129437,"line_start":661,"line_end":661,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129442,"byte_end":129445,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129450,"byte_end":129494,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129499,"byte_end":129568,"line_start":664,"line_end":664,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129573,"byte_end":129657,"line_start":665,"line_end":665,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129662,"byte_end":129731,"line_start":666,"line_end":666,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129736,"byte_end":129805,"line_start":667,"line_end":667,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129810,"byte_end":129879,"line_start":668,"line_end":668,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129884,"byte_end":129953,"line_start":669,"line_end":669,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129958,"byte_end":129966,"line_start":670,"line_end":670,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":129971,"byte_end":129980,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131681,"byte_end":131685,"line_start":724,"line_end":724,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"pub fn succ(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131149,"byte_end":131204,"line_start":710,"line_end":710,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131209,"byte_end":131212,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131217,"byte_end":131271,"line_start":712,"line_end":712,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131276,"byte_end":131279,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131284,"byte_end":131297,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131302,"byte_end":131305,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131310,"byte_end":131318,"line_start":716,"line_end":716,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131323,"byte_end":131349,"line_start":717,"line_end":717,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131354,"byte_end":131357,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131362,"byte_end":131452,"line_start":719,"line_end":719,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131457,"byte_end":131547,"line_start":720,"line_end":720,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131552,"byte_end":131642,"line_start":721,"line_end":721,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131647,"byte_end":131655,"line_start":722,"line_end":722,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131660,"byte_end":131669,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132227,"byte_end":132235,"line_start":743,"line_end":743,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131766,"byte_end":131821,"line_start":728,"line_end":728,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131826,"byte_end":131829,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131834,"byte_end":131896,"line_start":730,"line_end":730,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131901,"byte_end":131904,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131909,"byte_end":131922,"line_start":732,"line_end":732,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131927,"byte_end":131930,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131935,"byte_end":131943,"line_start":734,"line_end":734,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131948,"byte_end":131974,"line_start":735,"line_end":735,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":131979,"byte_end":132011,"line_start":736,"line_end":736,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132016,"byte_end":132019,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132024,"byte_end":132082,"line_start":738,"line_end":738,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132087,"byte_end":132141,"line_start":739,"line_end":739,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132146,"byte_end":132188,"line_start":740,"line_end":740,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132193,"byte_end":132201,"line_start":741,"line_end":741,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132206,"byte_end":132215,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132912,"byte_end":132916,"line_start":761,"line_end":761,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"pub fn pred(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132375,"byte_end":132434,"line_start":747,"line_end":747,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132439,"byte_end":132442,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132447,"byte_end":132502,"line_start":749,"line_end":749,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132507,"byte_end":132510,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132515,"byte_end":132528,"line_start":751,"line_end":751,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132533,"byte_end":132536,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132541,"byte_end":132549,"line_start":753,"line_end":753,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132554,"byte_end":132580,"line_start":754,"line_end":754,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132585,"byte_end":132588,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132593,"byte_end":132683,"line_start":756,"line_end":756,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132688,"byte_end":132778,"line_start":757,"line_end":757,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132783,"byte_end":132873,"line_start":758,"line_end":758,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132878,"byte_end":132886,"line_start":759,"line_end":759,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132891,"byte_end":132900,"line_start":760,"line_end":760,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133463,"byte_end":133471,"line_start":780,"line_end":780,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":132997,"byte_end":133056,"line_start":765,"line_end":765,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133061,"byte_end":133064,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133069,"byte_end":133132,"line_start":767,"line_end":767,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133137,"byte_end":133140,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133145,"byte_end":133158,"line_start":769,"line_end":769,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133163,"byte_end":133166,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133171,"byte_end":133179,"line_start":771,"line_end":771,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133184,"byte_end":133210,"line_start":772,"line_end":772,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133215,"byte_end":133247,"line_start":773,"line_end":773,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133252,"byte_end":133255,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133260,"byte_end":133318,"line_start":775,"line_end":775,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133323,"byte_end":133377,"line_start":776,"line_end":776,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133382,"byte_end":133424,"line_start":777,"line_end":777,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133429,"byte_end":133437,"line_start":778,"line_end":778,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133442,"byte_end":133451,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134518,"byte_end":134536,"line_start":806,"line_end":806,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133613,"byte_end":133678,"line_start":784,"line_end":784,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133683,"byte_end":133686,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133691,"byte_end":133742,"line_start":786,"line_end":786,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133747,"byte_end":133750,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133755,"byte_end":133768,"line_start":788,"line_end":788,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133773,"byte_end":133776,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133781,"byte_end":133789,"line_start":790,"line_end":790,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133794,"byte_end":133851,"line_start":791,"line_end":791,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133856,"byte_end":133882,"line_start":792,"line_end":792,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133887,"byte_end":133919,"line_start":793,"line_end":793,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133924,"byte_end":133947,"line_start":794,"line_end":794,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133952,"byte_end":133955,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":133960,"byte_end":134004,"line_start":796,"line_end":796,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134009,"byte_end":134065,"line_start":797,"line_end":797,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134070,"byte_end":134126,"line_start":798,"line_end":798,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134131,"byte_end":134188,"line_start":799,"line_end":799,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134193,"byte_end":134248,"line_start":800,"line_end":800,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134253,"byte_end":134327,"line_start":801,"line_end":801,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134332,"byte_end":134407,"line_start":802,"line_end":802,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134412,"byte_end":134481,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134486,"byte_end":134493,"line_start":804,"line_end":804,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":134498,"byte_end":134506,"line_start":805,"line_end":805,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":136169,"byte_end":136187,"line_start":842,"line_end":842,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135257,"byte_end":135329,"line_start":820,"line_end":820,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135334,"byte_end":135337,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135342,"byte_end":135393,"line_start":822,"line_end":822,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135398,"byte_end":135401,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135406,"byte_end":135419,"line_start":824,"line_end":824,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135424,"byte_end":135427,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135432,"byte_end":135440,"line_start":826,"line_end":826,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135445,"byte_end":135502,"line_start":827,"line_end":827,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135507,"byte_end":135533,"line_start":828,"line_end":828,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135538,"byte_end":135570,"line_start":829,"line_end":829,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135575,"byte_end":135598,"line_start":830,"line_end":830,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135603,"byte_end":135606,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135611,"byte_end":135655,"line_start":832,"line_end":832,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135660,"byte_end":135716,"line_start":833,"line_end":833,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135721,"byte_end":135776,"line_start":834,"line_end":834,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135781,"byte_end":135838,"line_start":835,"line_end":835,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135843,"byte_end":135899,"line_start":836,"line_end":836,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135904,"byte_end":135978,"line_start":837,"line_end":837,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":135983,"byte_end":136058,"line_start":838,"line_end":838,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":136063,"byte_end":136132,"line_start":839,"line_end":839,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":136137,"byte_end":136144,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":136149,"byte_end":136157,"line_start":841,"line_end":841,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138113,"byte_end":138134,"line_start":881,"line_end":881,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":136908,"byte_end":136964,"line_start":856,"line_end":856,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":136969,"byte_end":137014,"line_start":857,"line_end":857,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137019,"byte_end":137022,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137027,"byte_end":137074,"line_start":859,"line_end":859,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137079,"byte_end":137138,"line_start":860,"line_end":860,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137143,"byte_end":137146,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137151,"byte_end":137164,"line_start":862,"line_end":862,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137169,"byte_end":137172,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137177,"byte_end":137185,"line_start":864,"line_end":864,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137190,"byte_end":137247,"line_start":865,"line_end":865,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137252,"byte_end":137278,"line_start":866,"line_end":866,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137283,"byte_end":137306,"line_start":867,"line_end":867,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137311,"byte_end":137314,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137319,"byte_end":137358,"line_start":869,"line_end":869,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137363,"byte_end":137412,"line_start":870,"line_end":870,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137417,"byte_end":137420,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137425,"byte_end":137509,"line_start":872,"line_end":872,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137514,"byte_end":137601,"line_start":873,"line_end":873,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137606,"byte_end":137692,"line_start":874,"line_end":874,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137697,"byte_end":137785,"line_start":875,"line_end":875,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137790,"byte_end":137877,"line_start":876,"line_end":876,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137882,"byte_end":137975,"line_start":877,"line_end":877,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":137980,"byte_end":138076,"line_start":878,"line_end":878,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138081,"byte_end":138088,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138093,"byte_end":138101,"line_start":880,"line_end":880,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139835,"byte_end":139852,"line_start":920,"line_end":920,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"pub fn format_with_items<'a, I>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = Item> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is same to the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138728,"byte_end":138785,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary `format` method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138790,"byte_end":138847,"line_start":893,"line_end":893,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138852,"byte_end":138855,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138860,"byte_end":138910,"line_start":895,"line_end":895,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138915,"byte_end":138993,"line_start":896,"line_end":896,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":138998,"byte_end":139001,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139006,"byte_end":139019,"line_start":898,"line_end":898,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139024,"byte_end":139027,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139032,"byte_end":139040,"line_start":900,"line_end":900,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139045,"byte_end":139071,"line_start":901,"line_end":901,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139076,"byte_end":139124,"line_start":902,"line_end":902,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139129,"byte_end":139132,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139137,"byte_end":139182,"line_start":904,"line_end":904,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139187,"byte_end":139231,"line_start":905,"line_end":905,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139236,"byte_end":139311,"line_start":906,"line_end":906,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139316,"byte_end":139391,"line_start":907,"line_end":907,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139396,"byte_end":139404,"line_start":908,"line_end":908,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139409,"byte_end":139412,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139417,"byte_end":139501,"line_start":910,"line_end":910,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139506,"byte_end":139509,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139514,"byte_end":139522,"line_start":912,"line_end":912,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139527,"byte_end":139555,"line_start":913,"line_end":913,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139560,"byte_end":139610,"line_start":914,"line_end":914,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139615,"byte_end":139670,"line_start":915,"line_end":915,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139675,"byte_end":139721,"line_start":916,"line_end":916,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139726,"byte_end":139796,"line_start":917,"line_end":917,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139801,"byte_end":139809,"line_start":918,"line_end":918,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":139814,"byte_end":139823,"line_start":919,"line_end":919,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141450,"byte_end":141456,"line_start":958,"line_end":958,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140016,"byte_end":140070,"line_start":925,"line_end":925,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140075,"byte_end":140145,"line_start":926,"line_end":926,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140150,"byte_end":140188,"line_start":927,"line_end":927,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140193,"byte_end":140196,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140201,"byte_end":140236,"line_start":929,"line_end":929,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140241,"byte_end":140314,"line_start":930,"line_end":930,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140319,"byte_end":140376,"line_start":931,"line_end":931,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140381,"byte_end":140443,"line_start":932,"line_end":932,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140448,"byte_end":140508,"line_start":933,"line_end":933,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140513,"byte_end":140516,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140521,"byte_end":140585,"line_start":935,"line_end":935,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140590,"byte_end":140653,"line_start":936,"line_end":936,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140658,"byte_end":140733,"line_start":937,"line_end":937,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140738,"byte_end":140741,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140746,"byte_end":140759,"line_start":939,"line_end":939,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140764,"byte_end":140767,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140772,"byte_end":140780,"line_start":941,"line_end":941,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140785,"byte_end":140811,"line_start":942,"line_end":942,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140816,"byte_end":140819,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140824,"byte_end":140868,"line_start":944,"line_end":944,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140873,"byte_end":140936,"line_start":945,"line_end":945,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":140941,"byte_end":141029,"line_start":946,"line_end":946,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141034,"byte_end":141042,"line_start":947,"line_end":947,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141047,"byte_end":141050,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141055,"byte_end":141139,"line_start":949,"line_end":949,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141144,"byte_end":141147,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141152,"byte_end":141160,"line_start":951,"line_end":951,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141165,"byte_end":141193,"line_start":952,"line_end":952,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141198,"byte_end":141244,"line_start":953,"line_end":953,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141249,"byte_end":141315,"line_start":954,"line_end":954,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141320,"byte_end":141411,"line_start":955,"line_end":955,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141416,"byte_end":141424,"line_start":956,"line_end":956,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141429,"byte_end":141438,"line_start":957,"line_end":957,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1419},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":185996,"byte_end":186003,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1420}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":185590,"byte_end":185608,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":185609,"byte_end":185612,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":185613,"byte_end":185676,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":185677,"byte_end":185752,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":185753,"byte_end":185844,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":185845,"byte_end":185929,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187941,"byte_end":187945,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"pub fn year(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187283,"byte_end":187329,"line_start":47,"line_end":47,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187334,"byte_end":187337,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187342,"byte_end":187355,"line_start":49,"line_end":49,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187360,"byte_end":187363,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187368,"byte_end":187376,"line_start":51,"line_end":51,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187381,"byte_end":187428,"line_start":52,"line_end":52,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187433,"byte_end":187436,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187441,"byte_end":187499,"line_start":54,"line_end":54,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187504,"byte_end":187546,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187551,"byte_end":187559,"line_start":56,"line_end":56,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187564,"byte_end":187567,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187572,"byte_end":187634,"line_start":58,"line_end":58,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187639,"byte_end":187668,"line_start":59,"line_end":59,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187673,"byte_end":187676,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187681,"byte_end":187689,"line_start":61,"line_end":61,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187694,"byte_end":187743,"line_start":62,"line_end":62,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187748,"byte_end":187808,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187813,"byte_end":187844,"line_start":64,"line_end":64,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187849,"byte_end":187902,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187907,"byte_end":187915,"line_start":66,"line_end":66,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187920,"byte_end":187929,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188395,"byte_end":188399,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"pub fn week(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187996,"byte_end":188044,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188049,"byte_end":188052,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188057,"byte_end":188140,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188145,"byte_end":188148,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188153,"byte_end":188166,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188171,"byte_end":188174,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188179,"byte_end":188187,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188192,"byte_end":188239,"line_start":79,"line_end":79,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188244,"byte_end":188247,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188252,"byte_end":188311,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188316,"byte_end":188356,"line_start":82,"line_end":82,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188361,"byte_end":188369,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188374,"byte_end":188383,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188867,"byte_end":188872,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"pub fn week0(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188467,"byte_end":188515,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188520,"byte_end":188523,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188528,"byte_end":188611,"line_start":91,"line_end":91,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188616,"byte_end":188619,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188624,"byte_end":188637,"line_start":93,"line_end":93,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188642,"byte_end":188645,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188650,"byte_end":188658,"line_start":95,"line_end":95,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188663,"byte_end":188710,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188715,"byte_end":188718,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188723,"byte_end":188782,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188787,"byte_end":188828,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188833,"byte_end":188841,"line_start":100,"line_end":100,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":188846,"byte_end":188855,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198484,"byte_end":198493,"line_start":175,"line_end":175,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191273,"byte_end":191308,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191309,"byte_end":191389,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191390,"byte_end":191393,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191394,"byte_end":191420,"line_start":18,"line_end":18,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191421,"byte_end":191424,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191425,"byte_end":191492,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191493,"byte_end":191546,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191547,"byte_end":191625,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191626,"byte_end":191696,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191697,"byte_end":191775,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191776,"byte_end":191865,"line_start":25,"line_end":25,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191866,"byte_end":191936,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":191937,"byte_end":192014,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192015,"byte_end":192046,"line_start":28,"line_end":28,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192047,"byte_end":192130,"line_start":29,"line_end":29,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192131,"byte_end":192214,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192215,"byte_end":192218,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192219,"byte_end":192256,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192257,"byte_end":192325,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192326,"byte_end":192402,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192403,"byte_end":192484,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192485,"byte_end":192559,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192560,"byte_end":192630,"line_start":37,"line_end":37,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192631,"byte_end":192716,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192717,"byte_end":192786,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192787,"byte_end":192790,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192791,"byte_end":192870,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192871,"byte_end":192966,"line_start":42,"line_end":42,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":192967,"byte_end":193029,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193030,"byte_end":193093,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193094,"byte_end":193097,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193098,"byte_end":193139,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193140,"byte_end":193219,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193220,"byte_end":193300,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193301,"byte_end":193372,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193373,"byte_end":193376,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193377,"byte_end":193409,"line_start":51,"line_end":51,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193410,"byte_end":193413,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193414,"byte_end":193489,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193490,"byte_end":193565,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193566,"byte_end":193614,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193615,"byte_end":193683,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193684,"byte_end":193687,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193688,"byte_end":193757,"line_start":58,"line_end":58,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193758,"byte_end":193761,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193762,"byte_end":193770,"line_start":60,"line_end":60,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193771,"byte_end":193825,"line_start":61,"line_end":61,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193826,"byte_end":193829,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193830,"byte_end":193886,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193887,"byte_end":193890,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193891,"byte_end":193973,"line_start":65,"line_end":65,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193974,"byte_end":193977,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":193978,"byte_end":194053,"line_start":67,"line_end":67,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194054,"byte_end":194082,"line_start":68,"line_end":68,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194083,"byte_end":194091,"line_start":69,"line_end":69,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194092,"byte_end":194095,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194096,"byte_end":194176,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194177,"byte_end":194256,"line_start":72,"line_end":72,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194257,"byte_end":194342,"line_start":73,"line_end":73,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194343,"byte_end":194430,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194431,"byte_end":194434,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194435,"byte_end":194467,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194468,"byte_end":194471,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194472,"byte_end":194560,"line_start":78,"line_end":78,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194561,"byte_end":194636,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194637,"byte_end":194711,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194712,"byte_end":194715,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194716,"byte_end":194737,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194738,"byte_end":194824,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194825,"byte_end":194828,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194829,"byte_end":194862,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194863,"byte_end":194897,"line_start":86,"line_end":86,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194898,"byte_end":194931,"line_start":87,"line_end":87,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194932,"byte_end":194965,"line_start":88,"line_end":88,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":194966,"byte_end":195019,"line_start":89,"line_end":89,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195020,"byte_end":195054,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195055,"byte_end":195089,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195090,"byte_end":195129,"line_start":92,"line_end":92,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195130,"byte_end":195133,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195134,"byte_end":195155,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195156,"byte_end":195242,"line_start":95,"line_end":95,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195243,"byte_end":195246,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195247,"byte_end":195280,"line_start":97,"line_end":97,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195281,"byte_end":195314,"line_start":98,"line_end":98,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195315,"byte_end":195349,"line_start":99,"line_end":99,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195350,"byte_end":195384,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195385,"byte_end":195441,"line_start":101,"line_end":101,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195442,"byte_end":195481,"line_start":102,"line_end":102,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195482,"byte_end":195521,"line_start":103,"line_end":103,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195522,"byte_end":195525,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195526,"byte_end":195543,"line_start":105,"line_end":105,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195544,"byte_end":195628,"line_start":106,"line_end":106,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195629,"byte_end":195632,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195633,"byte_end":195669,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195670,"byte_end":195704,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195705,"byte_end":195739,"line_start":110,"line_end":110,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195740,"byte_end":195800,"line_start":111,"line_end":111,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195801,"byte_end":195840,"line_start":112,"line_end":112,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195841,"byte_end":195878,"line_start":113,"line_end":113,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195879,"byte_end":195916,"line_start":114,"line_end":114,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195917,"byte_end":195976,"line_start":115,"line_end":115,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":195977,"byte_end":196053,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196054,"byte_end":196086,"line_start":117,"line_end":117,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196087,"byte_end":196168,"line_start":118,"line_end":118,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196169,"byte_end":196207,"line_start":119,"line_end":119,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196208,"byte_end":196211,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196212,"byte_end":196227,"line_start":121,"line_end":121,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196228,"byte_end":196231,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196232,"byte_end":196300,"line_start":123,"line_end":123,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196301,"byte_end":196304,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196305,"byte_end":196376,"line_start":125,"line_end":125,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196377,"byte_end":196380,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196381,"byte_end":196448,"line_start":127,"line_end":127,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196449,"byte_end":196452,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196453,"byte_end":196505,"line_start":129,"line_end":129,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196506,"byte_end":196597,"line_start":130,"line_end":130,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196598,"byte_end":196631,"line_start":131,"line_end":131,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196632,"byte_end":196635,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196636,"byte_end":196726,"line_start":133,"line_end":133,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196727,"byte_end":196730,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196731,"byte_end":196806,"line_start":135,"line_end":135,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196807,"byte_end":196846,"line_start":136,"line_end":136,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196847,"byte_end":196932,"line_start":137,"line_end":137,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196933,"byte_end":196970,"line_start":138,"line_end":138,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196971,"byte_end":196974,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":196975,"byte_end":197014,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197015,"byte_end":197018,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197019,"byte_end":197076,"line_start":142,"line_end":142,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197077,"byte_end":197134,"line_start":143,"line_end":143,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197135,"byte_end":197191,"line_start":144,"line_end":144,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197192,"byte_end":197269,"line_start":145,"line_end":145,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197270,"byte_end":197273,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197274,"byte_end":197282,"line_start":147,"line_end":147,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197283,"byte_end":197315,"line_start":148,"line_end":148,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197316,"byte_end":197319,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197320,"byte_end":197387,"line_start":150,"line_end":150,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197388,"byte_end":197448,"line_start":151,"line_end":151,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197449,"byte_end":197457,"line_start":152,"line_end":152,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197458,"byte_end":197461,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197462,"byte_end":197528,"line_start":154,"line_end":154,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197529,"byte_end":197566,"line_start":155,"line_end":155,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197567,"byte_end":197633,"line_start":156,"line_end":156,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197634,"byte_end":197731,"line_start":157,"line_end":157,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197732,"byte_end":197797,"line_start":158,"line_end":158,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197798,"byte_end":197853,"line_start":159,"line_end":159,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197854,"byte_end":197857,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197858,"byte_end":197866,"line_start":161,"line_end":161,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197867,"byte_end":197909,"line_start":162,"line_end":162,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197910,"byte_end":197913,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197914,"byte_end":197980,"line_start":164,"line_end":164,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":197981,"byte_end":198041,"line_start":165,"line_end":165,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198042,"byte_end":198045,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198046,"byte_end":198099,"line_start":167,"line_end":167,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198100,"byte_end":198160,"line_start":168,"line_end":168,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198161,"byte_end":198243,"line_start":169,"line_end":169,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198244,"byte_end":198252,"line_start":170,"line_end":170,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198253,"byte_end":198256,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198257,"byte_end":198327,"line_start":172,"line_end":172,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198328,"byte_end":198417,"line_start":173,"line_end":173,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199151,"byte_end":199159,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"pub fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198550,"byte_end":198607,"line_start":181,"line_end":181,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198612,"byte_end":198615,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198620,"byte_end":198680,"line_start":183,"line_end":183,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198685,"byte_end":198760,"line_start":184,"line_end":184,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198765,"byte_end":198768,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198773,"byte_end":198822,"line_start":186,"line_end":186,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198827,"byte_end":198830,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198835,"byte_end":198848,"line_start":188,"line_end":188,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198853,"byte_end":198856,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198861,"byte_end":198869,"line_start":190,"line_end":190,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198874,"byte_end":198912,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198917,"byte_end":198920,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198925,"byte_end":198968,"line_start":193,"line_end":193,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198973,"byte_end":199002,"line_start":194,"line_end":194,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199007,"byte_end":199038,"line_start":195,"line_end":195,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199043,"byte_end":199073,"line_start":196,"line_end":196,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199078,"byte_end":199112,"line_start":197,"line_end":197,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199117,"byte_end":199125,"line_start":198,"line_end":198,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199130,"byte_end":199139,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200016,"byte_end":200028,"line_start":225,"line_end":225,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"pub fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199288,"byte_end":199345,"line_start":204,"line_end":204,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199350,"byte_end":199353,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199358,"byte_end":199418,"line_start":206,"line_end":206,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199423,"byte_end":199502,"line_start":207,"line_end":207,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199507,"byte_end":199510,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199515,"byte_end":199572,"line_start":209,"line_end":209,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199577,"byte_end":199580,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199585,"byte_end":199598,"line_start":211,"line_end":211,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199603,"byte_end":199606,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199611,"byte_end":199619,"line_start":213,"line_end":213,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199624,"byte_end":199650,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199655,"byte_end":199658,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199663,"byte_end":199710,"line_start":216,"line_end":216,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199715,"byte_end":199718,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199723,"byte_end":199768,"line_start":218,"line_end":218,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199773,"byte_end":199821,"line_start":219,"line_end":219,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199826,"byte_end":199872,"line_start":220,"line_end":220,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199877,"byte_end":199924,"line_start":221,"line_end":221,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199929,"byte_end":199977,"line_start":222,"line_end":222,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199982,"byte_end":199990,"line_start":223,"line_end":223,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":199995,"byte_end":200004,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200769,"byte_end":200783,"line_start":248,"line_end":248,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"pub fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200150,"byte_end":200220,"line_start":229,"line_end":229,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200225,"byte_end":200228,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200233,"byte_end":200274,"line_start":231,"line_end":231,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200279,"byte_end":200346,"line_start":232,"line_end":232,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200351,"byte_end":200354,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200359,"byte_end":200421,"line_start":234,"line_end":234,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200426,"byte_end":200429,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200434,"byte_end":200447,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200452,"byte_end":200455,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200460,"byte_end":200468,"line_start":238,"line_end":238,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200473,"byte_end":200511,"line_start":239,"line_end":239,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200516,"byte_end":200519,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200524,"byte_end":200577,"line_start":241,"line_end":241,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200582,"byte_end":200611,"line_start":242,"line_end":242,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200616,"byte_end":200647,"line_start":243,"line_end":243,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200652,"byte_end":200682,"line_start":244,"line_end":244,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200687,"byte_end":200730,"line_start":245,"line_end":245,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200735,"byte_end":200743,"line_start":246,"line_end":246,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200748,"byte_end":200757,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201843,"byte_end":201861,"line_start":275,"line_end":275,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"pub fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":200937,"byte_end":201007,"line_start":252,"line_end":252,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201012,"byte_end":201015,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201020,"byte_end":201061,"line_start":254,"line_end":254,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201066,"byte_end":201133,"line_start":255,"line_end":255,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201138,"byte_end":201141,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201146,"byte_end":201216,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201221,"byte_end":201224,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201229,"byte_end":201242,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201247,"byte_end":201250,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201255,"byte_end":201263,"line_start":261,"line_end":261,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201268,"byte_end":201294,"line_start":262,"line_end":262,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201299,"byte_end":201302,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201307,"byte_end":201361,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201366,"byte_end":201369,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201374,"byte_end":201423,"line_start":266,"line_end":266,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201428,"byte_end":201482,"line_start":267,"line_end":267,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201487,"byte_end":201575,"line_start":268,"line_end":268,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201580,"byte_end":201630,"line_start":269,"line_end":269,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201635,"byte_end":201686,"line_start":270,"line_end":270,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201691,"byte_end":201743,"line_start":271,"line_end":271,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201748,"byte_end":201804,"line_start":272,"line_end":272,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201809,"byte_end":201817,"line_start":273,"line_end":273,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":201822,"byte_end":201831,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202685,"byte_end":202699,"line_start":299,"line_end":299,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"pub fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202058,"byte_end":202128,"line_start":280,"line_end":280,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202133,"byte_end":202136,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202141,"byte_end":202186,"line_start":282,"line_end":282,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202191,"byte_end":202258,"line_start":283,"line_end":283,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202263,"byte_end":202266,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202271,"byte_end":202333,"line_start":285,"line_end":285,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202338,"byte_end":202341,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202346,"byte_end":202359,"line_start":287,"line_end":287,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202364,"byte_end":202367,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202372,"byte_end":202380,"line_start":289,"line_end":289,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202385,"byte_end":202423,"line_start":290,"line_end":290,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202428,"byte_end":202431,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202436,"byte_end":202493,"line_start":292,"line_end":292,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202498,"byte_end":202527,"line_start":293,"line_end":293,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202532,"byte_end":202563,"line_start":294,"line_end":294,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202568,"byte_end":202598,"line_start":295,"line_end":295,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202603,"byte_end":202646,"line_start":296,"line_end":296,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202651,"byte_end":202659,"line_start":297,"line_end":297,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202664,"byte_end":202673,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203775,"byte_end":203793,"line_start":326,"line_end":326,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"pub fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202853,"byte_end":202923,"line_start":303,"line_end":303,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202928,"byte_end":202931,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202936,"byte_end":202981,"line_start":305,"line_end":305,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":202986,"byte_end":203053,"line_start":306,"line_end":306,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203058,"byte_end":203061,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203066,"byte_end":203136,"line_start":308,"line_end":308,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203141,"byte_end":203144,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203149,"byte_end":203162,"line_start":310,"line_end":310,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203167,"byte_end":203170,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203175,"byte_end":203183,"line_start":312,"line_end":312,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203188,"byte_end":203214,"line_start":313,"line_end":313,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203219,"byte_end":203222,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203227,"byte_end":203281,"line_start":315,"line_end":315,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203286,"byte_end":203289,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203294,"byte_end":203343,"line_start":317,"line_end":317,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203348,"byte_end":203406,"line_start":318,"line_end":318,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203411,"byte_end":203503,"line_start":319,"line_end":319,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203508,"byte_end":203558,"line_start":320,"line_end":320,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203563,"byte_end":203614,"line_start":321,"line_end":321,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203619,"byte_end":203671,"line_start":322,"line_end":322,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203676,"byte_end":203736,"line_start":323,"line_end":323,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203741,"byte_end":203749,"line_start":324,"line_end":324,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203754,"byte_end":203763,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204617,"byte_end":204630,"line_start":350,"line_end":350,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"pub fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":203986,"byte_end":204055,"line_start":331,"line_end":331,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204060,"byte_end":204063,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204068,"byte_end":204116,"line_start":333,"line_end":333,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204121,"byte_end":204188,"line_start":334,"line_end":334,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204193,"byte_end":204196,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204201,"byte_end":204262,"line_start":336,"line_end":336,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204267,"byte_end":204270,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204275,"byte_end":204288,"line_start":338,"line_end":338,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204293,"byte_end":204296,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204301,"byte_end":204309,"line_start":340,"line_end":340,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204314,"byte_end":204352,"line_start":341,"line_end":341,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204357,"byte_end":204360,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204365,"byte_end":204425,"line_start":343,"line_end":343,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204430,"byte_end":204459,"line_start":344,"line_end":344,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204464,"byte_end":204495,"line_start":345,"line_end":345,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204500,"byte_end":204530,"line_start":346,"line_end":346,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204535,"byte_end":204578,"line_start":347,"line_end":347,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204583,"byte_end":204591,"line_start":348,"line_end":348,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204596,"byte_end":204605,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205715,"byte_end":205732,"line_start":377,"line_end":377,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"pub fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204781,"byte_end":204850,"line_start":354,"line_end":354,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204855,"byte_end":204858,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204863,"byte_end":204911,"line_start":356,"line_end":356,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204916,"byte_end":204983,"line_start":357,"line_end":357,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204988,"byte_end":204991,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":204996,"byte_end":205065,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205070,"byte_end":205073,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205078,"byte_end":205091,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205096,"byte_end":205099,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205104,"byte_end":205112,"line_start":363,"line_end":363,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205117,"byte_end":205143,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205148,"byte_end":205151,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205156,"byte_end":205209,"line_start":366,"line_end":366,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205214,"byte_end":205217,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205222,"byte_end":205271,"line_start":368,"line_end":368,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205276,"byte_end":205338,"line_start":369,"line_end":369,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205343,"byte_end":205439,"line_start":370,"line_end":370,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205444,"byte_end":205494,"line_start":371,"line_end":371,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205499,"byte_end":205550,"line_start":372,"line_end":372,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205555,"byte_end":205607,"line_start":373,"line_end":373,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205612,"byte_end":205676,"line_start":374,"line_end":374,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205681,"byte_end":205689,"line_start":375,"line_end":375,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205694,"byte_end":205703,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206656,"byte_end":206686,"line_start":402,"line_end":402,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"pub fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":205999,"byte_end":206084,"line_start":383,"line_end":383,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206089,"byte_end":206092,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206097,"byte_end":206145,"line_start":385,"line_end":385,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206150,"byte_end":206217,"line_start":386,"line_end":386,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206222,"byte_end":206225,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206230,"byte_end":206288,"line_start":388,"line_end":388,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206293,"byte_end":206296,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206301,"byte_end":206314,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206319,"byte_end":206322,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206327,"byte_end":206335,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206340,"byte_end":206378,"line_start":393,"line_end":393,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206383,"byte_end":206386,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206391,"byte_end":206464,"line_start":395,"line_end":395,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206469,"byte_end":206498,"line_start":396,"line_end":396,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206503,"byte_end":206534,"line_start":397,"line_end":397,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206539,"byte_end":206569,"line_start":398,"line_end":398,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206574,"byte_end":206617,"line_start":399,"line_end":399,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206622,"byte_end":206630,"line_start":400,"line_end":400,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206635,"byte_end":206644,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207658,"byte_end":207692,"line_start":427,"line_end":427,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"pub fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206824,"byte_end":206909,"line_start":406,"line_end":406,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206914,"byte_end":206917,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206922,"byte_end":206970,"line_start":408,"line_end":408,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":206975,"byte_end":207042,"line_start":409,"line_end":409,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207047,"byte_end":207050,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207055,"byte_end":207121,"line_start":411,"line_end":411,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207126,"byte_end":207129,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207134,"byte_end":207147,"line_start":413,"line_end":413,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207152,"byte_end":207155,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207160,"byte_end":207168,"line_start":415,"line_end":415,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207173,"byte_end":207199,"line_start":416,"line_end":416,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207204,"byte_end":207207,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207212,"byte_end":207283,"line_start":418,"line_end":418,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207288,"byte_end":207291,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207296,"byte_end":207340,"line_start":420,"line_end":420,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207345,"byte_end":207403,"line_start":421,"line_end":421,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207408,"byte_end":207500,"line_start":422,"line_end":422,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207505,"byte_end":207554,"line_start":423,"line_end":423,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207559,"byte_end":207619,"line_start":424,"line_end":424,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207624,"byte_end":207632,"line_start":425,"line_end":425,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207637,"byte_end":207646,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210342,"byte_end":210356,"line_start":493,"line_end":493,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207868,"byte_end":207951,"line_start":432,"line_end":432,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":207956,"byte_end":208026,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208031,"byte_end":208069,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208074,"byte_end":208077,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208082,"byte_end":208095,"line_start":436,"line_end":436,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208100,"byte_end":208103,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208108,"byte_end":208116,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208121,"byte_end":208147,"line_start":439,"line_end":439,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208152,"byte_end":208155,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208160,"byte_end":208211,"line_start":441,"line_end":441,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208216,"byte_end":208219,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208224,"byte_end":208278,"line_start":443,"line_end":443,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208283,"byte_end":208334,"line_start":444,"line_end":444,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208339,"byte_end":208401,"line_start":445,"line_end":445,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208406,"byte_end":208473,"line_start":446,"line_end":446,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208478,"byte_end":208486,"line_start":447,"line_end":447,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208491,"byte_end":208494,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208499,"byte_end":208557,"line_start":449,"line_end":449,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208562,"byte_end":208565,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208570,"byte_end":208578,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208583,"byte_end":208611,"line_start":452,"line_end":452,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208616,"byte_end":208669,"line_start":453,"line_end":453,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208674,"byte_end":208755,"line_start":454,"line_end":454,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208760,"byte_end":208812,"line_start":455,"line_end":455,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208817,"byte_end":208825,"line_start":456,"line_end":456,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208830,"byte_end":208833,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208838,"byte_end":208904,"line_start":458,"line_end":458,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208909,"byte_end":208971,"line_start":459,"line_end":459,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":208976,"byte_end":209052,"line_start":460,"line_end":460,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209057,"byte_end":209060,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209065,"byte_end":209073,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209078,"byte_end":209106,"line_start":463,"line_end":463,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209111,"byte_end":209164,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209169,"byte_end":209230,"line_start":465,"line_end":465,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209235,"byte_end":209299,"line_start":466,"line_end":466,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209304,"byte_end":209312,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209317,"byte_end":209320,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209325,"byte_end":209368,"line_start":469,"line_end":469,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209373,"byte_end":209444,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209449,"byte_end":209452,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209457,"byte_end":209465,"line_start":472,"line_end":472,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209470,"byte_end":209498,"line_start":473,"line_end":473,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209503,"byte_end":209556,"line_start":474,"line_end":474,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209561,"byte_end":209608,"line_start":475,"line_end":475,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209613,"byte_end":209663,"line_start":476,"line_end":476,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209668,"byte_end":209671,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209676,"byte_end":209733,"line_start":478,"line_end":478,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209738,"byte_end":209787,"line_start":479,"line_end":479,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209792,"byte_end":209847,"line_start":480,"line_end":480,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209852,"byte_end":209913,"line_start":481,"line_end":481,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209918,"byte_end":209926,"line_start":482,"line_end":482,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209931,"byte_end":209934,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":209939,"byte_end":210021,"line_start":484,"line_end":484,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210026,"byte_end":210075,"line_start":485,"line_end":485,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210080,"byte_end":210139,"line_start":486,"line_end":486,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210144,"byte_end":210147,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210152,"byte_end":210160,"line_start":488,"line_end":488,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210165,"byte_end":210193,"line_start":489,"line_end":489,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210198,"byte_end":210251,"line_start":490,"line_end":490,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210256,"byte_end":210317,"line_start":491,"line_end":491,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210322,"byte_end":210330,"line_start":492,"line_end":492,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211524,"byte_end":211546,"line_start":522,"line_end":522,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"pub fn overflowing_add_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210549,"byte_end":210595,"line_start":499,"line_end":499,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210600,"byte_end":210644,"line_start":500,"line_end":500,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210649,"byte_end":210710,"line_start":501,"line_end":501,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210715,"byte_end":210796,"line_start":502,"line_end":502,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210801,"byte_end":210804,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210809,"byte_end":210822,"line_start":504,"line_end":504,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210827,"byte_end":210830,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210835,"byte_end":210843,"line_start":506,"line_end":506,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210848,"byte_end":210905,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210910,"byte_end":210936,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210941,"byte_end":210964,"line_start":509,"line_end":509,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210969,"byte_end":210972,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":210977,"byte_end":211016,"line_start":511,"line_end":511,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211021,"byte_end":211024,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211029,"byte_end":211106,"line_start":513,"line_end":513,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211111,"byte_end":211151,"line_start":514,"line_end":514,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211156,"byte_end":211233,"line_start":515,"line_end":515,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211238,"byte_end":211282,"line_start":516,"line_end":516,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211287,"byte_end":211364,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211369,"byte_end":211415,"line_start":518,"line_end":518,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211420,"byte_end":211427,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":211432,"byte_end":211440,"line_start":520,"line_end":520,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215055,"byte_end":215077,"line_start":608,"line_end":608,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"pub fn overflowing_sub_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214129,"byte_end":214182,"line_start":585,"line_end":585,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214187,"byte_end":214231,"line_start":586,"line_end":586,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214236,"byte_end":214300,"line_start":587,"line_end":587,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214305,"byte_end":214386,"line_start":588,"line_end":588,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214391,"byte_end":214394,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214399,"byte_end":214412,"line_start":590,"line_end":590,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214417,"byte_end":214420,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214425,"byte_end":214433,"line_start":592,"line_end":592,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214438,"byte_end":214495,"line_start":593,"line_end":593,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214500,"byte_end":214526,"line_start":594,"line_end":594,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214531,"byte_end":214554,"line_start":595,"line_end":595,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214559,"byte_end":214562,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214567,"byte_end":214606,"line_start":597,"line_end":597,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214611,"byte_end":214614,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214619,"byte_end":214695,"line_start":599,"line_end":599,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214700,"byte_end":214739,"line_start":600,"line_end":600,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214744,"byte_end":214821,"line_start":601,"line_end":601,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214826,"byte_end":214871,"line_start":602,"line_end":602,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214876,"byte_end":214954,"line_start":603,"line_end":603,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":214959,"byte_end":215004,"line_start":604,"line_end":604,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215009,"byte_end":215016,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215021,"byte_end":215029,"line_start":606,"line_end":606,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215034,"byte_end":215043,"line_start":607,"line_end":607,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":218131,"byte_end":218152,"line_start":673,"line_end":673,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215269,"byte_end":215325,"line_start":613,"line_end":613,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215330,"byte_end":215372,"line_start":614,"line_end":614,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215377,"byte_end":215424,"line_start":615,"line_end":615,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215429,"byte_end":215432,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215437,"byte_end":215509,"line_start":617,"line_end":617,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215514,"byte_end":215580,"line_start":618,"line_end":618,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215585,"byte_end":215660,"line_start":619,"line_end":619,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215665,"byte_end":215710,"line_start":620,"line_end":620,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215715,"byte_end":215774,"line_start":621,"line_end":621,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215779,"byte_end":215782,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215787,"byte_end":215800,"line_start":623,"line_end":623,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215805,"byte_end":215808,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215813,"byte_end":215821,"line_start":625,"line_end":625,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215826,"byte_end":215883,"line_start":626,"line_end":626,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215888,"byte_end":215914,"line_start":627,"line_end":627,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215919,"byte_end":215942,"line_start":628,"line_end":628,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215947,"byte_end":215950,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":215955,"byte_end":216001,"line_start":630,"line_end":630,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216006,"byte_end":216055,"line_start":631,"line_end":631,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216060,"byte_end":216063,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216068,"byte_end":216139,"line_start":633,"line_end":633,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216144,"byte_end":216177,"line_start":634,"line_end":634,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216182,"byte_end":216253,"line_start":635,"line_end":635,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216258,"byte_end":216301,"line_start":636,"line_end":636,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216306,"byte_end":216377,"line_start":637,"line_end":637,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216382,"byte_end":216426,"line_start":638,"line_end":638,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216431,"byte_end":216502,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216507,"byte_end":216544,"line_start":640,"line_end":640,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216549,"byte_end":216620,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216625,"byte_end":216667,"line_start":642,"line_end":642,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216672,"byte_end":216743,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216748,"byte_end":216792,"line_start":644,"line_end":644,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216797,"byte_end":216868,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216873,"byte_end":216914,"line_start":646,"line_end":646,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216919,"byte_end":216990,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":216995,"byte_end":217074,"line_start":648,"line_end":648,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217079,"byte_end":217086,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217091,"byte_end":217099,"line_start":650,"line_end":650,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217104,"byte_end":217107,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217112,"byte_end":217174,"line_start":652,"line_end":652,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217179,"byte_end":217225,"line_start":653,"line_end":653,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217230,"byte_end":217233,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217238,"byte_end":217246,"line_start":655,"line_end":655,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217251,"byte_end":217308,"line_start":656,"line_end":656,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217313,"byte_end":217341,"line_start":657,"line_end":657,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217346,"byte_end":217371,"line_start":658,"line_end":658,"column_start":5,"column_end":30}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217376,"byte_end":217424,"line_start":659,"line_end":659,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217429,"byte_end":217480,"line_start":660,"line_end":660,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217485,"byte_end":217558,"line_start":661,"line_end":661,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217563,"byte_end":217600,"line_start":662,"line_end":662,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217605,"byte_end":217678,"line_start":663,"line_end":663,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217683,"byte_end":217728,"line_start":664,"line_end":664,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217733,"byte_end":217805,"line_start":665,"line_end":665,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217810,"byte_end":217848,"line_start":666,"line_end":666,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217853,"byte_end":217926,"line_start":667,"line_end":667,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217931,"byte_end":217968,"line_start":668,"line_end":668,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":217973,"byte_end":218051,"line_start":669,"line_end":669,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":218056,"byte_end":218094,"line_start":670,"line_end":670,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":218099,"byte_end":218106,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":218111,"byte_end":218119,"line_start":672,"line_end":672,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220539,"byte_end":220556,"line_start":727,"line_end":727,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"pub fn format_with_items<'a, I>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = Item> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219422,"byte_end":219479,"line_start":699,"line_end":699,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary [`format`](#method.format) method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219484,"byte_end":219559,"line_start":700,"line_end":700,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219564,"byte_end":219567,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219572,"byte_end":219622,"line_start":702,"line_end":702,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219627,"byte_end":219705,"line_start":703,"line_end":703,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219710,"byte_end":219713,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219718,"byte_end":219731,"line_start":705,"line_end":705,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219736,"byte_end":219739,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219744,"byte_end":219752,"line_start":707,"line_end":707,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219757,"byte_end":219783,"line_start":708,"line_end":708,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219788,"byte_end":219836,"line_start":709,"line_end":709,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219841,"byte_end":219844,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219849,"byte_end":219894,"line_start":711,"line_end":711,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219899,"byte_end":219942,"line_start":712,"line_end":712,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":219947,"byte_end":220020,"line_start":713,"line_end":713,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220025,"byte_end":220098,"line_start":714,"line_end":714,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220103,"byte_end":220111,"line_start":715,"line_end":715,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220116,"byte_end":220119,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220124,"byte_end":220208,"line_start":717,"line_end":717,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220213,"byte_end":220216,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220221,"byte_end":220229,"line_start":719,"line_end":719,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220234,"byte_end":220262,"line_start":720,"line_end":720,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220267,"byte_end":220317,"line_start":721,"line_end":721,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220322,"byte_end":220377,"line_start":722,"line_end":722,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220382,"byte_end":220427,"line_start":723,"line_end":723,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220432,"byte_end":220500,"line_start":724,"line_end":724,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220505,"byte_end":220513,"line_start":725,"line_end":725,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220518,"byte_end":220527,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222287,"byte_end":222293,"line_start":767,"line_end":767,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220720,"byte_end":220774,"line_start":732,"line_end":732,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220779,"byte_end":220849,"line_start":733,"line_end":733,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220854,"byte_end":220892,"line_start":734,"line_end":734,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220897,"byte_end":220900,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220905,"byte_end":220940,"line_start":736,"line_end":736,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":220945,"byte_end":221018,"line_start":737,"line_end":737,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221023,"byte_end":221080,"line_start":738,"line_end":738,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221085,"byte_end":221147,"line_start":739,"line_end":739,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221152,"byte_end":221212,"line_start":740,"line_end":740,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221217,"byte_end":221220,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221225,"byte_end":221289,"line_start":742,"line_end":742,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221294,"byte_end":221357,"line_start":743,"line_end":743,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221362,"byte_end":221437,"line_start":744,"line_end":744,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221442,"byte_end":221445,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221450,"byte_end":221463,"line_start":746,"line_end":746,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221468,"byte_end":221471,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221476,"byte_end":221484,"line_start":748,"line_end":748,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221489,"byte_end":221515,"line_start":749,"line_end":749,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221520,"byte_end":221523,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221528,"byte_end":221588,"line_start":751,"line_end":751,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221593,"byte_end":221654,"line_start":752,"line_end":752,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221659,"byte_end":221731,"line_start":753,"line_end":753,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221736,"byte_end":221798,"line_start":754,"line_end":754,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221803,"byte_end":221811,"line_start":755,"line_end":755,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221816,"byte_end":221819,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221824,"byte_end":221908,"line_start":757,"line_end":757,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221913,"byte_end":221916,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221921,"byte_end":221929,"line_start":759,"line_end":759,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221934,"byte_end":221962,"line_start":760,"line_end":760,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":221967,"byte_end":222029,"line_start":761,"line_end":761,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222034,"byte_end":222098,"line_start":762,"line_end":762,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222103,"byte_end":222178,"line_start":763,"line_end":763,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222183,"byte_end":222248,"line_start":764,"line_end":764,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222253,"byte_end":222261,"line_start":765,"line_end":765,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222266,"byte_end":222275,"line_start":766,"line_end":766,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1464},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260521,"byte_end":260534,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259657,"byte_end":259710,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259711,"byte_end":259714,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259715,"byte_end":259728,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259729,"byte_end":259732,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259733,"byte_end":259817,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259818,"byte_end":259821,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259822,"byte_end":259830,"line_start":31,"line_end":31,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259831,"byte_end":259874,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259875,"byte_end":259878,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259879,"byte_end":259958,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259959,"byte_end":259976,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259977,"byte_end":259985,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259986,"byte_end":259989,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":259990,"byte_end":260053,"line_start":38,"line_end":38,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260054,"byte_end":260102,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260103,"byte_end":260154,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260155,"byte_end":260158,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260159,"byte_end":260167,"line_start":42,"line_end":42,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260168,"byte_end":260213,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260214,"byte_end":260295,"line_start":44,"line_end":44,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260296,"byte_end":260342,"line_start":45,"line_end":45,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260343,"byte_end":260346,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260347,"byte_end":260390,"line_start":47,"line_end":47,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260391,"byte_end":260445,"line_start":48,"line_end":48,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260446,"byte_end":260454,"line_start":49,"line_end":49,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261196,"byte_end":261199,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"pub fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260607,"byte_end":260669,"line_start":57,"line_end":57,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260674,"byte_end":260756,"line_start":58,"line_end":58,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260761,"byte_end":260815,"line_start":59,"line_end":59,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260820,"byte_end":260823,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260828,"byte_end":260841,"line_start":61,"line_end":61,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260846,"byte_end":260849,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260854,"byte_end":260862,"line_start":63,"line_end":63,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260867,"byte_end":260921,"line_start":64,"line_end":64,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260926,"byte_end":260929,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260934,"byte_end":260978,"line_start":66,"line_end":66,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260983,"byte_end":261038,"line_start":67,"line_end":67,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261043,"byte_end":261046,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261051,"byte_end":261089,"line_start":69,"line_end":69,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261094,"byte_end":261123,"line_start":70,"line_end":70,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261128,"byte_end":261157,"line_start":71,"line_end":71,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261162,"byte_end":261170,"line_start":72,"line_end":72,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261175,"byte_end":261184,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262482,"byte_end":262496,"line_start":104,"line_end":104,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"pub fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261313,"byte_end":261382,"line_start":78,"line_end":78,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261387,"byte_end":261426,"line_start":79,"line_end":79,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261431,"byte_end":261499,"line_start":80,"line_end":80,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261504,"byte_end":261575,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261580,"byte_end":261583,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261588,"byte_end":261636,"line_start":83,"line_end":83,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261641,"byte_end":261717,"line_start":84,"line_end":84,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261722,"byte_end":261725,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261730,"byte_end":261804,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261809,"byte_end":261889,"line_start":87,"line_end":87,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261894,"byte_end":261955,"line_start":88,"line_end":88,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261960,"byte_end":261963,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":261968,"byte_end":262043,"line_start":90,"line_end":90,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262048,"byte_end":262051,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262056,"byte_end":262069,"line_start":92,"line_end":92,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262074,"byte_end":262077,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262082,"byte_end":262090,"line_start":94,"line_end":94,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262095,"byte_end":262138,"line_start":95,"line_end":95,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262143,"byte_end":262146,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262151,"byte_end":262209,"line_start":97,"line_end":97,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262214,"byte_end":262293,"line_start":98,"line_end":98,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262298,"byte_end":262301,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262306,"byte_end":262367,"line_start":100,"line_end":100,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262372,"byte_end":262443,"line_start":101,"line_end":101,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262448,"byte_end":262456,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262461,"byte_end":262470,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263838,"byte_end":263856,"line_start":135,"line_end":135,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"pub fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262681,"byte_end":262750,"line_start":109,"line_end":109,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262755,"byte_end":262794,"line_start":110,"line_end":110,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262799,"byte_end":262867,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262872,"byte_end":262943,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262948,"byte_end":262951,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":262956,"byte_end":263004,"line_start":114,"line_end":114,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263009,"byte_end":263099,"line_start":115,"line_end":115,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263104,"byte_end":263181,"line_start":116,"line_end":116,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263186,"byte_end":263189,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263194,"byte_end":263277,"line_start":118,"line_end":118,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263282,"byte_end":263285,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263290,"byte_end":263303,"line_start":120,"line_end":120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263308,"byte_end":263311,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263316,"byte_end":263324,"line_start":122,"line_end":122,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263329,"byte_end":263372,"line_start":123,"line_end":123,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263377,"byte_end":263394,"line_start":124,"line_end":124,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263399,"byte_end":263402,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263407,"byte_end":263470,"line_start":126,"line_end":126,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263475,"byte_end":263478,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263483,"byte_end":263531,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263536,"byte_end":263594,"line_start":129,"line_end":129,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263599,"byte_end":263674,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263679,"byte_end":263739,"line_start":131,"line_end":131,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263744,"byte_end":263799,"line_start":132,"line_end":132,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263804,"byte_end":263812,"line_start":133,"line_end":133,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":263817,"byte_end":263826,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267235,"byte_end":267249,"line_start":207,"line_end":207,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264372,"byte_end":264459,"line_start":146,"line_end":146,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264464,"byte_end":264534,"line_start":147,"line_end":147,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264539,"byte_end":264577,"line_start":148,"line_end":148,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264582,"byte_end":264585,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264590,"byte_end":264603,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264608,"byte_end":264611,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264616,"byte_end":264624,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264629,"byte_end":264672,"line_start":153,"line_end":153,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264677,"byte_end":264680,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264685,"byte_end":264740,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264745,"byte_end":264748,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264753,"byte_end":264827,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264832,"byte_end":264903,"line_start":158,"line_end":158,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264908,"byte_end":264984,"line_start":159,"line_end":159,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":264989,"byte_end":265076,"line_start":160,"line_end":160,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265081,"byte_end":265089,"line_start":161,"line_end":161,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265094,"byte_end":265097,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265102,"byte_end":265151,"line_start":163,"line_end":163,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265156,"byte_end":265159,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265164,"byte_end":265172,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265177,"byte_end":265222,"line_start":166,"line_end":166,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265227,"byte_end":265284,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265289,"byte_end":265370,"line_start":168,"line_end":168,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265375,"byte_end":265448,"line_start":169,"line_end":169,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265453,"byte_end":265461,"line_start":170,"line_end":170,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265466,"byte_end":265469,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265474,"byte_end":265563,"line_start":172,"line_end":172,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265568,"byte_end":265630,"line_start":173,"line_end":173,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265635,"byte_end":265711,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265716,"byte_end":265719,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265724,"byte_end":265732,"line_start":176,"line_end":176,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265737,"byte_end":265782,"line_start":177,"line_end":177,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265787,"byte_end":265844,"line_start":178,"line_end":178,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265849,"byte_end":265930,"line_start":179,"line_end":179,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":265935,"byte_end":266019,"line_start":180,"line_end":180,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266024,"byte_end":266032,"line_start":181,"line_end":181,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266037,"byte_end":266040,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266045,"byte_end":266088,"line_start":183,"line_end":183,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266093,"byte_end":266164,"line_start":184,"line_end":184,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266169,"byte_end":266172,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266177,"byte_end":266185,"line_start":186,"line_end":186,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266190,"byte_end":266235,"line_start":187,"line_end":187,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266240,"byte_end":266297,"line_start":188,"line_end":188,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266302,"byte_end":266365,"line_start":189,"line_end":189,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266370,"byte_end":266440,"line_start":190,"line_end":190,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266445,"byte_end":266448,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266453,"byte_end":266510,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266515,"byte_end":266580,"line_start":193,"line_end":193,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266585,"byte_end":266656,"line_start":194,"line_end":194,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266661,"byte_end":266738,"line_start":195,"line_end":195,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266743,"byte_end":266751,"line_start":196,"line_end":196,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266756,"byte_end":266759,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266764,"byte_end":266846,"line_start":198,"line_end":198,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266851,"byte_end":266854,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266859,"byte_end":266867,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266872,"byte_end":266904,"line_start":201,"line_end":201,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266909,"byte_end":266966,"line_start":202,"line_end":202,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":266971,"byte_end":267025,"line_start":203,"line_end":203,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267030,"byte_end":267121,"line_start":204,"line_end":204,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267126,"byte_end":267210,"line_start":205,"line_end":205,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267215,"byte_end":267223,"line_start":206,"line_end":206,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267776,"byte_end":267780,"line_start":224,"line_end":224,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"pub fn date(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267487,"byte_end":267518,"line_start":213,"line_end":213,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267523,"byte_end":267526,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267531,"byte_end":267544,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267549,"byte_end":267552,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267557,"byte_end":267565,"line_start":217,"line_end":217,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267570,"byte_end":267596,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267601,"byte_end":267604,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267609,"byte_end":267673,"line_start":220,"line_end":220,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267678,"byte_end":267737,"line_start":221,"line_end":221,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267742,"byte_end":267750,"line_start":222,"line_end":222,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267755,"byte_end":267764,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268133,"byte_end":268137,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267832,"byte_end":267863,"line_start":228,"line_end":228,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267868,"byte_end":267871,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267876,"byte_end":267889,"line_start":230,"line_end":230,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267894,"byte_end":267897,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267902,"byte_end":267910,"line_start":232,"line_end":232,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267915,"byte_end":267954,"line_start":233,"line_end":233,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267959,"byte_end":267962,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":267967,"byte_end":268031,"line_start":235,"line_end":235,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268036,"byte_end":268094,"line_start":236,"line_end":236,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268099,"byte_end":268107,"line_start":237,"line_end":237,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268112,"byte_end":268121,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268801,"byte_end":268810,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268189,"byte_end":268270,"line_start":243,"line_end":243,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268275,"byte_end":268278,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268283,"byte_end":268338,"line_start":245,"line_end":245,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268343,"byte_end":268431,"line_start":246,"line_end":246,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268436,"byte_end":268439,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268444,"byte_end":268457,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268462,"byte_end":268465,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268470,"byte_end":268478,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268483,"byte_end":268509,"line_start":251,"line_end":251,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268514,"byte_end":268517,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268522,"byte_end":268595,"line_start":253,"line_end":253,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268600,"byte_end":268634,"line_start":254,"line_end":254,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268639,"byte_end":268642,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268647,"byte_end":268711,"line_start":256,"line_end":256,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268716,"byte_end":268762,"line_start":257,"line_end":257,"column_start":5,"column_end":51}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268767,"byte_end":268775,"line_start":258,"line_end":258,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":268780,"byte_end":268789,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269954,"byte_end":269970,"line_start":288,"line_end":288,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269018,"byte_end":269102,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269107,"byte_end":269110,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269115,"byte_end":269170,"line_start":268,"line_end":268,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269175,"byte_end":269263,"line_start":269,"line_end":269,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269268,"byte_end":269271,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269276,"byte_end":269343,"line_start":271,"line_end":271,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269348,"byte_end":269421,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269426,"byte_end":269495,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269500,"byte_end":269551,"line_start":274,"line_end":274,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269556,"byte_end":269559,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269564,"byte_end":269577,"line_start":276,"line_end":276,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269582,"byte_end":269585,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269590,"byte_end":269598,"line_start":278,"line_end":278,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269603,"byte_end":269629,"line_start":279,"line_end":279,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269634,"byte_end":269637,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269642,"byte_end":269715,"line_start":281,"line_end":281,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269720,"byte_end":269765,"line_start":282,"line_end":282,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269770,"byte_end":269773,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269778,"byte_end":269853,"line_start":284,"line_end":284,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269858,"byte_end":269915,"line_start":285,"line_end":285,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269920,"byte_end":269928,"line_start":286,"line_end":286,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":269933,"byte_end":269942,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270740,"byte_end":270763,"line_start":310,"line_end":310,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270101,"byte_end":270177,"line_start":293,"line_end":293,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270182,"byte_end":270185,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270190,"byte_end":270232,"line_start":295,"line_end":295,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270237,"byte_end":270319,"line_start":296,"line_end":296,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270324,"byte_end":270327,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270332,"byte_end":270345,"line_start":298,"line_end":298,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270350,"byte_end":270353,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270358,"byte_end":270366,"line_start":300,"line_end":300,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270371,"byte_end":270397,"line_start":301,"line_end":301,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270402,"byte_end":270405,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270410,"byte_end":270492,"line_start":303,"line_end":303,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270497,"byte_end":270547,"line_start":304,"line_end":304,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270552,"byte_end":270555,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270560,"byte_end":270644,"line_start":306,"line_end":306,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270649,"byte_end":270701,"line_start":307,"line_end":307,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270706,"byte_end":270714,"line_start":308,"line_end":308,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270719,"byte_end":270728,"line_start":309,"line_end":309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271496,"byte_end":271519,"line_start":331,"line_end":331,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270841,"byte_end":270917,"line_start":314,"line_end":314,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270922,"byte_end":270925,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270930,"byte_end":270976,"line_start":316,"line_end":316,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":270981,"byte_end":271067,"line_start":317,"line_end":317,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271072,"byte_end":271075,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271080,"byte_end":271093,"line_start":319,"line_end":319,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271098,"byte_end":271101,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271106,"byte_end":271114,"line_start":321,"line_end":321,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271119,"byte_end":271145,"line_start":322,"line_end":322,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271150,"byte_end":271153,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271158,"byte_end":271240,"line_start":324,"line_end":324,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271245,"byte_end":271299,"line_start":325,"line_end":325,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271304,"byte_end":271307,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271312,"byte_end":271396,"line_start":327,"line_end":327,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271401,"byte_end":271457,"line_start":328,"line_end":328,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271462,"byte_end":271470,"line_start":329,"line_end":329,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271475,"byte_end":271484,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272261,"byte_end":272283,"line_start":352,"line_end":352,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271593,"byte_end":271668,"line_start":335,"line_end":335,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271673,"byte_end":271676,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271681,"byte_end":271731,"line_start":337,"line_end":337,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271736,"byte_end":271826,"line_start":338,"line_end":338,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271831,"byte_end":271834,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271839,"byte_end":271852,"line_start":340,"line_end":340,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271857,"byte_end":271860,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271865,"byte_end":271873,"line_start":342,"line_end":342,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271878,"byte_end":271904,"line_start":343,"line_end":343,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271909,"byte_end":271912,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":271917,"byte_end":271999,"line_start":345,"line_end":345,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272004,"byte_end":272061,"line_start":346,"line_end":346,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272066,"byte_end":272069,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272074,"byte_end":272158,"line_start":348,"line_end":348,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272163,"byte_end":272222,"line_start":349,"line_end":349,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272227,"byte_end":272235,"line_start":350,"line_end":350,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272240,"byte_end":272249,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275662,"byte_end":275680,"line_start":430,"line_end":430,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272342,"byte_end":272397,"line_start":356,"line_end":356,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272402,"byte_end":272405,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272410,"byte_end":272505,"line_start":358,"line_end":358,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272510,"byte_end":272573,"line_start":359,"line_end":359,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272578,"byte_end":272645,"line_start":360,"line_end":360,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272650,"byte_end":272743,"line_start":361,"line_end":361,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272748,"byte_end":272751,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272756,"byte_end":272807,"line_start":363,"line_end":363,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272812,"byte_end":272815,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272820,"byte_end":272833,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272838,"byte_end":272841,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272846,"byte_end":272854,"line_start":367,"line_end":367,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272859,"byte_end":272916,"line_start":368,"line_end":368,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272921,"byte_end":272947,"line_start":369,"line_end":369,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272952,"byte_end":272975,"line_start":370,"line_end":370,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272980,"byte_end":272983,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":272988,"byte_end":273027,"line_start":372,"line_end":372,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273032,"byte_end":273035,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273040,"byte_end":273073,"line_start":374,"line_end":374,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273078,"byte_end":273121,"line_start":375,"line_end":375,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273126,"byte_end":273191,"line_start":376,"line_end":376,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273196,"byte_end":273231,"line_start":377,"line_end":377,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273236,"byte_end":273305,"line_start":378,"line_end":378,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273310,"byte_end":273345,"line_start":379,"line_end":379,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273350,"byte_end":273420,"line_start":380,"line_end":380,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273425,"byte_end":273460,"line_start":381,"line_end":381,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273465,"byte_end":273542,"line_start":382,"line_end":382,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273547,"byte_end":273582,"line_start":383,"line_end":383,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273587,"byte_end":273661,"line_start":384,"line_end":384,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273666,"byte_end":273726,"line_start":385,"line_end":385,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273731,"byte_end":273734,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273739,"byte_end":273803,"line_start":387,"line_end":387,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273808,"byte_end":273890,"line_start":388,"line_end":388,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273895,"byte_end":273936,"line_start":389,"line_end":389,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273941,"byte_end":273948,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273953,"byte_end":273961,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273966,"byte_end":273969,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":273974,"byte_end":274002,"line_start":393,"line_end":393,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274007,"byte_end":274010,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274015,"byte_end":274023,"line_start":395,"line_end":395,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274028,"byte_end":274085,"line_start":396,"line_end":396,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274090,"byte_end":274118,"line_start":397,"line_end":397,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274123,"byte_end":274148,"line_start":398,"line_end":398,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274153,"byte_end":274228,"line_start":399,"line_end":399,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274233,"byte_end":274318,"line_start":400,"line_end":400,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274323,"byte_end":274330,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274335,"byte_end":274343,"line_start":402,"line_end":402,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274348,"byte_end":274351,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274356,"byte_end":274385,"line_start":404,"line_end":404,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274390,"byte_end":274460,"line_start":405,"line_end":405,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274465,"byte_end":274468,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274473,"byte_end":274481,"line_start":407,"line_end":407,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274486,"byte_end":274543,"line_start":408,"line_end":408,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274548,"byte_end":274576,"line_start":409,"line_end":409,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274581,"byte_end":274606,"line_start":410,"line_end":410,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274611,"byte_end":274652,"line_start":411,"line_end":411,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274657,"byte_end":274742,"line_start":412,"line_end":412,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274747,"byte_end":274784,"line_start":413,"line_end":413,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274789,"byte_end":274846,"line_start":414,"line_end":414,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274851,"byte_end":274895,"line_start":415,"line_end":415,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274900,"byte_end":274969,"line_start":416,"line_end":416,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":274974,"byte_end":275016,"line_start":417,"line_end":417,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275021,"byte_end":275089,"line_start":418,"line_end":418,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275094,"byte_end":275138,"line_start":419,"line_end":419,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275143,"byte_end":275211,"line_start":420,"line_end":420,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275216,"byte_end":275257,"line_start":421,"line_end":421,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275262,"byte_end":275324,"line_start":422,"line_end":422,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275329,"byte_end":275370,"line_start":423,"line_end":423,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275375,"byte_end":275438,"line_start":424,"line_end":424,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275443,"byte_end":275485,"line_start":425,"line_end":425,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275490,"byte_end":275548,"line_start":426,"line_end":426,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275553,"byte_end":275625,"line_start":427,"line_end":427,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275630,"byte_end":275637,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":275642,"byte_end":275650,"line_start":429,"line_end":429,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279224,"byte_end":279242,"line_start":512,"line_end":512,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276127,"byte_end":276189,"line_start":442,"line_end":442,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276194,"byte_end":276197,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276202,"byte_end":276297,"line_start":444,"line_end":444,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276302,"byte_end":276368,"line_start":445,"line_end":445,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276373,"byte_end":276440,"line_start":446,"line_end":446,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276445,"byte_end":276538,"line_start":447,"line_end":447,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276543,"byte_end":276546,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276551,"byte_end":276602,"line_start":449,"line_end":449,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276607,"byte_end":276610,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276615,"byte_end":276628,"line_start":451,"line_end":451,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276633,"byte_end":276636,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276641,"byte_end":276649,"line_start":453,"line_end":453,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276654,"byte_end":276711,"line_start":454,"line_end":454,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276716,"byte_end":276742,"line_start":455,"line_end":455,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276747,"byte_end":276770,"line_start":456,"line_end":456,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276775,"byte_end":276778,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276783,"byte_end":276822,"line_start":458,"line_end":458,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276827,"byte_end":276830,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276835,"byte_end":276868,"line_start":460,"line_end":460,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276873,"byte_end":276916,"line_start":461,"line_end":461,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276921,"byte_end":276986,"line_start":462,"line_end":462,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":276991,"byte_end":277026,"line_start":463,"line_end":463,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277031,"byte_end":277100,"line_start":464,"line_end":464,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277105,"byte_end":277140,"line_start":465,"line_end":465,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277145,"byte_end":277215,"line_start":466,"line_end":466,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277220,"byte_end":277255,"line_start":467,"line_end":467,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277260,"byte_end":277337,"line_start":468,"line_end":468,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277342,"byte_end":277377,"line_start":469,"line_end":469,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277382,"byte_end":277456,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277461,"byte_end":277521,"line_start":471,"line_end":471,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277526,"byte_end":277529,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277534,"byte_end":277598,"line_start":473,"line_end":473,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277603,"byte_end":277685,"line_start":474,"line_end":474,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277690,"byte_end":277731,"line_start":475,"line_end":475,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277736,"byte_end":277743,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277748,"byte_end":277756,"line_start":477,"line_end":477,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277761,"byte_end":277764,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277769,"byte_end":277797,"line_start":479,"line_end":479,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277802,"byte_end":277805,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277810,"byte_end":277818,"line_start":481,"line_end":481,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277823,"byte_end":277880,"line_start":482,"line_end":482,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277885,"byte_end":277913,"line_start":483,"line_end":483,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277918,"byte_end":277943,"line_start":484,"line_end":484,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":277948,"byte_end":278023,"line_start":485,"line_end":485,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278028,"byte_end":278113,"line_start":486,"line_end":486,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278118,"byte_end":278125,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278130,"byte_end":278138,"line_start":488,"line_end":488,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278143,"byte_end":278146,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278151,"byte_end":278180,"line_start":490,"line_end":490,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278185,"byte_end":278258,"line_start":491,"line_end":491,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278263,"byte_end":278266,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278271,"byte_end":278279,"line_start":493,"line_end":493,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278284,"byte_end":278341,"line_start":494,"line_end":494,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278346,"byte_end":278374,"line_start":495,"line_end":495,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278379,"byte_end":278404,"line_start":496,"line_end":496,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278409,"byte_end":278450,"line_start":497,"line_end":497,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278455,"byte_end":278540,"line_start":498,"line_end":498,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278545,"byte_end":278582,"line_start":499,"line_end":499,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278587,"byte_end":278644,"line_start":500,"line_end":500,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278649,"byte_end":278693,"line_start":501,"line_end":501,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278698,"byte_end":278766,"line_start":502,"line_end":502,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278771,"byte_end":278815,"line_start":503,"line_end":503,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278820,"byte_end":278888,"line_start":504,"line_end":504,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278893,"byte_end":278935,"line_start":505,"line_end":505,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":278940,"byte_end":279002,"line_start":506,"line_end":506,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279007,"byte_end":279048,"line_start":507,"line_end":507,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279053,"byte_end":279111,"line_start":508,"line_end":508,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279116,"byte_end":279187,"line_start":509,"line_end":509,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279192,"byte_end":279199,"line_start":510,"line_end":510,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279204,"byte_end":279212,"line_start":511,"line_end":511,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281651,"byte_end":281672,"line_start":568,"line_end":568,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279689,"byte_end":279758,"line_start":524,"line_end":524,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279763,"byte_end":279810,"line_start":525,"line_end":525,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279815,"byte_end":279818,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279823,"byte_end":279918,"line_start":527,"line_end":527,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279923,"byte_end":279989,"line_start":528,"line_end":528,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":279994,"byte_end":280073,"line_start":529,"line_end":529,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280078,"byte_end":280123,"line_start":530,"line_end":530,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280128,"byte_end":280187,"line_start":531,"line_end":531,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280192,"byte_end":280195,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280200,"byte_end":280213,"line_start":533,"line_end":533,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280218,"byte_end":280221,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280226,"byte_end":280234,"line_start":535,"line_end":535,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280239,"byte_end":280296,"line_start":536,"line_end":536,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280301,"byte_end":280327,"line_start":537,"line_end":537,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280332,"byte_end":280355,"line_start":538,"line_end":538,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280360,"byte_end":280363,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280368,"byte_end":280407,"line_start":540,"line_end":540,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280412,"byte_end":280415,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280420,"byte_end":280453,"line_start":542,"line_end":542,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280458,"byte_end":280534,"line_start":543,"line_end":543,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280539,"byte_end":280588,"line_start":544,"line_end":544,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280593,"byte_end":280596,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280601,"byte_end":280644,"line_start":546,"line_end":546,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280649,"byte_end":280683,"line_start":547,"line_end":547,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280688,"byte_end":280776,"line_start":548,"line_end":548,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280781,"byte_end":280872,"line_start":549,"line_end":549,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280877,"byte_end":280884,"line_start":550,"line_end":550,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280889,"byte_end":280897,"line_start":551,"line_end":551,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280902,"byte_end":280905,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280910,"byte_end":280972,"line_start":553,"line_end":553,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":280977,"byte_end":281023,"line_start":554,"line_end":554,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281028,"byte_end":281031,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281036,"byte_end":281044,"line_start":556,"line_end":556,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281049,"byte_end":281106,"line_start":557,"line_end":557,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281111,"byte_end":281139,"line_start":558,"line_end":558,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281144,"byte_end":281169,"line_start":559,"line_end":559,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281174,"byte_end":281215,"line_start":560,"line_end":560,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281220,"byte_end":281290,"line_start":561,"line_end":561,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281295,"byte_end":281378,"line_start":562,"line_end":562,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281383,"byte_end":281453,"line_start":563,"line_end":563,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281458,"byte_end":281539,"line_start":564,"line_end":564,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281544,"byte_end":281614,"line_start":565,"line_end":565,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281619,"byte_end":281626,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281631,"byte_end":281639,"line_start":567,"line_end":567,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283052,"byte_end":283069,"line_start":600,"line_end":600,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"pub fn format_with_items<'a, I>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = Item> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281821,"byte_end":281896,"line_start":572,"line_end":572,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is same to the ordinary [`format`](#method.format) method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281901,"byte_end":281976,"line_start":573,"line_end":573,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281981,"byte_end":281984,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":281989,"byte_end":282039,"line_start":575,"line_end":575,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282044,"byte_end":282122,"line_start":576,"line_end":576,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282127,"byte_end":282130,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282135,"byte_end":282148,"line_start":578,"line_end":578,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282153,"byte_end":282156,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282161,"byte_end":282169,"line_start":580,"line_end":580,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282174,"byte_end":282200,"line_start":581,"line_end":581,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282205,"byte_end":282253,"line_start":582,"line_end":582,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282258,"byte_end":282261,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282266,"byte_end":282320,"line_start":584,"line_end":584,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282325,"byte_end":282389,"line_start":585,"line_end":585,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282394,"byte_end":282479,"line_start":586,"line_end":586,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282484,"byte_end":282569,"line_start":587,"line_end":587,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282574,"byte_end":282582,"line_start":588,"line_end":588,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282587,"byte_end":282590,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282595,"byte_end":282679,"line_start":590,"line_end":590,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282684,"byte_end":282687,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282692,"byte_end":282700,"line_start":592,"line_end":592,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282705,"byte_end":282733,"line_start":593,"line_end":593,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282738,"byte_end":282788,"line_start":594,"line_end":594,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282793,"byte_end":282857,"line_start":595,"line_end":595,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282862,"byte_end":282928,"line_start":596,"line_end":596,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":282933,"byte_end":283013,"line_start":597,"line_end":597,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283018,"byte_end":283026,"line_start":598,"line_end":598,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283031,"byte_end":283040,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284780,"byte_end":284786,"line_start":638,"line_end":638,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283248,"byte_end":283320,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283325,"byte_end":283395,"line_start":606,"line_end":606,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283400,"byte_end":283438,"line_start":607,"line_end":607,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283443,"byte_end":283446,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283451,"byte_end":283486,"line_start":609,"line_end":609,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283491,"byte_end":283564,"line_start":610,"line_end":610,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283569,"byte_end":283626,"line_start":611,"line_end":611,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283631,"byte_end":283693,"line_start":612,"line_end":612,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283698,"byte_end":283758,"line_start":613,"line_end":613,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283763,"byte_end":283766,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283771,"byte_end":283835,"line_start":615,"line_end":615,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283840,"byte_end":283903,"line_start":616,"line_end":616,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283908,"byte_end":283983,"line_start":617,"line_end":617,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283988,"byte_end":283991,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":283996,"byte_end":284009,"line_start":619,"line_end":619,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284014,"byte_end":284017,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284022,"byte_end":284030,"line_start":621,"line_end":621,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284035,"byte_end":284061,"line_start":622,"line_end":622,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284066,"byte_end":284069,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284074,"byte_end":284138,"line_start":624,"line_end":624,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284143,"byte_end":284225,"line_start":625,"line_end":625,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284230,"byte_end":284319,"line_start":626,"line_end":626,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284324,"byte_end":284332,"line_start":627,"line_end":627,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284337,"byte_end":284340,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284345,"byte_end":284429,"line_start":629,"line_end":629,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284434,"byte_end":284437,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284442,"byte_end":284450,"line_start":631,"line_end":631,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284455,"byte_end":284483,"line_start":632,"line_end":632,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284488,"byte_end":284554,"line_start":633,"line_end":633,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284559,"byte_end":284644,"line_start":634,"line_end":634,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284649,"byte_end":284741,"line_start":635,"line_end":635,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284746,"byte_end":284754,"line_start":636,"line_end":636,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284759,"byte_end":284768,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337190,"byte_end":337194,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1491},{"krate":0,"index":1492}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":335817,"byte_end":335859,"line_start":17,"line_end":17,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":335860,"byte_end":335863,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":335864,"byte_end":335917,"line_start":19,"line_end":19,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":335918,"byte_end":335998,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":335999,"byte_end":336085,"line_start":21,"line_end":21,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336086,"byte_end":336143,"line_start":22,"line_end":22,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336144,"byte_end":336147,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336148,"byte_end":336226,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336227,"byte_end":336297,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336298,"byte_end":336354,"line_start":26,"line_end":26,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336355,"byte_end":336358,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336359,"byte_end":336431,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336432,"byte_end":336484,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336485,"byte_end":336572,"line_start":30,"line_end":30,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336573,"byte_end":336641,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336642,"byte_end":336688,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336689,"byte_end":336692,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336693,"byte_end":336737,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336738,"byte_end":336834,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336835,"byte_end":336930,"line_start":36,"line_end":36,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336931,"byte_end":336934,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":336935,"byte_end":337011,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337012,"byte_end":337079,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337080,"byte_end":337161,"line_start":40,"line_end":40,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":681},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337302,"byte_end":337310,"line_start":48,"line_end":48,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337259,"byte_end":337291,"line_start":47,"line_end":47,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":682},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337412,"byte_end":337420,"line_start":50,"line_end":50,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337369,"byte_end":337401,"line_start":49,"line_end":49,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337769,"byte_end":337777,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"pub fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337514,"byte_end":337570,"line_start":53,"line_end":53,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337575,"byte_end":337641,"line_start":54,"line_end":54,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337748,"byte_end":337757,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338078,"byte_end":338086,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337884,"byte_end":337955,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337960,"byte_end":338008,"line_start":63,"line_end":63,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338013,"byte_end":338016,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338021,"byte_end":338052,"line_start":65,"line_end":65,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338057,"byte_end":338066,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338483,"byte_end":338490,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338268,"byte_end":338342,"line_start":72,"line_end":72,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338347,"byte_end":338395,"line_start":73,"line_end":73,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338400,"byte_end":338403,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338408,"byte_end":338457,"line_start":75,"line_end":75,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338462,"byte_end":338471,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338845,"byte_end":338856,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338622,"byte_end":338696,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338701,"byte_end":338749,"line_start":82,"line_end":82,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338754,"byte_end":338757,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338762,"byte_end":338819,"line_start":84,"line_end":84,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":338824,"byte_end":338833,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339343,"byte_end":339356,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339017,"byte_end":339104,"line_start":90,"line_end":90,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339109,"byte_end":339189,"line_start":91,"line_end":91,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339194,"byte_end":339242,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339247,"byte_end":339250,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339255,"byte_end":339317,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339322,"byte_end":339331,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339847,"byte_end":339864,"line_start":106,"line_end":106,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339513,"byte_end":339600,"line_start":100,"line_end":100,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339605,"byte_end":339685,"line_start":101,"line_end":101,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339690,"byte_end":339738,"line_start":102,"line_end":102,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339743,"byte_end":339746,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339751,"byte_end":339821,"line_start":104,"line_end":104,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":339826,"byte_end":339835,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340409,"byte_end":340422,"line_start":117,"line_end":117,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340079,"byte_end":340166,"line_start":111,"line_end":111,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340171,"byte_end":340255,"line_start":112,"line_end":112,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340260,"byte_end":340308,"line_start":113,"line_end":113,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340313,"byte_end":340316,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340321,"byte_end":340383,"line_start":115,"line_end":115,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340388,"byte_end":340397,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340917,"byte_end":340934,"line_start":127,"line_end":127,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340579,"byte_end":340666,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340671,"byte_end":340755,"line_start":122,"line_end":122,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340760,"byte_end":340808,"line_start":123,"line_end":123,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340813,"byte_end":340816,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340821,"byte_end":340891,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":340896,"byte_end":340905,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341480,"byte_end":341492,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341149,"byte_end":341235,"line_start":132,"line_end":132,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341240,"byte_end":341327,"line_start":133,"line_end":133,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341332,"byte_end":341380,"line_start":134,"line_end":134,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341385,"byte_end":341388,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341393,"byte_end":341454,"line_start":136,"line_end":136,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341459,"byte_end":341468,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341985,"byte_end":342001,"line_start":148,"line_end":148,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341646,"byte_end":341732,"line_start":142,"line_end":142,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341737,"byte_end":341824,"line_start":143,"line_end":143,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341829,"byte_end":341877,"line_start":144,"line_end":144,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341882,"byte_end":341885,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341890,"byte_end":341959,"line_start":146,"line_end":146,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":341964,"byte_end":341973,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342346,"byte_end":342350,"line_start":157,"line_end":157,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"pub fn succ(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342212,"byte_end":342253,"line_start":153,"line_end":153,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342258,"byte_end":342261,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342266,"byte_end":342320,"line_start":155,"line_end":155,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342325,"byte_end":342334,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342572,"byte_end":342580,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342430,"byte_end":342471,"line_start":161,"line_end":161,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342476,"byte_end":342479,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342484,"byte_end":342546,"line_start":163,"line_end":163,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342551,"byte_end":342560,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342840,"byte_end":342844,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"pub fn pred(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342704,"byte_end":342746,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342751,"byte_end":342754,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342759,"byte_end":342814,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342819,"byte_end":342828,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343068,"byte_end":343076,"line_start":181,"line_end":181,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342924,"byte_end":342966,"line_start":177,"line_end":177,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342971,"byte_end":342974,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":342979,"byte_end":343042,"line_start":179,"line_end":179,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343047,"byte_end":343056,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343270,"byte_end":343276,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343200,"byte_end":343244,"line_start":185,"line_end":185,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343249,"byte_end":343258,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343397,"byte_end":343405,"line_start":193,"line_end":193,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343333,"byte_end":343371,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343376,"byte_end":343385,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343631,"byte_end":343644,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343476,"byte_end":343513,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343518,"byte_end":343605,"line_start":198,"line_end":198,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343610,"byte_end":343619,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343876,"byte_end":343894,"line_start":208,"line_end":208,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343740,"byte_end":343786,"line_start":204,"line_end":204,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343791,"byte_end":343794,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343799,"byte_end":343850,"line_start":206,"line_end":206,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":343855,"byte_end":343864,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344214,"byte_end":344232,"line_start":217,"line_end":217,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344071,"byte_end":344124,"line_start":213,"line_end":213,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344129,"byte_end":344132,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344137,"byte_end":344188,"line_start":215,"line_end":215,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344193,"byte_end":344202,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344733,"byte_end":344754,"line_start":229,"line_end":229,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344409,"byte_end":344460,"line_start":222,"line_end":222,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344465,"byte_end":344510,"line_start":223,"line_end":223,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344515,"byte_end":344518,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344523,"byte_end":344570,"line_start":225,"line_end":225,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344575,"byte_end":344634,"line_start":226,"line_end":226,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344712,"byte_end":344721,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344937,"byte_end":344946,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344870,"byte_end":344911,"line_start":233,"line_end":233,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344916,"byte_end":344925,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345252,"byte_end":345263,"line_start":245,"line_end":245,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":344998,"byte_end":345041,"line_start":239,"line_end":239,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345046,"byte_end":345049,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This is technically same to [`naive_utc`](#method.naive_utc)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345054,"byte_end":345118,"line_start":241,"line_end":241,"column_start":5,"column_end":69}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345123,"byte_end":345184,"line_start":242,"line_end":242,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345189,"byte_end":345226,"line_start":243,"line_end":243,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345231,"byte_end":345240,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345750,"byte_end":345767,"line_start":259,"line_end":259,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = Item> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345667,"byte_end":345724,"line_start":257,"line_end":257,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345729,"byte_end":345738,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":346167,"byte_end":346173,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345970,"byte_end":346024,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":346029,"byte_end":346098,"line_start":265,"line_end":265,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":346103,"byte_end":346141,"line_start":266,"line_end":266,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":346146,"byte_end":346155,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1497},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350503,"byte_end":350507,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350430,"byte_end":350498,"line_start":25,"line_end":25,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1499},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350646,"byte_end":350652,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350514,"byte_end":350567,"line_start":28,"line_end":28,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350572,"byte_end":350641,"line_start":29,"line_end":29,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1501},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350791,"byte_end":350797,"line_start":34,"line_end":34,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350659,"byte_end":350712,"line_start":32,"line_end":32,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350717,"byte_end":350786,"line_start":33,"line_end":33,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1503},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350936,"byte_end":350941,"line_start":38,"line_end":38,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350804,"byte_end":350857,"line_start":36,"line_end":36,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350862,"byte_end":350931,"line_start":37,"line_end":37,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1505},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351177,"byte_end":351183,"line_start":43,"line_end":43,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350948,"byte_end":351021,"line_start":40,"line_end":40,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351026,"byte_end":351100,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351105,"byte_end":351172,"line_start":42,"line_end":42,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1507},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351243,"byte_end":351258,"line_start":47,"line_end":47,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1496},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350410,"byte_end":350423,"line_start":24,"line_end":24,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"pub enum SecondsFormat {\n\n    /// Format whole seconds only, with no decimal point nor subseconds.\n    Secs,\n\n    /// Use fixed 3 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n    Millis,\n\n    /// Use fixed 6 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n    Micros,\n\n    /// Use fixed 9 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n    Nanos,\n\n    /// Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n    /// display all available non-zero sub-second digits.  This corresponds to\n    /// [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n    AutoSi,\n\n    #[doc(hidden)]\n    __NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":1497},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1505},{"krate":0,"index":1507}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350147,"byte_end":350219,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350220,"byte_end":350291,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350292,"byte_end":350295,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":350296,"byte_end":350355,"line_start":22,"line_end":22,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1520},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351556,"byte_end":351564,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1523}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351263,"byte_end":351314,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351315,"byte_end":351318,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351319,"byte_end":351395,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351396,"byte_end":351463,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351464,"byte_end":351527,"line_start":54,"line_end":54,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352205,"byte_end":352213,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"pub fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351675,"byte_end":351739,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351744,"byte_end":351814,"line_start":63,"line_end":63,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351819,"byte_end":351822,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351827,"byte_end":351840,"line_start":65,"line_end":65,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351845,"byte_end":351848,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351853,"byte_end":351861,"line_start":67,"line_end":67,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351866,"byte_end":351923,"line_start":68,"line_end":68,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351928,"byte_end":351931,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351936,"byte_end":352018,"line_start":70,"line_end":70,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352023,"byte_end":352064,"line_start":71,"line_end":71,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352069,"byte_end":352077,"line_start":72,"line_end":72,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352184,"byte_end":352193,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352401,"byte_end":352405,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"pub fn date(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352344,"byte_end":352375,"line_start":80,"line_end":80,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352380,"byte_end":352389,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352630,"byte_end":352634,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352509,"byte_end":352540,"line_start":86,"line_end":86,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352545,"byte_end":352604,"line_start":87,"line_end":87,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352609,"byte_end":352618,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352851,"byte_end":352860,"line_start":96,"line_end":96,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352717,"byte_end":352793,"line_start":93,"line_end":93,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352798,"byte_end":352825,"line_start":94,"line_end":94,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352830,"byte_end":352839,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353681,"byte_end":353697,"line_start":120,"line_end":120,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":352922,"byte_end":352995,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353000,"byte_end":353003,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353008,"byte_end":353082,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353087,"byte_end":353160,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353165,"byte_end":353237,"line_start":104,"line_end":104,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353242,"byte_end":353278,"line_start":105,"line_end":105,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353283,"byte_end":353286,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353291,"byte_end":353304,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353309,"byte_end":353312,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353317,"byte_end":353325,"line_start":109,"line_end":109,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353330,"byte_end":353350,"line_start":110,"line_end":110,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353355,"byte_end":353380,"line_start":111,"line_end":111,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353385,"byte_end":353388,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353393,"byte_end":353454,"line_start":113,"line_end":113,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353459,"byte_end":353504,"line_start":114,"line_end":114,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353509,"byte_end":353512,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353517,"byte_end":353580,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353585,"byte_end":353642,"line_start":117,"line_end":117,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353647,"byte_end":353655,"line_start":118,"line_end":118,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353660,"byte_end":353669,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354028,"byte_end":354051,"line_start":130,"line_end":130,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353766,"byte_end":353835,"line_start":124,"line_end":124,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353840,"byte_end":353843,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353848,"byte_end":353907,"line_start":126,"line_end":126,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353912,"byte_end":353915,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":353920,"byte_end":354002,"line_start":128,"line_end":128,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354007,"byte_end":354016,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354393,"byte_end":354416,"line_start":140,"line_end":140,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354127,"byte_end":354196,"line_start":134,"line_end":134,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354201,"byte_end":354204,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354209,"byte_end":354272,"line_start":136,"line_end":136,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354277,"byte_end":354280,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354285,"byte_end":354367,"line_start":138,"line_end":138,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354372,"byte_end":354381,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354760,"byte_end":354782,"line_start":150,"line_end":150,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354492,"byte_end":354560,"line_start":144,"line_end":144,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354565,"byte_end":354568,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354573,"byte_end":354640,"line_start":146,"line_end":146,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354645,"byte_end":354648,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354653,"byte_end":354734,"line_start":148,"line_end":148,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354739,"byte_end":354748,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354927,"byte_end":354933,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354857,"byte_end":354901,"line_start":154,"line_end":154,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354906,"byte_end":354915,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355054,"byte_end":355062,"line_start":162,"line_end":162,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":354990,"byte_end":355028,"line_start":160,"line_end":160,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355033,"byte_end":355042,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355292,"byte_end":355305,"line_start":169,"line_end":169,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355133,"byte_end":355170,"line_start":166,"line_end":166,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355175,"byte_end":355266,"line_start":167,"line_end":167,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355271,"byte_end":355280,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355558,"byte_end":355576,"line_start":177,"line_end":177,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355413,"byte_end":355468,"line_start":173,"line_end":173,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355473,"byte_end":355476,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355481,"byte_end":355532,"line_start":175,"line_end":175,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355537,"byte_end":355546,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355929,"byte_end":355947,"line_start":186,"line_end":186,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355777,"byte_end":355839,"line_start":182,"line_end":182,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355844,"byte_end":355847,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355852,"byte_end":355903,"line_start":184,"line_end":184,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":355908,"byte_end":355917,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356363,"byte_end":356384,"line_start":195,"line_end":195,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, DateTime<Tz2>)\n-> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356148,"byte_end":356212,"line_start":191,"line_end":191,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356217,"byte_end":356264,"line_start":192,"line_end":192,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356342,"byte_end":356351,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356583,"byte_end":356592,"line_start":201,"line_end":201,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356512,"byte_end":356557,"line_start":199,"line_end":199,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356562,"byte_end":356571,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356725,"byte_end":356736,"line_start":207,"line_end":207,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356652,"byte_end":356699,"line_start":205,"line_end":205,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":356704,"byte_end":356713,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357339,"byte_end":357357,"line_start":221,"line_end":221,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"pub fn parse_from_rfc2822(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.\n","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357175,"byte_end":357260,"line_start":219,"line_end":219,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357265,"byte_end":357327,"line_start":220,"line_end":220,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357996,"byte_end":358014,"line_start":233,"line_end":233,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"pub fn parse_from_rfc3339(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357627,"byte_end":357720,"line_start":228,"line_end":228,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357725,"byte_end":357787,"line_start":229,"line_end":229,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357792,"byte_end":357795,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357800,"byte_end":357890,"line_start":231,"line_end":231,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357895,"byte_end":357984,"line_start":232,"line_end":232,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359236,"byte_end":359250,"line_start":260,"line_end":260,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358284,"byte_end":358340,"line_start":240,"line_end":240,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358345,"byte_end":358402,"line_start":241,"line_end":241,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358407,"byte_end":358476,"line_start":242,"line_end":242,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358481,"byte_end":358519,"line_start":243,"line_end":243,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358524,"byte_end":358527,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358532,"byte_end":358626,"line_start":245,"line_end":245,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358631,"byte_end":358634,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358639,"byte_end":358705,"line_start":247,"line_end":247,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358710,"byte_end":358804,"line_start":248,"line_end":248,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358809,"byte_end":358884,"line_start":249,"line_end":249,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358889,"byte_end":358892,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358897,"byte_end":358910,"line_start":251,"line_end":251,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358915,"byte_end":358918,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358923,"byte_end":358934,"line_start":253,"line_end":253,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358939,"byte_end":358989,"line_start":254,"line_end":254,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":358994,"byte_end":358997,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359002,"byte_end":359040,"line_start":256,"line_end":256,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359045,"byte_end":359115,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359120,"byte_end":359212,"line_start":258,"line_end":258,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359217,"byte_end":359224,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359618,"byte_end":359628,"line_start":269,"line_end":269,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"pub fn to_rfc2822(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359520,"byte_end":359606,"line_start":268,"line_end":268,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359911,"byte_end":359921,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"pub fn to_rfc3339(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359805,"byte_end":359899,"line_start":274,"line_end":274,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361335,"byte_end":361350,"line_start":304,"line_end":304,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"pub fn to_rfc3339_opts(&Self, SecondsFormat, bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360098,"byte_end":360170,"line_start":280,"line_end":280,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360175,"byte_end":360245,"line_start":281,"line_end":281,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360250,"byte_end":360297,"line_start":282,"line_end":282,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360302,"byte_end":360389,"line_start":283,"line_end":283,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360394,"byte_end":360426,"line_start":284,"line_end":284,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360431,"byte_end":360516,"line_start":285,"line_end":285,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360521,"byte_end":360524,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360529,"byte_end":360543,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360548,"byte_end":360551,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360556,"byte_end":360567,"line_start":289,"line_end":289,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360572,"byte_end":360644,"line_start":290,"line_end":290,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360649,"byte_end":360717,"line_start":291,"line_end":291,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360722,"byte_end":360786,"line_start":292,"line_end":292,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360791,"byte_end":360839,"line_start":293,"line_end":293,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360844,"byte_end":360907,"line_start":294,"line_end":294,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360912,"byte_end":360955,"line_start":295,"line_end":295,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":360960,"byte_end":361021,"line_start":296,"line_end":296,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361026,"byte_end":361065,"line_start":297,"line_end":297,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361070,"byte_end":361073,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361078,"byte_end":361123,"line_start":299,"line_end":299,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361128,"byte_end":361196,"line_start":300,"line_end":300,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361201,"byte_end":361262,"line_start":301,"line_end":301,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361267,"byte_end":361311,"line_start":302,"line_end":302,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":361316,"byte_end":361323,"line_start":303,"line_end":303,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363069,"byte_end":363086,"line_start":356,"line_end":356,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = Item> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":362968,"byte_end":363043,"line_start":354,"line_end":354,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363048,"byte_end":363057,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363552,"byte_end":363558,"line_start":366,"line_end":366,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363337,"byte_end":363409,"line_start":362,"line_end":362,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363414,"byte_end":363483,"line_start":363,"line_end":363,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363488,"byte_end":363526,"line_start":364,"line_end":364,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363531,"byte_end":363540,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":964},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":1527},{"krate":0,"index":1534},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1536},{"krate":0,"index":1553},{"krate":0,"index":1551},{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1543},{"krate":0,"index":1554},{"krate":0,"index":1607},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1598},{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":989},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":1609},{"krate":0,"index":1656},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1647},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1658},{"krate":0,"index":1695},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1681},{"krate":0,"index":1698},{"krate":0,"index":1711},{"krate":0,"index":1709},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1701},{"krate":0,"index":1713},{"krate":0,"index":1737},{"krate":0,"index":1735},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1728},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1072},{"krate":0,"index":1141},{"krate":0,"index":1178},{"krate":0,"index":1207},{"krate":0,"index":1791},{"krate":0,"index":1797},{"krate":0,"index":1228},{"krate":0,"index":1234},{"krate":0,"index":1238}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"/ Formatting (and parsing) utilities for date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400112,"byte_end":400169,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400170,"byte_end":400173,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides the common types and routines to implement,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400174,"byte_end":400242,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400243,"byte_end":400322,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400323,"byte_end":400411,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ For most cases you should use these high-level interfaces.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400412,"byte_end":400474,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400475,"byte_end":400478,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400479,"byte_end":400567,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400568,"byte_end":400661,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ the [`Item`](./enum.Item.html) type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400662,"byte_end":400702,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ They are generated from more readable **format strings**;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400703,"byte_end":400764,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400765,"byte_end":400834,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ C's `strftime` format](./strftime/index.html).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":400835,"byte_end":400885,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401454,"byte_end":401458,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1536},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401434,"byte_end":401449,"line_start":38,"line_end":38,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1539},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401492,"byte_end":401496,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1536},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401464,"byte_end":401487,"line_start":40,"line_end":40,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401525,"byte_end":401530,"line_start":43,"line_end":43,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1536},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401502,"byte_end":401520,"line_start":42,"line_end":42,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1536},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401424,"byte_end":401427,"line_start":37,"line_end":37,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"pub enum Pad {\n\n    /// No padding.\n    None,\n\n    /// Zero (`0`) padding.\n    Zero,\n\n    /// Space padding.\n    Space,\n}","parent":null,"children":[{"krate":0,"index":1537},{"krate":0,"index":1539},{"krate":0,"index":1541}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401328,"byte_end":401369,"line_start":35,"line_end":35,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1555},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402428,"byte_end":402432,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402305,"byte_end":402344,"line_start":61,"line_end":61,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402349,"byte_end":402423,"line_start":62,"line_end":62,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1557},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402534,"byte_end":402544,"line_start":65,"line_end":65,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402438,"byte_end":402529,"line_start":64,"line_end":64,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1559},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402615,"byte_end":402625,"line_start":67,"line_end":67,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402550,"byte_end":402610,"line_start":66,"line_end":66,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1561},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402760,"byte_end":402767,"line_start":70,"line_end":70,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402631,"byte_end":402676,"line_start":68,"line_end":68,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402681,"byte_end":402755,"line_start":69,"line_end":69,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402865,"byte_end":402878,"line_start":72,"line_end":72,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402773,"byte_end":402860,"line_start":71,"line_end":71,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1565},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402961,"byte_end":402974,"line_start":74,"line_end":74,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402884,"byte_end":402956,"line_start":73,"line_end":73,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1567},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403005,"byte_end":403010,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402980,"byte_end":403000,"line_start":75,"line_end":75,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403052,"byte_end":403055,"line_start":78,"line_end":78,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403016,"byte_end":403047,"line_start":77,"line_end":77,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1571},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403148,"byte_end":403159,"line_start":80,"line_end":80,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403061,"byte_end":403143,"line_start":79,"line_end":79,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403252,"byte_end":403263,"line_start":82,"line_end":82,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403165,"byte_end":403247,"line_start":81,"line_end":81,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403321,"byte_end":403328,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403269,"byte_end":403316,"line_start":83,"line_end":83,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403404,"byte_end":403418,"line_start":86,"line_end":86,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403334,"byte_end":403399,"line_start":85,"line_end":85,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403492,"byte_end":403506,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403424,"byte_end":403487,"line_start":87,"line_end":87,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1581},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403547,"byte_end":403554,"line_start":90,"line_end":90,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403512,"byte_end":403542,"line_start":89,"line_end":89,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1583},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403613,"byte_end":403617,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403560,"byte_end":403608,"line_start":91,"line_end":91,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403676,"byte_end":403682,"line_start":94,"line_end":94,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403623,"byte_end":403671,"line_start":93,"line_end":93,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1587},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403755,"byte_end":403761,"line_start":96,"line_end":96,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403688,"byte_end":403750,"line_start":95,"line_end":95,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1589},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403836,"byte_end":403842,"line_start":98,"line_end":98,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403767,"byte_end":403831,"line_start":97,"line_end":97,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404045,"byte_end":404055,"line_start":102,"line_end":102,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403848,"byte_end":403916,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403921,"byte_end":403962,"line_start":100,"line_end":100,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":403967,"byte_end":404040,"line_start":101,"line_end":101,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404235,"byte_end":404244,"line_start":105,"line_end":105,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404061,"byte_end":404153,"line_start":103,"line_end":103,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404158,"byte_end":404230,"line_start":104,"line_end":104,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1595},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404463,"byte_end":404471,"line_start":111,"line_end":111,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404251,"byte_end":404274,"line_start":107,"line_end":107,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404279,"byte_end":404282,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404287,"byte_end":404363,"line_start":109,"line_end":109,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404368,"byte_end":404458,"line_start":110,"line_end":110,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1554},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402291,"byte_end":402298,"line_start":60,"line_end":60,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"pub enum Numeric {\n\n    /// Full Gregorian year (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    Year,\n\n    /// Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n    YearDiv100,\n\n    /// Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n    YearMod100,\n\n    /// Year in the ISO week date (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    IsoYear,\n\n    /// Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n    IsoYearDiv100,\n\n    /// Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n    IsoYearMod100,\n\n    /// Month (FW=PW=2).\n    Month,\n\n    /// Day of the month (FW=PW=2).\n    Day,\n\n    /// Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n    WeekFromSun,\n\n    /// Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n    WeekFromMon,\n\n    /// Week number in the ISO week date (FW=PW=2).\n    IsoWeek,\n\n    /// Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n    NumDaysFromSun,\n\n    /// Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n    WeekdayFromMon,\n\n    /// Day of the year (FW=PW=3).\n    Ordinal,\n\n    /// Hour number in the 24-hour clocks (FW=PW=2).\n    Hour,\n\n    /// Hour number in the 12-hour clocks (FW=PW=2).\n    Hour12,\n\n    /// The number of minutes since the last whole hour (FW=PW=2).\n    Minute,\n\n    /// The number of seconds since the last whole minute (FW=PW=2).\n    Second,\n\n    /// The number of nanoseconds since the last whole second (FW=PW=9).\n    /// Note that this is *not* left-aligned;\n    /// see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n    /// For formatting, it assumes UTC upon the absence of time zone offset.\n    Timestamp,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":1555},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401535,"byte_end":401558,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401559,"byte_end":401629,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401630,"byte_end":401633,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401634,"byte_end":401700,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401701,"byte_end":401800,"line_start":50,"line_end":50,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401801,"byte_end":401828,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401829,"byte_end":401908,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401909,"byte_end":401912,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401913,"byte_end":401974,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily). ","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":401975,"byte_end":402059,"line_start":55,"line_end":55,"column_start":1,"column_end":85}},{"value":"/ It also trims the preceding whitespaces if any.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402060,"byte_end":402111,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402112,"byte_end":402199,"line_start":57,"line_end":57,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":402200,"byte_end":402242,"line_start":58,"line_end":58,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":985},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404579,"byte_end":404594,"line_start":115,"line_end":115,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":986}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404493,"byte_end":404567,"line_start":114,"line_end":114,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405393,"byte_end":405407,"line_start":149,"line_end":149,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405260,"byte_end":405288,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405293,"byte_end":405296,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405301,"byte_end":405388,"line_start":148,"line_end":148,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1612},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405540,"byte_end":405553,"line_start":153,"line_end":153,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405413,"byte_end":405434,"line_start":150,"line_end":150,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405439,"byte_end":405442,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405447,"byte_end":405535,"line_start":152,"line_end":152,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405702,"byte_end":405718,"line_start":157,"line_end":157,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405559,"byte_end":405597,"line_start":154,"line_end":154,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405602,"byte_end":405605,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405610,"byte_end":405697,"line_start":156,"line_end":156,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1616},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405861,"byte_end":405876,"line_start":161,"line_end":161,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405724,"byte_end":405755,"line_start":158,"line_end":158,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405760,"byte_end":405763,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405768,"byte_end":405856,"line_start":160,"line_end":160,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1618},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405954,"byte_end":405963,"line_start":165,"line_end":165,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405882,"byte_end":405892,"line_start":162,"line_end":162,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405897,"byte_end":405900,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405905,"byte_end":405949,"line_start":164,"line_end":164,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1620},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406041,"byte_end":406050,"line_start":169,"line_end":169,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405969,"byte_end":405979,"line_start":166,"line_end":166,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405984,"byte_end":405987,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405992,"byte_end":406036,"line_start":168,"line_end":168,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406297,"byte_end":406307,"line_start":173,"line_end":173,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406056,"byte_end":406129,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406134,"byte_end":406210,"line_start":171,"line_end":171,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406215,"byte_end":406292,"line_start":172,"line_end":172,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1624},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406397,"byte_end":406408,"line_start":175,"line_end":175,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406313,"byte_end":406392,"line_start":174,"line_end":174,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1626},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406498,"byte_end":406509,"line_start":177,"line_end":177,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406414,"byte_end":406493,"line_start":176,"line_end":176,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1628},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406599,"byte_end":406610,"line_start":179,"line_end":179,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406515,"byte_end":406594,"line_start":178,"line_end":178,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406731,"byte_end":406743,"line_start":183,"line_end":183,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406616,"byte_end":406634,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406639,"byte_end":406642,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406647,"byte_end":406726,"line_start":182,"line_end":182,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1632},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407075,"byte_end":407094,"line_start":189,"line_end":189,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406749,"byte_end":406822,"line_start":184,"line_end":184,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406827,"byte_end":406830,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406835,"byte_end":406928,"line_start":186,"line_end":186,"column_start":5,"column_end":98}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406933,"byte_end":406985,"line_start":187,"line_end":187,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":406990,"byte_end":407070,"line_start":188,"line_end":188,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1634},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407483,"byte_end":407503,"line_start":196,"line_end":196,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407100,"byte_end":407168,"line_start":190,"line_end":190,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407173,"byte_end":407176,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407181,"byte_end":407274,"line_start":192,"line_end":192,"column_start":5,"column_end":98}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407279,"byte_end":407336,"line_start":193,"line_end":193,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407341,"byte_end":407393,"line_start":194,"line_end":194,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407398,"byte_end":407478,"line_start":195,"line_end":195,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407642,"byte_end":407656,"line_start":199,"line_end":199,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407509,"byte_end":407595,"line_start":197,"line_end":197,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407600,"byte_end":407637,"line_start":198,"line_end":198,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1638},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407797,"byte_end":407812,"line_start":202,"line_end":202,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407662,"byte_end":407750,"line_start":200,"line_end":200,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407755,"byte_end":407792,"line_start":201,"line_end":201,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1640},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407905,"byte_end":407912,"line_start":204,"line_end":204,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407818,"byte_end":407900,"line_start":203,"line_end":203,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1642},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407968,"byte_end":407975,"line_start":206,"line_end":206,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407918,"byte_end":407963,"line_start":205,"line_end":205,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1644},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408194,"byte_end":408202,"line_start":212,"line_end":212,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1609},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":407982,"byte_end":408005,"line_start":208,"line_end":208,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408010,"byte_end":408013,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408018,"byte_end":408094,"line_start":210,"line_end":210,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408099,"byte_end":408189,"line_start":211,"line_end":211,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1609},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405248,"byte_end":405253,"line_start":145,"line_end":145,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"pub enum Fixed {\n\n    /// Abbreviated month names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortMonthName,\n\n    /// Full month names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongMonthName,\n\n    /// Abbreviated day of the week names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortWeekdayName,\n\n    /// Full day of the week names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongWeekdayName,\n\n    /// AM/PM.\n    ///\n    /// Prints in lower case, reads in any case.\n    LowerAmPm,\n\n    /// AM/PM.\n    ///\n    /// Prints in upper case, reads in any case.\n    UpperAmPm,\n\n    /// An optional dot plus one or more digits for left-aligned nanoseconds.\n    /// May print nothing, 3, 6 or 9 digits according to the available accuracy.\n    /// See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n    Nanosecond3,\n\n    /// Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n    Nanosecond6,\n\n    /// Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n    Nanosecond9,\n\n    /// Timezone name.\n    ///\n    /// It does not support parsing, its use in the parser is an immediate failure.\n    TimezoneName,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColon,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespaces,\n    /// and `Z` can be either in upper case or in lower case.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColonZ,\n\n    /// Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffset,\n\n    /// Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffsetZ,\n\n    /// RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n    RFC2822,\n\n    /// RFC 3339 & ISO 8601 date and time syntax.\n    RFC3339,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405025,"byte_end":405053,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405054,"byte_end":405057,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405058,"byte_end":405114,"line_start":142,"line_end":142,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":405115,"byte_end":405199,"line_start":143,"line_end":143,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":994},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408313,"byte_end":408326,"line_start":216,"line_end":216,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":995}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408222,"byte_end":408301,"line_start":215,"line_end":215,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1660},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408929,"byte_end":408936,"line_start":245,"line_end":245,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408884,"byte_end":408924,"line_start":244,"line_end":244,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1663},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409016,"byte_end":409028,"line_start":247,"line_end":247,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" Same to `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same to `Literal` but with the string owned by the item.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408951,"byte_end":409011,"line_start":246,"line_end":246,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1666},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409116,"byte_end":409121,"line_start":249,"line_end":249,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409044,"byte_end":409111,"line_start":248,"line_end":248,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1669},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409199,"byte_end":409209,"line_start":251,"line_end":251,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" Same to `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same to `Space` but with the string owned by the item.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409136,"byte_end":409194,"line_start":250,"line_end":250,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1672},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409388,"byte_end":409395,"line_start":254,"line_end":254,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409225,"byte_end":409315,"line_start":252,"line_end":252,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409320,"byte_end":409383,"line_start":253,"line_end":253,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409442,"byte_end":409447,"line_start":256,"line_end":256,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409415,"byte_end":409437,"line_start":255,"line_end":255,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1679},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409536,"byte_end":409541,"line_start":258,"line_end":258,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1658},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409460,"byte_end":409531,"line_start":257,"line_end":257,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1658},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408869,"byte_end":408873,"line_start":243,"line_end":243,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"pub enum Item<'a> {\n\n    /// A literally printed and parsed text.\n    Literal(&'a str),\n\n    /// Same to `Literal` but with the string owned by the item.\n    OwnedLiteral(Box<str>),\n\n    /// Whitespace. Prints literally but reads zero or more whitespace.\n    Space(&'a str),\n\n    /// Same to `Space` but with the string owned by the item.\n    OwnedSpace(Box<str>),\n\n    /// Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n    /// the parser simply ignores any padded whitespace and zeroes.\n    Numeric(Numeric, Pad),\n\n    /// Fixed-format item.\n    Fixed(Fixed),\n\n    /// Issues a formatting error. Used to signal an invalid format string.\n    Error,\n}","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1663},{"krate":0,"index":1666},{"krate":0,"index":1669},{"krate":0,"index":1672},{"krate":0,"index":1676},{"krate":0,"index":1679}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408745,"byte_end":408820,"line_start":241,"line_end":241,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":410041,"byte_end":410051,"line_start":270,"line_end":270,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":409945,"byte_end":409984,"line_start":268,"line_end":268,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":411447,"byte_end":411458,"line_start":306,"line_end":306,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same to `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same to `Result<T, ParseError>`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":411401,"byte_end":411437,"line_start":305,"line_end":305,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1022},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":412907,"byte_end":412913,"line_start":339,"line_end":339,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"pub fn format<'a,\n              I>(&mut fmt::Formatter, Option<&NaiveDate>, Option<&NaiveTime>,\n                 Option<&(String, FixedOffset)>, I) -> fmt::Result where\nI: Iterator<Item = Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":412795,"byte_end":412859,"line_start":337,"line_end":337,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":412860,"byte_end":412899,"line_start":338,"line_end":338,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427079,"byte_end":427085,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426561,"byte_end":426629,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426630,"byte_end":426633,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426634,"byte_end":426717,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426718,"byte_end":426810,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426811,"byte_end":426814,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426815,"byte_end":426897,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426898,"byte_end":426993,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":426994,"byte_end":427032,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1740},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427262,"byte_end":427266,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427092,"byte_end":427101,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427106,"byte_end":427109,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427114,"byte_end":427189,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427194,"byte_end":427253,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1741},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427570,"byte_end":427582,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427286,"byte_end":427354,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427359,"byte_end":427362,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427367,"byte_end":427424,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427429,"byte_end":427488,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427493,"byte_end":427561,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1742},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427675,"byte_end":427687,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427602,"byte_end":427666,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1743},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427954,"byte_end":427961,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427707,"byte_end":427781,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427786,"byte_end":427789,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427794,"byte_end":427879,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427884,"byte_end":427945,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1744},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428348,"byte_end":428363,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":427981,"byte_end":428071,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428076,"byte_end":428123,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428128,"byte_end":428131,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428136,"byte_end":428193,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428198,"byte_end":428263,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428268,"byte_end":428339,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1745},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428530,"byte_end":428545,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428383,"byte_end":428469,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428474,"byte_end":428521,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1746},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428592,"byte_end":428597,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428565,"byte_end":428583,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1747},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428752,"byte_end":428765,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428617,"byte_end":428688,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428693,"byte_end":428743,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1748},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428920,"byte_end":428933,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428785,"byte_end":428856,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428861,"byte_end":428911,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1749},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429073,"byte_end":429080,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":428953,"byte_end":429016,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429021,"byte_end":429064,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1750},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429129,"byte_end":429136,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429100,"byte_end":429120,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1751},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429230,"byte_end":429237,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429160,"byte_end":429221,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1752},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429341,"byte_end":429344,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429257,"byte_end":429332,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429445,"byte_end":429456,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429364,"byte_end":429436,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429519,"byte_end":429530,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429476,"byte_end":429510,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429585,"byte_end":429591,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429550,"byte_end":429576,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1756},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429675,"byte_end":429681,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429611,"byte_end":429666,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1757},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429780,"byte_end":429790,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429701,"byte_end":429771,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1758},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429993,"byte_end":430002,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429810,"byte_end":429887,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429892,"byte_end":429895,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":429900,"byte_end":429984,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1759},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":430081,"byte_end":430087,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1739},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":430022,"byte_end":430072,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431182,"byte_end":431185,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"pub fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431124,"byte_end":431170,"line_start":138,"line_end":138,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431321,"byte_end":431329,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"pub fn set_year(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431237,"byte_end":431309,"line_start":143,"line_end":143,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431569,"byte_end":431585,"line_start":149,"line_end":149,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"pub fn set_year_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431469,"byte_end":431557,"line_start":148,"line_end":148,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431884,"byte_end":431900,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"pub fn set_year_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431784,"byte_end":431872,"line_start":154,"line_end":154,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":432189,"byte_end":432200,"line_start":161,"line_end":161,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"pub fn set_isoyear(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":432099,"byte_end":432177,"line_start":160,"line_end":160,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":432449,"byte_end":432468,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"pub fn set_isoyear_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":432343,"byte_end":432437,"line_start":165,"line_end":165,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":432776,"byte_end":432795,"line_start":172,"line_end":172,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"pub fn set_isoyear_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":432670,"byte_end":432764,"line_start":171,"line_end":171,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":433083,"byte_end":433092,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"pub fn set_month(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":432997,"byte_end":433071,"line_start":177,"line_end":177,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":433335,"byte_end":433352,"line_start":183,"line_end":183,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"pub fn set_week_from_sun(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":433233,"byte_end":433323,"line_start":182,"line_end":182,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":433603,"byte_end":433620,"line_start":188,"line_end":188,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"pub fn set_week_from_mon(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":433501,"byte_end":433591,"line_start":187,"line_end":187,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":433859,"byte_end":433870,"line_start":193,"line_end":193,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"pub fn set_isoweek(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":433769,"byte_end":433847,"line_start":192,"line_end":192,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434103,"byte_end":434114,"line_start":198,"line_end":198,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"pub fn set_weekday(&mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434013,"byte_end":434091,"line_start":197,"line_end":197,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434316,"byte_end":434327,"line_start":203,"line_end":203,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"pub fn set_ordinal(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434226,"byte_end":434304,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434552,"byte_end":434559,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"pub fn set_day(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434470,"byte_end":434540,"line_start":207,"line_end":207,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434836,"byte_end":434844,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"pub fn set_ampm(&mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434698,"byte_end":434784,"line_start":212,"line_end":212,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434789,"byte_end":434824,"line_start":213,"line_end":213,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435103,"byte_end":435113,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"pub fn set_hour12(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":434973,"byte_end":435046,"line_start":218,"line_end":218,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435051,"byte_end":435091,"line_start":219,"line_end":219,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435456,"byte_end":435464,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"pub fn set_hour(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435302,"byte_end":435369,"line_start":225,"line_end":225,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435374,"byte_end":435444,"line_start":226,"line_end":226,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435809,"byte_end":435819,"line_start":235,"line_end":235,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"pub fn set_minute(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435721,"byte_end":435797,"line_start":234,"line_end":234,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436049,"byte_end":436059,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"pub fn set_second(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":435961,"byte_end":436037,"line_start":239,"line_end":239,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436297,"byte_end":436311,"line_start":245,"line_end":245,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"pub fn set_nanosecond(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436201,"byte_end":436285,"line_start":244,"line_end":244,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436551,"byte_end":436564,"line_start":250,"line_end":250,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"pub fn set_timestamp(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436457,"byte_end":436539,"line_start":249,"line_end":249,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436762,"byte_end":436772,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"pub fn set_offset(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436674,"byte_end":436750,"line_start":254,"line_end":254,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437421,"byte_end":437434,"line_start":270,"line_end":270,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"pub fn to_naive_date(&Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436914,"byte_end":436966,"line_start":259,"line_end":259,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436971,"byte_end":436974,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":436979,"byte_end":437053,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437058,"byte_end":437061,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437066,"byte_end":437089,"line_start":263,"line_end":263,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437094,"byte_end":437132,"line_start":264,"line_end":264,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437137,"byte_end":437208,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437213,"byte_end":437233,"line_start":266,"line_end":266,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437238,"byte_end":437241,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437246,"byte_end":437340,"line_start":268,"line_end":268,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":437345,"byte_end":437409,"line_start":269,"line_end":269,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446472,"byte_end":446485,"line_start":455,"line_end":455,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"pub fn to_naive_time(&Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446069,"byte_end":446121,"line_start":446,"line_end":446,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446126,"byte_end":446129,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446134,"byte_end":446208,"line_start":448,"line_end":448,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446213,"byte_end":446216,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446221,"byte_end":446280,"line_start":450,"line_end":450,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446285,"byte_end":446341,"line_start":451,"line_end":451,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446346,"byte_end":446385,"line_start":452,"line_end":452,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446390,"byte_end":446393,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":446398,"byte_end":446460,"line_start":454,"line_end":454,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":448268,"byte_end":448297,"line_start":497,"line_end":497,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"pub fn to_naive_datetime_with_offset(&Self, i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":447783,"byte_end":447844,"line_start":490,"line_end":490,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":447849,"byte_end":447938,"line_start":491,"line_end":491,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":447943,"byte_end":448020,"line_start":492,"line_end":492,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":448025,"byte_end":448028,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":448033,"byte_end":448096,"line_start":494,"line_end":494,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":448101,"byte_end":448187,"line_start":495,"line_end":495,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":448192,"byte_end":448256,"line_start":496,"line_end":496,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":451719,"byte_end":451734,"line_start":567,"line_end":567,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"pub fn to_fixed_offset(&Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":451643,"byte_end":451707,"line_start":566,"line_end":566,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452206,"byte_end":452217,"line_start":577,"line_end":577,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"pub fn to_datetime(&Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":451855,"byte_end":451925,"line_start":571,"line_end":571,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":451930,"byte_end":451933,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":451938,"byte_end":452001,"line_start":573,"line_end":573,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452006,"byte_end":452092,"line_start":574,"line_end":574,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452097,"byte_end":452125,"line_start":575,"line_end":575,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452130,"byte_end":452194,"line_start":576,"line_end":576,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":453260,"byte_end":453285,"line_start":597,"line_end":597,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"pub fn to_datetime_with_timezone<Tz: TimeZone>(&Self, &Tz)\n-> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452703,"byte_end":452773,"line_start":588,"line_end":588,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452778,"byte_end":452858,"line_start":589,"line_end":589,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452863,"byte_end":452866,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452871,"byte_end":452934,"line_start":591,"line_end":591,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":452939,"byte_end":453025,"line_start":592,"line_end":592,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":453030,"byte_end":453058,"line_start":593,"line_end":593,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":453063,"byte_end":453127,"line_start":594,"line_end":594,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":453132,"byte_end":453207,"line_start":595,"line_end":595,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":453212,"byte_end":453248,"line_start":596,"line_end":596,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1200},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498615,"byte_end":498620,"line_start":205,"line_end":205,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"pub fn parse<'a, I>(&mut Parsed, &str, I) -> ParseResult<()> where\nI: Iterator<Item = Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":497712,"byte_end":497786,"line_start":189,"line_end":189,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":497787,"byte_end":497883,"line_start":190,"line_end":190,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":497884,"byte_end":497937,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":497938,"byte_end":498022,"line_start":192,"line_end":192,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498023,"byte_end":498026,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498027,"byte_end":498071,"line_start":194,"line_end":194,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498072,"byte_end":498075,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498076,"byte_end":498134,"line_start":196,"line_end":196,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498135,"byte_end":498228,"line_start":197,"line_end":197,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498229,"byte_end":498304,"line_start":198,"line_end":198,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498305,"byte_end":498308,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498309,"byte_end":498352,"line_start":200,"line_end":200,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498353,"byte_end":498416,"line_start":201,"line_end":201,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498417,"byte_end":498508,"line_start":202,"line_end":202,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498509,"byte_end":498512,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parse.rs","byte_start":498513,"byte_end":498607,"line_start":204,"line_end":204,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1207},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1772},{"krate":0,"index":1779},{"krate":0,"index":1776},{"krate":0,"index":1213},{"krate":0,"index":1218}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"*\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [1]            |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [2]  |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [2]      |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same to `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same to `%d` but space-padded. Same to `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [3]    |\n| `%W`  | `27`     | Same to `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same to `%Y` but uses the year number in ISO 8601 week date. [4]           |\n| `%g`  | `01`     | Same to `%y` but uses the year number in ISO 8601 week date. [4]           |\n| `%V`  | `27`     | Same to `%U` but uses the week number in ISO 8601 week date (01--53). [4]  |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same to `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Same to `%D`.                                                         |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same to `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same to `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same to `%H` but space-padded. Same to `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same to `%I` but space-padded. Same to `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [5]                       |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [8]  |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [8]  |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [8]     |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [8]     |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [8]     |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same to `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same to `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Same to `%T`.                                                         |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same to `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | *Formatting only:* Local time zone name.                                   |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same to `%z` but with a colon.                                             |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|`ctime` date & time format. Same to `%a %b %e %T %Y` sans `\\n`.|\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [6]      |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [7] |\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n1. `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n2. `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n3. `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n4. `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n5. `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n6. `%+`:\n   Same to `%Y-%m-%dT%H:%M:%S%.f%:z`,\n   i.e. 0, 3, 6 or 9 fractional digits for seconds and colons in the time zone offset.\n\n   The typical `strftime` implementations have\n   different (and locale-dependent) formats for this specifier.\n   While Chrono's format for `%+` is far more stable,\n   it is best to avoid this specifier if you want to control the exact output.\n\n7. `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n8. `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`:\n\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n\n*/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":524264,"byte_end":534073,"line_start":4,"line_end":147,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534208,"byte_end":534221,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1774},{"krate":0,"index":1775}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534116,"byte_end":534172,"line_start":151,"line_end":151,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534697,"byte_end":534700,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"pub fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534611,"byte_end":534685,"line_start":163,"line_end":163,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1791},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":423727,"byte_end":423740,"line_start":545,"line_end":545,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":423535,"byte_end":423616,"line_start":542,"line_end":542,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":423617,"byte_end":423698,"line_start":543,"line_end":543,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424196,"byte_end":424199,"line_start":558,"line_end":558,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"pub fn new(Option<NaiveDate>, Option<NaiveTime>, I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424119,"byte_end":424184,"line_start":557,"line_end":557,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424459,"byte_end":424474,"line_start":563,"line_end":563,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"pub fn new_with_offset<Off>(Option<NaiveDate>, Option<NaiveTime>, &Off, I)\n-> DelayedFormat<I> where Off: Offset + fmt::Display","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424367,"byte_end":424447,"line_start":562,"line_end":562,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1247},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548030,"byte_end":548041,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":547632,"byte_end":547708,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":547709,"byte_end":547780,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":547781,"byte_end":547853,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":547854,"byte_end":547929,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":547930,"byte_end":548007,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548008,"byte_end":548019,"line_start":13,"line_end":13,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548571,"byte_end":548584,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"pub fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1247},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548048,"byte_end":548123,"line_start":15,"line_end":15,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548128,"byte_end":548197,"line_start":16,"line_end":16,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548202,"byte_end":548234,"line_start":17,"line_end":17,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548239,"byte_end":548242,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548247,"byte_end":548260,"line_start":19,"line_end":19,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548265,"byte_end":548277,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548282,"byte_end":548349,"line_start":21,"line_end":21,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548354,"byte_end":548417,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548422,"byte_end":548484,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548489,"byte_end":548551,"line_start":24,"line_end":24,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548556,"byte_end":548563,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":549087,"byte_end":549100,"line_start":38,"line_end":38,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"pub fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1247},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548618,"byte_end":548682,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548687,"byte_end":548750,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548755,"byte_end":548758,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548763,"byte_end":548776,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548781,"byte_end":548793,"line_start":32,"line_end":32,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548798,"byte_end":548865,"line_start":33,"line_end":33,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548870,"byte_end":548933,"line_start":34,"line_end":34,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":548938,"byte_end":549000,"line_start":35,"line_end":35,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":549005,"byte_end":549067,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":549072,"byte_end":549079,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1801},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22052,"byte_end":22055,"line_start":497,"line_end":497,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22036,"byte_end":22047,"line_start":496,"line_end":496,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1804},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22082,"byte_end":22085,"line_start":499,"line_end":499,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22065,"byte_end":22077,"line_start":498,"line_end":498,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1807},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22114,"byte_end":22117,"line_start":501,"line_end":501,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22095,"byte_end":22109,"line_start":500,"line_end":500,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1810},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22145,"byte_end":22148,"line_start":503,"line_end":503,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22127,"byte_end":22140,"line_start":502,"line_end":502,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1813},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22174,"byte_end":22177,"line_start":505,"line_end":505,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22158,"byte_end":22169,"line_start":504,"line_end":504,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1816},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22205,"byte_end":22208,"line_start":507,"line_end":507,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22187,"byte_end":22200,"line_start":506,"line_end":506,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1819},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22234,"byte_end":22237,"line_start":509,"line_end":509,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1800},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22218,"byte_end":22229,"line_start":508,"line_end":508,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":1800},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22022,"byte_end":22029,"line_start":495,"line_end":495,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"pub enum Weekday {\n\n    /// Monday.\n    Mon = ,\n\n    /// Tuesday.\n    Tue = ,\n\n    /// Wednesday.\n    Wed = ,\n\n    /// Thursday.\n    Thu = ,\n\n    /// Friday.\n    Fri = ,\n\n    /// Saturday.\n    Sat = ,\n\n    /// Sunday.\n    Sun = ,\n}","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1804},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":1816},{"krate":0,"index":1819}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":21627,"byte_end":21647,"line_start":488,"line_end":488,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":21648,"byte_end":21651,"line_start":489,"line_end":489,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":21652,"byte_end":21709,"line_start":490,"line_end":490,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":21710,"byte_end":21788,"line_start":491,"line_end":491,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":21789,"byte_end":21880,"line_start":492,"line_end":492,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22556,"byte_end":22560,"line_start":519,"line_end":519,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"pub fn succ(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22265,"byte_end":22294,"line_start":513,"line_end":513,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22299,"byte_end":22302,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22307,"byte_end":22378,"line_start":515,"line_end":515,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22383,"byte_end":22454,"line_start":516,"line_end":516,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22459,"byte_end":22530,"line_start":517,"line_end":517,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22535,"byte_end":22544,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23213,"byte_end":23217,"line_start":537,"line_end":537,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"pub fn pred(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22918,"byte_end":22951,"line_start":531,"line_end":531,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22956,"byte_end":22959,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22964,"byte_end":23035,"line_start":533,"line_end":533,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23040,"byte_end":23111,"line_start":534,"line_end":534,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23116,"byte_end":23187,"line_start":535,"line_end":535,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23192,"byte_end":23201,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23959,"byte_end":23977,"line_start":555,"line_end":555,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"pub fn number_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23575,"byte_end":23659,"line_start":549,"line_end":549,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23664,"byte_end":23667,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23672,"byte_end":23757,"line_start":551,"line_end":551,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23762,"byte_end":23847,"line_start":552,"line_end":552,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23852,"byte_end":23933,"line_start":553,"line_end":553,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":23938,"byte_end":23947,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24612,"byte_end":24630,"line_start":573,"line_end":573,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"pub fn number_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24254,"byte_end":24312,"line_start":567,"line_end":567,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24317,"byte_end":24320,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24325,"byte_end":24410,"line_start":569,"line_end":569,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24415,"byte_end":24500,"line_start":570,"line_end":570,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24505,"byte_end":24586,"line_start":571,"line_end":571,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24591,"byte_end":24600,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25271,"byte_end":25291,"line_start":591,"line_end":591,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"pub fn num_days_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24907,"byte_end":24965,"line_start":585,"line_end":585,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24970,"byte_end":24973,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":24978,"byte_end":25065,"line_start":587,"line_end":587,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25070,"byte_end":25157,"line_start":588,"line_end":588,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25162,"byte_end":25245,"line_start":589,"line_end":589,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25250,"byte_end":25259,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25932,"byte_end":25952,"line_start":609,"line_end":609,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"pub fn num_days_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25568,"byte_end":25626,"line_start":603,"line_end":603,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25631,"byte_end":25634,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25639,"byte_end":25726,"line_start":605,"line_end":605,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25731,"byte_end":25818,"line_start":606,"line_end":606,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25823,"byte_end":25906,"line_start":607,"line_end":607,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":25911,"byte_end":25920,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1836},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":27400,"byte_end":27417,"line_start":659,"line_end":659,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":1837}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":27293,"byte_end":27360,"line_start":657,"line_end":657,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1268},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30535,"byte_end":30543,"line_start":778,"line_end":778,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30475,"byte_end":30524,"line_start":777,"line_end":777,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30661,"byte_end":30665,"line_start":780,"line_end":780,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"pub fn year(&Self) -> i32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30557,"byte_end":30653,"line_start":779,"line_end":779,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30874,"byte_end":30881,"line_start":785,"line_end":785,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"pub fn year_ce(&Self) -> (bool, u32)","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30686,"byte_end":30759,"line_start":782,"line_end":782,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30764,"byte_end":30852,"line_start":783,"line_end":783,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30857,"byte_end":30866,"line_start":784,"line_end":784,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31176,"byte_end":31181,"line_start":797,"line_end":797,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"pub fn month(&Self) -> u32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31069,"byte_end":31114,"line_start":794,"line_end":794,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31119,"byte_end":31122,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31127,"byte_end":31168,"line_start":796,"line_end":796,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31309,"byte_end":31315,"line_start":802,"line_end":802,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"pub fn month0(&Self) -> u32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31202,"byte_end":31247,"line_start":799,"line_end":799,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31252,"byte_end":31255,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31260,"byte_end":31301,"line_start":801,"line_end":801,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31486,"byte_end":31489,"line_start":807,"line_end":807,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"pub fn day(&Self) -> u32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31336,"byte_end":31381,"line_start":804,"line_end":804,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31386,"byte_end":31389,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31394,"byte_end":31478,"line_start":806,"line_end":806,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31660,"byte_end":31664,"line_start":812,"line_end":812,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"pub fn day0(&Self) -> u32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31510,"byte_end":31555,"line_start":809,"line_end":809,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31560,"byte_end":31563,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31568,"byte_end":31652,"line_start":811,"line_end":811,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31833,"byte_end":31840,"line_start":817,"line_end":817,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"pub fn ordinal(&Self) -> u32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31685,"byte_end":31729,"line_start":814,"line_end":814,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31734,"byte_end":31737,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31742,"byte_end":31825,"line_start":816,"line_end":816,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32009,"byte_end":32017,"line_start":822,"line_end":822,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"pub fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31861,"byte_end":31905,"line_start":819,"line_end":819,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31910,"byte_end":31913,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":31918,"byte_end":32001,"line_start":821,"line_end":821,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32074,"byte_end":32081,"line_start":825,"line_end":825,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"pub fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32038,"byte_end":32066,"line_start":824,"line_end":824,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32139,"byte_end":32147,"line_start":828,"line_end":828,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"pub fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32106,"byte_end":32131,"line_start":827,"line_end":827,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32305,"byte_end":32314,"line_start":833,"line_end":833,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"pub fn with_year(&Self, i32) -> Option<Self>","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32172,"byte_end":32223,"line_start":830,"line_end":830,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32228,"byte_end":32231,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32236,"byte_end":32297,"line_start":832,"line_end":832,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32507,"byte_end":32517,"line_start":838,"line_end":838,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"pub fn with_month(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32355,"byte_end":32425,"line_start":835,"line_end":835,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32430,"byte_end":32433,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32438,"byte_end":32499,"line_start":837,"line_end":837,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32711,"byte_end":32722,"line_start":843,"line_end":843,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"pub fn with_month0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32559,"byte_end":32629,"line_start":840,"line_end":840,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32634,"byte_end":32637,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32642,"byte_end":32703,"line_start":842,"line_end":842,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32917,"byte_end":32925,"line_start":848,"line_end":848,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"pub fn with_day(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32765,"byte_end":32835,"line_start":845,"line_end":845,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32840,"byte_end":32843,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32848,"byte_end":32909,"line_start":847,"line_end":847,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33117,"byte_end":33126,"line_start":853,"line_end":853,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"pub fn with_day0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":32965,"byte_end":33035,"line_start":850,"line_end":850,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33040,"byte_end":33043,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33048,"byte_end":33109,"line_start":852,"line_end":852,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33318,"byte_end":33330,"line_start":858,"line_end":858,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"pub fn with_ordinal(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33167,"byte_end":33236,"line_start":855,"line_end":855,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33241,"byte_end":33244,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33249,"byte_end":33310,"line_start":857,"line_end":857,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33525,"byte_end":33538,"line_start":863,"line_end":863,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"pub fn with_ordinal0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33374,"byte_end":33443,"line_start":860,"line_end":860,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33448,"byte_end":33451,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33456,"byte_end":33517,"line_start":862,"line_end":862,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33685,"byte_end":33701,"line_start":866,"line_end":866,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"pub fn num_days_from_ce(&Self) -> i32","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.\n","sig":null,"attributes":[{"value":"/ Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":33583,"byte_end":33677,"line_start":865,"line_end":865,"column_start":5,"column_end":99}}]},{"kind":"Trait","id":{"krate":0,"index":1287},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34236,"byte_end":34244,"line_start":882,"line_end":882,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34176,"byte_end":34225,"line_start":881,"line_end":881,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34307,"byte_end":34311,"line_start":884,"line_end":884,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"pub fn hour(&Self) -> u32","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34258,"byte_end":34299,"line_start":883,"line_end":883,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34462,"byte_end":34468,"line_start":889,"line_end":889,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"pub fn hour12(&Self) -> (bool, u32)","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34332,"byte_end":34393,"line_start":886,"line_end":886,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34398,"byte_end":34440,"line_start":887,"line_end":887,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34445,"byte_end":34454,"line_start":888,"line_end":888,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34712,"byte_end":34718,"line_start":899,"line_end":899,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"pub fn minute(&Self) -> u32","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34661,"byte_end":34704,"line_start":898,"line_end":898,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34790,"byte_end":34796,"line_start":902,"line_end":902,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"pub fn second(&Self) -> u32","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34739,"byte_end":34782,"line_start":901,"line_end":901,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35039,"byte_end":35049,"line_start":907,"line_end":907,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"pub fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34817,"byte_end":34887,"line_start":904,"line_end":904,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34892,"byte_end":34952,"line_start":905,"line_end":905,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34957,"byte_end":35031,"line_start":906,"line_end":906,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35203,"byte_end":35212,"line_start":912,"line_end":912,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"pub fn with_hour(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35070,"byte_end":35121,"line_start":909,"line_end":909,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35126,"byte_end":35129,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35134,"byte_end":35195,"line_start":911,"line_end":911,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35388,"byte_end":35399,"line_start":917,"line_end":917,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"pub fn with_minute(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35253,"byte_end":35306,"line_start":914,"line_end":914,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35311,"byte_end":35314,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35319,"byte_end":35380,"line_start":916,"line_end":916,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35686,"byte_end":35697,"line_start":924,"line_end":924,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"pub fn with_second(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35439,"byte_end":35492,"line_start":919,"line_end":919,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35497,"byte_end":35500,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35505,"byte_end":35566,"line_start":921,"line_end":921,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35571,"byte_end":35623,"line_start":922,"line_end":922,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35628,"byte_end":35678,"line_start":923,"line_end":923,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":36030,"byte_end":36045,"line_start":931,"line_end":931,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"pub fn with_nanosecond(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35737,"byte_end":35816,"line_start":926,"line_end":926,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35821,"byte_end":35824,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35829,"byte_end":35890,"line_start":928,"line_end":928,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35895,"byte_end":35955,"line_start":929,"line_end":929,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":35960,"byte_end":36022,"line_start":930,"line_end":930,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":36174,"byte_end":36199,"line_start":935,"line_end":935,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"pub fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":36086,"byte_end":36152,"line_start":933,"line_end":933,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":36157,"byte_end":36166,"line_start":934,"line_end":934,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40422,"byte_end":40433,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41513,"byte_end":41524,"line_start":67,"line_end":67,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44716,"byte_end":44727,"line_start":141,"line_end":141,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55647,"byte_end":55650,"line_start":33,"line_end":33,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56061,"byte_end":56064,"line_start":45,"line_end":45,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56548,"byte_end":56551,"line_start":61,"line_end":61,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56635,"byte_end":56638,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56742,"byte_end":56745,"line_start":69,"line_end":69,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57604,"byte_end":57615,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":60144,"byte_end":60155,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":60707,"byte_end":60718,"line_start":115,"line_end":115,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":60787,"byte_end":60798,"line_start":119,"line_end":119,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":61292,"byte_end":61303,"line_start":133,"line_end":133,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62052,"byte_end":62061,"line_start":151,"line_end":151,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62249,"byte_end":62258,"line_start":160,"line_end":160,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62447,"byte_end":62460,"line_start":169,"line_end":169,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62656,"byte_end":62669,"line_start":178,"line_end":178,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62880,"byte_end":62888,"line_start":187,"line_end":187,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":63100,"byte_end":63108,"line_start":196,"line_end":196,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66987,"byte_end":66992,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":67302,"byte_end":67307,"line_start":95,"line_end":95,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":76576,"byte_end":76585,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":77362,"byte_end":77371,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":85764,"byte_end":85766,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":87800,"byte_end":87802,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":88346,"byte_end":88349,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":90222,"byte_end":90225,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108038,"byte_end":108047,"line_start":125,"line_end":125,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141603,"byte_end":141612,"line_start":963,"line_end":963,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":153944,"byte_end":153953,"line_start":1330,"line_end":1330,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":154172,"byte_end":154181,"line_start":1339,"line_end":1339,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":155592,"byte_end":155601,"line_start":1372,"line_end":1372,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":155820,"byte_end":155829,"line_start":1381,"line_end":1381,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":156776,"byte_end":156785,"line_start":1410,"line_end":1410,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":158040,"byte_end":158049,"line_start":1445,"line_end":1445,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":158639,"byte_end":158648,"line_start":1465,"line_end":1465,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187269,"byte_end":187276,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":189818,"byte_end":189825,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198534,"byte_end":198543,"line_start":180,"line_end":180,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222683,"byte_end":222692,"line_start":779,"line_end":779,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":229906,"byte_end":229915,"line_start":985,"line_end":985,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":232922,"byte_end":232931,"line_start":1050,"line_end":1050,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":233112,"byte_end":233121,"line_start":1059,"line_end":1059,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":235720,"byte_end":235729,"line_start":1120,"line_end":1120,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":235910,"byte_end":235919,"line_start":1129,"line_end":1129,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":237261,"byte_end":237270,"line_start":1164,"line_end":1164,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":239124,"byte_end":239133,"line_start":1214,"line_end":1214,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":239893,"byte_end":239902,"line_start":1237,"line_end":1237,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260587,"byte_end":260600,"line_start":56,"line_end":56,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284933,"byte_end":284946,"line_start":643,"line_end":643,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":296002,"byte_end":296015,"line_start":961,"line_end":961,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":302276,"byte_end":302289,"line_start":1134,"line_end":1134,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":304904,"byte_end":304917,"line_start":1196,"line_end":1196,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":305148,"byte_end":305161,"line_start":1205,"line_end":1205,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":307668,"byte_end":307681,"line_start":1266,"line_end":1266,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":307912,"byte_end":307925,"line_start":1275,"line_end":1275,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":309083,"byte_end":309096,"line_start":1309,"line_end":1309,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":310188,"byte_end":310201,"line_start":1340,"line_end":1340,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":310939,"byte_end":310952,"line_start":1362,"line_end":1362,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337499,"byte_end":337503,"line_start":52,"line_end":52,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345621,"byte_end":345625,"line_start":256,"line_end":256,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":346334,"byte_end":346338,"line_start":273,"line_end":273,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348029,"byte_end":348033,"line_start":321,"line_end":321,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348113,"byte_end":348117,"line_start":322,"line_end":322,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348222,"byte_end":348226,"line_start":324,"line_end":324,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348334,"byte_end":348338,"line_start":328,"line_end":328,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348382,"byte_end":348386,"line_start":331,"line_end":331,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348538,"byte_end":348542,"line_start":337,"line_end":337,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348665,"byte_end":348669,"line_start":341,"line_end":341,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348796,"byte_end":348800,"line_start":345,"line_end":345,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":349024,"byte_end":349028,"line_start":354,"line_end":354,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":349246,"byte_end":349250,"line_start":363,"line_end":363,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":349424,"byte_end":349428,"line_start":369,"line_end":369,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351656,"byte_end":351664,"line_start":61,"line_end":61,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357147,"byte_end":357155,"line_start":218,"line_end":218,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359470,"byte_end":359478,"line_start":267,"line_end":267,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":866},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363719,"byte_end":363727,"line_start":371,"line_end":371,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":365440,"byte_end":365448,"line_start":418,"line_end":418,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366424,"byte_end":366432,"line_start":446,"line_end":446,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366512,"byte_end":366520,"line_start":447,"line_end":447,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366629,"byte_end":366637,"line_start":449,"line_end":449,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366757,"byte_end":366765,"line_start":453,"line_end":453,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366809,"byte_end":366817,"line_start":456,"line_end":456,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366981,"byte_end":366989,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367124,"byte_end":367132,"line_start":466,"line_end":466,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367263,"byte_end":367271,"line_start":470,"line_end":470,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367507,"byte_end":367515,"line_start":479,"line_end":479,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367745,"byte_end":367753,"line_start":488,"line_end":488,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367927,"byte_end":367935,"line_start":494,"line_end":494,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":368123,"byte_end":368131,"line_start":500,"line_end":500,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":945},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":369331,"byte_end":369339,"line_start":527,"line_end":527,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":949},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":369539,"byte_end":369547,"line_start":535,"line_end":535,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":369757,"byte_end":369765,"line_start":543,"line_end":543,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":370376,"byte_end":370384,"line_start":561,"line_end":561,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":370548,"byte_end":370558,"line_start":567,"line_end":567,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404633,"byte_end":404648,"line_start":119,"line_end":119,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404738,"byte_end":404753,"line_start":125,"line_end":125,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404859,"byte_end":404874,"line_start":131,"line_end":131,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404900,"byte_end":404915,"line_start":134,"line_end":134,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408365,"byte_end":408378,"line_start":220,"line_end":220,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408468,"byte_end":408481,"line_start":226,"line_end":226,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408585,"byte_end":408598,"line_start":232,"line_end":232,"column_start":13,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408624,"byte_end":408637,"line_start":235,"line_end":235,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":411510,"byte_end":411520,"line_start":308,"line_end":308,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":411640,"byte_end":411650,"line_start":314,"line_end":314,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":430609,"byte_end":430615,"line_start":124,"line_end":124,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431111,"byte_end":431117,"line_start":137,"line_end":137,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534587,"byte_end":534600,"line_start":162,"line_end":162,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534875,"byte_end":534888,"line_start":170,"line_end":170,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424096,"byte_end":424109,"line_start":556,"line_end":556,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424877,"byte_end":424890,"line_start":571,"line_end":571,"column_start":63,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":425779,"byte_end":425786,"line_start":603,"line_end":603,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1239},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":549156,"byte_end":549157,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22251,"byte_end":22258,"line_start":512,"line_end":512,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":26514,"byte_end":26521,"line_start":625,"line_end":625,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":27459,"byte_end":27476,"line_start":663,"line_end":663,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":20024,"byte_end":20030,"line_start":435,"line_end":435,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":58}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":21185,"byte_end":21191,"line_start":472,"line_end":472,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":964}},{"kind":"Mod","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":423524,"byte_end":423532,"line_start":540,"line_end":540,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1207}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":40422,"byte_end":40433,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":41513,"byte_end":41524,"line_start":67,"line_end":67,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":44716,"byte_end":44727,"line_start":141,"line_end":141,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45188,"byte_end":45193,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":91}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45196,"byte_end":45201,"line_start":155,"line_end":155,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1732},"to":{"krate":0,"index":91}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45209,"byte_end":45214,"line_start":155,"line_end":155,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":6555},"to":{"krate":0,"index":91}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45504,"byte_end":45509,"line_start":164,"line_end":164,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/mod.rs","byte_start":45512,"byte_end":45517,"line_start":164,"line_end":164,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1732},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":55647,"byte_end":55650,"line_start":33,"line_end":33,"column_start":6,"column_end":9},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56061,"byte_end":56064,"line_start":45,"line_end":45,"column_start":19,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1321},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56548,"byte_end":56551,"line_start":61,"line_end":61,"column_start":17,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1321},"to":{"krate":0,"index":91}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56635,"byte_end":56638,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1321},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/utc.rs","byte_start":56742,"byte_end":56745,"line_start":69,"line_end":69,"column_start":23,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1321},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":57604,"byte_end":57615,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":60144,"byte_end":60155,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1332},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":60707,"byte_end":60718,"line_start":115,"line_end":115,"column_start":17,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1332},"to":{"krate":0,"index":91}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":60787,"byte_end":60798,"line_start":119,"line_end":119,"column_start":21,"column_end":32},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1332},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":61292,"byte_end":61303,"line_start":133,"line_end":133,"column_start":23,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1332},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62052,"byte_end":62061,"line_start":151,"line_end":151,"column_start":27,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62249,"byte_end":62258,"line_start":160,"line_end":160,"column_start":27,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62447,"byte_end":62460,"line_start":169,"line_end":169,"column_start":27,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62656,"byte_end":62669,"line_start":178,"line_end":178,"column_start":27,"column_end":40},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":62880,"byte_end":62888,"line_start":187,"line_end":187,"column_start":41,"column_end":49},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/fixed.rs","byte_start":63100,"byte_end":63108,"line_start":196,"line_end":196,"column_start":41,"column_end":49},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":66987,"byte_end":66992,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/offset/local.rs","byte_start":67302,"byte_end":67307,"line_start":95,"line_end":95,"column_start":19,"column_end":24},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1344},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":76576,"byte_end":76585,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":77362,"byte_end":77371,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1351},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":85764,"byte_end":85766,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":87800,"byte_end":87802,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1364},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":88346,"byte_end":88349,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/internals.rs","byte_start":90222,"byte_end":90225,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1380},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":108038,"byte_end":108047,"line_start":125,"line_end":125,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":141603,"byte_end":141612,"line_start":963,"line_end":963,"column_start":19,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1396},"to":{"krate":0,"index":1268}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":153944,"byte_end":153953,"line_start":1330,"line_end":1330,"column_start":27,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":154172,"byte_end":154181,"line_start":1339,"line_end":1339,"column_start":33,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":2130}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":155592,"byte_end":155601,"line_start":1372,"line_end":1372,"column_start":27,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":155820,"byte_end":155829,"line_start":1381,"line_end":1381,"column_start":33,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":2134}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":156776,"byte_end":156785,"line_start":1410,"line_end":1410,"column_start":21,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":158040,"byte_end":158049,"line_start":1445,"line_end":1445,"column_start":23,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/date.rs","byte_start":158639,"byte_end":158648,"line_start":1465,"line_end":1465,"column_start":23,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":8492}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":187269,"byte_end":187276,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/isoweek.rs","byte_start":189818,"byte_end":189825,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1419},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":198534,"byte_end":198543,"line_start":180,"line_end":180,"column_start":6,"column_end":15},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":222683,"byte_end":222692,"line_start":779,"line_end":779,"column_start":19,"column_end":28},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":1287}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":229906,"byte_end":229915,"line_start":985,"line_end":985,"column_start":21,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":6743}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":232922,"byte_end":232931,"line_start":1050,"line_end":1050,"column_start":27,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":233112,"byte_end":233121,"line_start":1059,"line_end":1059,"column_start":33,"column_end":42},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":2130}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":235720,"byte_end":235729,"line_start":1120,"line_end":1120,"column_start":27,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":235910,"byte_end":235919,"line_start":1129,"line_end":1129,"column_start":33,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":2134}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":237261,"byte_end":237270,"line_start":1164,"line_end":1164,"column_start":21,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":239124,"byte_end":239133,"line_start":1214,"line_end":1214,"column_start":23,"column_end":32},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/time.rs","byte_start":239893,"byte_end":239902,"line_start":1237,"line_end":1237,"column_start":23,"column_end":32},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1439},"to":{"krate":2,"index":8492}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":260587,"byte_end":260600,"line_start":56,"line_end":56,"column_start":6,"column_end":19},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":284933,"byte_end":284946,"line_start":643,"line_end":643,"column_start":19,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1464},"to":{"krate":0,"index":1268}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":296002,"byte_end":296015,"line_start":961,"line_end":961,"column_start":19,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1464},"to":{"krate":0,"index":1287}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":302276,"byte_end":302289,"line_start":1134,"line_end":1134,"column_start":21,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":6743}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":304904,"byte_end":304917,"line_start":1196,"line_end":1196,"column_start":27,"column_end":40},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":305148,"byte_end":305161,"line_start":1205,"line_end":1205,"column_start":33,"column_end":46},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":2130}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":307668,"byte_end":307681,"line_start":1266,"line_end":1266,"column_start":27,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":307912,"byte_end":307925,"line_start":1275,"line_end":1275,"column_start":33,"column_end":46},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":2134}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":309083,"byte_end":309096,"line_start":1309,"line_end":1309,"column_start":21,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":310188,"byte_end":310201,"line_start":1340,"line_end":1340,"column_start":23,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/naive/datetime.rs","byte_start":310939,"byte_end":310952,"line_start":1362,"line_end":1362,"column_start":23,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":8492}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":337499,"byte_end":337503,"line_start":52,"line_end":52,"column_start":20,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":345621,"byte_end":345625,"line_start":256,"line_end":256,"column_start":20,"column_end":24},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":346334,"byte_end":346338,"line_start":273,"line_end":273,"column_start":33,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1489},"to":{"krate":0,"index":1268}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348029,"byte_end":348033,"line_start":321,"line_end":321,"column_start":29,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348113,"byte_end":348117,"line_start":322,"line_end":322,"column_start":36,"column_end":40},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348222,"byte_end":348226,"line_start":324,"line_end":324,"column_start":60,"column_end":64},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348334,"byte_end":348338,"line_start":328,"line_end":328,"column_start":27,"column_end":31},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":1765}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348382,"byte_end":348386,"line_start":331,"line_end":331,"column_start":35,"column_end":39},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":1797}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348538,"byte_end":348542,"line_start":337,"line_end":337,"column_start":28,"column_end":32},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":1786}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348665,"byte_end":348669,"line_start":341,"line_end":341,"column_start":35,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":6743}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":348796,"byte_end":348800,"line_start":345,"line_end":345,"column_start":41,"column_end":45},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":349024,"byte_end":349028,"line_start":354,"line_end":354,"column_start":41,"column_end":45},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":349246,"byte_end":349250,"line_start":363,"line_end":363,"column_start":35,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/date.rs","byte_start":349424,"byte_end":349428,"line_start":369,"line_end":369,"column_start":37,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":351656,"byte_end":351664,"line_start":61,"line_end":61,"column_start":20,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":357147,"byte_end":357155,"line_start":218,"line_end":218,"column_start":6,"column_end":14},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":359470,"byte_end":359478,"line_start":267,"line_end":267,"column_start":20,"column_end":28},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":363719,"byte_end":363727,"line_start":371,"line_end":371,"column_start":33,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1520},"to":{"krate":0,"index":1268}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":365440,"byte_end":365448,"line_start":418,"line_end":418,"column_start":33,"column_end":41},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1520},"to":{"krate":0,"index":1287}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366424,"byte_end":366432,"line_start":446,"line_end":446,"column_start":29,"column_end":37},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366512,"byte_end":366520,"line_start":447,"line_end":447,"column_start":36,"column_end":44},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366629,"byte_end":366637,"line_start":449,"line_end":449,"column_start":64,"column_end":72},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366757,"byte_end":366765,"line_start":453,"line_end":453,"column_start":27,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":1765}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366809,"byte_end":366817,"line_start":456,"line_end":456,"column_start":35,"column_end":43},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":1797}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":366981,"byte_end":366989,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":1786}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367124,"byte_end":367132,"line_start":466,"line_end":466,"column_start":35,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":6743}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367263,"byte_end":367271,"line_start":470,"line_end":470,"column_start":41,"column_end":49},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367507,"byte_end":367515,"line_start":479,"line_end":479,"column_start":41,"column_end":49},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2104}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367745,"byte_end":367753,"line_start":488,"line_end":488,"column_start":35,"column_end":43},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":367927,"byte_end":367935,"line_start":494,"line_end":494,"column_start":37,"column_end":45},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":368123,"byte_end":368131,"line_start":500,"line_end":500,"column_start":23,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":8492}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":369331,"byte_end":369339,"line_start":527,"line_end":527,"column_start":23,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":8492}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":369539,"byte_end":369547,"line_start":535,"line_end":535,"column_start":23,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":8492}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":369757,"byte_end":369765,"line_start":543,"line_end":543,"column_start":27,"column_end":35},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":370376,"byte_end":370384,"line_start":561,"line_end":561,"column_start":27,"column_end":35},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/datetime.rs","byte_start":370548,"byte_end":370558,"line_start":567,"line_end":567,"column_start":43,"column_end":53},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":8190},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404633,"byte_end":404648,"line_start":119,"line_end":119,"column_start":16,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":985},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404738,"byte_end":404753,"line_start":125,"line_end":125,"column_start":20,"column_end":35},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":985},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404859,"byte_end":404874,"line_start":131,"line_end":131,"column_start":13,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":985},"to":{"krate":2,"index":1765}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":404900,"byte_end":404915,"line_start":134,"line_end":134,"column_start":21,"column_end":36},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":985},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408365,"byte_end":408378,"line_start":220,"line_end":220,"column_start":16,"column_end":29},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":1732}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408468,"byte_end":408481,"line_start":226,"line_end":226,"column_start":20,"column_end":33},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":1760}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408585,"byte_end":408598,"line_start":232,"line_end":232,"column_start":13,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":1765}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":408624,"byte_end":408637,"line_start":235,"line_end":235,"column_start":21,"column_end":34},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":994},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":411510,"byte_end":411520,"line_start":308,"line_end":308,"column_start":23,"column_end":33},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1698},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":411640,"byte_end":411650,"line_start":314,"line_end":314,"column_start":16,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1698},"to":{"krate":1,"index":1720}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":430609,"byte_end":430615,"line_start":124,"line_end":124,"column_start":18,"column_end":24},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1739},"to":{"krate":2,"index":2022}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/parsed.rs","byte_start":431111,"byte_end":431117,"line_start":137,"line_end":137,"column_start":6,"column_end":12},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1739},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534587,"byte_end":534600,"line_start":162,"line_end":162,"column_start":10,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/strftime.rs","byte_start":534875,"byte_end":534888,"line_start":170,"line_end":170,"column_start":23,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1772},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424096,"byte_end":424109,"line_start":556,"line_end":556,"column_start":46,"column_end":59},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":424877,"byte_end":424890,"line_start":571,"line_end":571,"column_start":63,"column_end":76},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1791},"to":{"krate":2,"index":6560}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/format/mod.rs","byte_start":425779,"byte_end":425786,"line_start":603,"line_end":603,"column_start":18,"column_end":25},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1800},"to":{"krate":2,"index":8492}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/round.rs","byte_start":549156,"byte_end":549157,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1251},"to":{"krate":0,"index":1247}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":22251,"byte_end":22258,"line_start":512,"line_end":512,"column_start":6,"column_end":13},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":26514,"byte_end":26521,"line_start":625,"line_end":625,"column_start":36,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1800},"to":{"krate":19,"index":317}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":27459,"byte_end":27476,"line_start":663,"line_end":663,"column_start":21,"column_end":38},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1836},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":30545,"byte_end":30550,"line_start":778,"line_end":778,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":1268}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.1/src/lib.rs","byte_start":34246,"byte_end":34251,"line_start":882,"line_end":882,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":1287}}]}