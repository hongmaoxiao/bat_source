{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0","program":"/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","textwrap","/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"term_size\"","-C","metadata=49bb2c24ea051c8b","-C","extra-filename=-49bb2c24ea051c8b","--out-dir","/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","-L","dependency=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps","--extern","term_size=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libterm_size-6a9109ea561850f0.rmeta","--extern","unicode_width=/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libunicode_width-6ebbaf0fd48de3dc.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/xhm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/xhm/source/backend/rust/bat/target/rls/debug/deps/libtextwrap-49bb2c24ea051c8b.rmeta"},"prelude":{"crate_id":{"name":"textwrap","disambiguator":[9327959701230310635,123688998032867872]},"crate_root":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src","external_crates":[{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17709530074661319104,12336107577347767734]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7138156953393190069,11167026927698897809]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11939350525270529775,5037047709352975340]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7424844044863599670,8838585625468081887]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4100565041195182675,5566087110101365955]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12006298212829472042,4483643569962591785]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16083605182766867675,18153965418074129170]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13622714777497736699,12208407265214949534]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7290380455030431949,16719885876051447607]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[447808001145654106,10581376888684971677]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13533970680996139336,18250961867226035502]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[212669238320550075,14725093603103672492]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[17611450619260455171,13049759995292817799]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[2915321326152136006,11103866167427651478]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16327418871979137000,16753155218778980611]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":16,"id":{"name":"unicode_width","disambiguator":[12976626391032391823,16052417893462105445]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":17,"id":{"name":"term_size","disambiguator":[16821999925108955986,3774811163787982368]}},{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","num":18,"id":{"name":"libc","disambiguator":[8000104344433599533,15219794654319678357]}}],"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":0,"byte_end":40652,"line_start":1,"line_end":1216,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":0,"byte_end":40652,"line_start":1,"line_end":1216,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":87},{"krate":0,"index":14},{"krate":0,"index":91},{"krate":0,"index":95},{"krate":0,"index":93},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":97},{"krate":0,"index":109},{"krate":0,"index":105},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":38},{"krate":0,"index":122},{"krate":0,"index":128},{"krate":0,"index":43},{"krate":0,"index":49},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":80}],"decl_id":null,"docs":" `textwrap` provides functions for word wrapping and filling text.","sig":null,"attributes":[{"value":"/ `textwrap` provides functions for word wrapping and filling text.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":0,"byte_end":69,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":70,"byte_end":73,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Wrapping text can be very useful in commandline programs where you","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":74,"byte_end":144,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ want to format dynamic output nicely so it looks good in a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":145,"byte_end":207,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ terminal. A quick example:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":208,"byte_end":238,"line_start":5,"line_end":5,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":239,"byte_end":242,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":243,"byte_end":256,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/ extern crate textwrap;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":257,"byte_end":283,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"/ use textwrap::fill;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":284,"byte_end":307,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":308,"byte_end":311,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":312,"byte_end":327,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/    let text = \"textwrap: a small library for wrapping text.\";","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":328,"byte_end":393,"line_start":12,"line_end":12,"column_start":1,"column_end":66}},{"value":"/    println!(\"{}\", fill(text, 18));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":394,"byte_end":432,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":433,"byte_end":438,"line_start":14,"line_end":14,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":439,"byte_end":446,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":447,"byte_end":450,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This will display the following output:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":451,"byte_end":494,"line_start":17,"line_end":17,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":495,"byte_end":498,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":499,"byte_end":510,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"/ textwrap: a small","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":511,"byte_end":532,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"/ library for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":533,"byte_end":548,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ wrapping text.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":549,"byte_end":567,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":568,"byte_end":575,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":576,"byte_end":579,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Displayed Width vs Byte Size","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":580,"byte_end":614,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":615,"byte_end":618,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ To word wrap text, one must know the width of each word so one can","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":619,"byte_end":689,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ know when to break lines. This library measures the width of text","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":690,"byte_end":759,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ using the [displayed width][unicode-width], not the size in bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":760,"byte_end":830,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":831,"byte_end":834,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This is important for non-ASCII text. ASCII characters such as `a`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":835,"byte_end":905,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ and `!` are simple and take up one column each. This means that","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":906,"byte_end":973,"line_start":32,"line_end":32,"column_start":1,"column_end":68}},{"value":"/ the displayed width is equal to the string length in bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":974,"byte_end":1037,"line_start":33,"line_end":33,"column_start":1,"column_end":64}},{"value":"/ However, non-ASCII characters and symbols take up more than one","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1038,"byte_end":1105,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ byte when UTF-8 encoded: `é` is `0xc3 0xa9` (two bytes) and `⚙` is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1106,"byte_end":1179,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"/ `0xe2 0x9a 0x99` (three bytes) in UTF-8, respectively.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1180,"byte_end":1238,"line_start":36,"line_end":36,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1239,"byte_end":1242,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This is why we take care to use the displayed width instead of the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1243,"byte_end":1313,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/ byte count when computing line lengths. All functions in this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1314,"byte_end":1379,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/ library handle Unicode characters like this.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1380,"byte_end":1428,"line_start":40,"line_end":40,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1429,"byte_end":1432,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ [unicode-width]: https://docs.rs/unicode-width/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1433,"byte_end":1484,"line_start":42,"line_end":42,"column_start":1,"column_end":52}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1544,"byte_end":1566,"line_start":45,"line_end":45,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":1567,"byte_end":1606,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":11},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2862,"byte_end":2874,"line_start":83,"line_end":83,"column_start":11,"column_end":23},"name":"WordSplitter","qualname":"::WordSplitter","value":"WordSplitter","parent":null,"children":[{"krate":0,"index":12}],"decl_id":null,"docs":" An interface for splitting words.","sig":null,"attributes":[{"value":"/ An interface for splitting words.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2015,"byte_end":2052,"line_start":66,"line_end":66,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2053,"byte_end":2056,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ When the [`wrap_iter`] method will try to fit text into a line, it","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2057,"byte_end":2127,"line_start":68,"line_end":68,"column_start":1,"column_end":71}},{"value":"/ will eventually find a word that it too large the current text","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2128,"byte_end":2194,"line_start":69,"line_end":69,"column_start":1,"column_end":67}},{"value":"/ width. It will then call the currently configured `WordSplitter` to","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2195,"byte_end":2266,"line_start":70,"line_end":70,"column_start":1,"column_end":72}},{"value":"/ have it attempt to split the word into smaller parts. This trait","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2267,"byte_end":2335,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/ describes that functionality via the [`split`] method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2336,"byte_end":2394,"line_start":72,"line_end":72,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2395,"byte_end":2398,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ If the `textwrap` crate has been compiled with the `hyphenation`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2399,"byte_end":2467,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/ feature enabled, you will find an implementation of `WordSplitter`","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2468,"byte_end":2538,"line_start":75,"line_end":75,"column_start":1,"column_end":71}},{"value":"/ by the `hyphenation::language::Corpus` struct. Use this struct for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2539,"byte_end":2609,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ language-aware hyphenation. See the [`hyphenation` documentation]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2610,"byte_end":2679,"line_start":77,"line_end":77,"column_start":1,"column_end":70}},{"value":"/ for details.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2680,"byte_end":2696,"line_start":78,"line_end":78,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2697,"byte_end":2700,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: struct.Wrapper.html#method.wrap_iter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2701,"byte_end":2756,"line_start":80,"line_end":80,"column_start":1,"column_end":56}},{"value":"/ [`split`]: #tymethod.split","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2757,"byte_end":2787,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/ [`hyphenation` documentation]: https://docs.rs/hyphenation/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2788,"byte_end":2851,"line_start":82,"line_end":82,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3464,"byte_end":3469,"line_start":99,"line_end":99,"column_start":8,"column_end":13},"name":"split","qualname":"::WordSplitter::split","value":"pub fn split<'w>(&Self, &'w str) -> Vec<(&'w str, &'w str, &'w str)>","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":" Return all possible splits of word. Each split is a triple\n with a head, a hyphen, and a tail where `head + &hyphen +\n &tail == word`. The hyphen can be empty if there is already a\n hyphen in the head.","sig":null,"attributes":[{"value":"/ Return all possible splits of word. Each split is a triple","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2881,"byte_end":2943,"line_start":84,"line_end":84,"column_start":5,"column_end":67}},{"value":"/ with a head, a hyphen, and a tail where `head + &hyphen +","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":2948,"byte_end":3009,"line_start":85,"line_end":85,"column_start":5,"column_end":66}},{"value":"/ &tail == word`. The hyphen can be empty if there is already a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3014,"byte_end":3079,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ hyphen in the head.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3084,"byte_end":3107,"line_start":87,"line_end":87,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3112,"byte_end":3115,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ The splits should go from smallest to longest and should","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3120,"byte_end":3180,"line_start":89,"line_end":89,"column_start":5,"column_end":65}},{"value":"/ include no split at all. So the word \"technology\" could be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3185,"byte_end":3247,"line_start":90,"line_end":90,"column_start":5,"column_end":67}},{"value":"/ split into","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3252,"byte_end":3266,"line_start":91,"line_end":91,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3271,"byte_end":3274,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3279,"byte_end":3292,"line_start":93,"line_end":93,"column_start":5,"column_end":18}},{"value":"/ vec![(\"tech\", \"-\", \"nology\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3297,"byte_end":3330,"line_start":94,"line_end":94,"column_start":5,"column_end":38}},{"value":"/      (\"technol\", \"-\", \"ogy\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3335,"byte_end":3368,"line_start":95,"line_end":95,"column_start":5,"column_end":38}},{"value":"/      (\"technolo\", \"-\", \"gy\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3373,"byte_end":3406,"line_start":96,"line_end":96,"column_start":5,"column_end":38}},{"value":"/      (\"technology\", \"\", \"\")];","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3411,"byte_end":3444,"line_start":97,"line_end":97,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3449,"byte_end":3456,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3916,"byte_end":3929,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"NoHyphenation","qualname":"::NoHyphenation","value":"","parent":null,"children":[],"decl_id":null,"docs":" Use this as a [`Wrapper.splitter`] to avoid any kind of\n hyphenation:","sig":null,"attributes":[{"value":"/ Use this as a [`Wrapper.splitter`] to avoid any kind of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3536,"byte_end":3595,"line_start":102,"line_end":102,"column_start":1,"column_end":60}},{"value":"/ hyphenation:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3596,"byte_end":3612,"line_start":103,"line_end":103,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3613,"byte_end":3616,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3617,"byte_end":3624,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ use textwrap::{Wrapper, NoHyphenation};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3625,"byte_end":3668,"line_start":106,"line_end":106,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3669,"byte_end":3672,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ let wrapper = Wrapper::with_splitter(8, NoHyphenation);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3673,"byte_end":3732,"line_start":108,"line_end":108,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(wrapper.wrap(\"foo bar-baz\"), vec![\"foo\", \"bar-baz\"]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3733,"byte_end":3801,"line_start":109,"line_end":109,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3802,"byte_end":3809,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3810,"byte_end":3813,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ [`Wrapper.splitter`]: struct.Wrapper.html#structfield.splitter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":3814,"byte_end":3880,"line_start":112,"line_end":112,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4394,"byte_end":4408,"line_start":130,"line_end":130,"column_start":12,"column_end":26},"name":"HyphenSplitter","qualname":"::HyphenSplitter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple and default way to split words: splitting on existing\n hyphens only.","sig":null,"attributes":[{"value":"/ Simple and default way to split words: splitting on existing","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4169,"byte_end":4233,"line_start":124,"line_end":124,"column_start":1,"column_end":65}},{"value":"/ hyphens only.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4234,"byte_end":4251,"line_start":125,"line_end":125,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4252,"byte_end":4255,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ You probably don't need to use this type since it's already used","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4256,"byte_end":4324,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/ by default by `Wrapper::new`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4325,"byte_end":4358,"line_start":128,"line_end":128,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7842,"byte_end":7849,"line_start":227,"line_end":227,"column_start":12,"column_end":19},"name":"Wrapper","qualname":"::Wrapper","value":"Wrapper { width, initial_indent, subsequent_indent, break_words, splitter }","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" A Wrapper holds settings for wrapping and filling text. Use it\n when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions\n are not flexible enough.","sig":null,"attributes":[{"value":"/ A Wrapper holds settings for wrapping and filling text. Use it","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7215,"byte_end":7281,"line_start":213,"line_end":213,"column_start":1,"column_end":67}},{"value":"/ when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7282,"byte_end":7353,"line_start":214,"line_end":214,"column_start":1,"column_end":72}},{"value":"/ are not flexible enough.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7354,"byte_end":7382,"line_start":215,"line_end":215,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7383,"byte_end":7386,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7387,"byte_end":7423,"line_start":217,"line_end":217,"column_start":1,"column_end":37}},{"value":"/ [`wrap`]: fn.wrap.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7424,"byte_end":7450,"line_start":218,"line_end":218,"column_start":1,"column_end":27}},{"value":"/ [`fill`]: fn.fill.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7451,"byte_end":7477,"line_start":219,"line_end":219,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7478,"byte_end":7481,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ The algorithm used by the `WrapIter` iterator (returned from the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7482,"byte_end":7550,"line_start":221,"line_end":221,"column_start":1,"column_end":69}},{"value":"/ `wrap_iter` method)  works by doing successive partial scans over","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7551,"byte_end":7620,"line_start":222,"line_end":222,"column_start":1,"column_end":70}},{"value":"/ words in the input string (where each single scan yields a single","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7621,"byte_end":7690,"line_start":223,"line_end":223,"column_start":1,"column_end":70}},{"value":"/ line) so that the overall time and memory complexity is O(*n*) where","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7691,"byte_end":7763,"line_start":224,"line_end":224,"column_start":1,"column_end":73}},{"value":"/ *n* is the length of the input string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7764,"byte_end":7806,"line_start":225,"line_end":225,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":100},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7945,"byte_end":7950,"line_start":229,"line_end":229,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrapper::width","value":"usize","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The width in columns at which the text will be wrapped.\n","sig":null,"attributes":[{"value":"/ The width in columns at which the text will be wrapped.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7877,"byte_end":7936,"line_start":228,"line_end":228,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":101},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8022,"byte_end":8036,"line_start":231,"line_end":231,"column_start":9,"column_end":23},"name":"initial_indent","qualname":"::Wrapper::initial_indent","value":"&'a str","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Indentation used for the first line of output.\n","sig":null,"attributes":[{"value":"/ Indentation used for the first line of output.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":7963,"byte_end":8013,"line_start":230,"line_end":230,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":102},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8112,"byte_end":8129,"line_start":233,"line_end":233,"column_start":9,"column_end":26},"name":"subsequent_indent","qualname":"::Wrapper::subsequent_indent","value":"&'a str","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Indentation used for subsequent lines of output.\n","sig":null,"attributes":[{"value":"/ Indentation used for subsequent lines of output.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8051,"byte_end":8103,"line_start":232,"line_end":232,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":103},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8297,"byte_end":8308,"line_start":237,"line_end":237,"column_start":9,"column_end":20},"name":"break_words","qualname":"::Wrapper::break_words","value":"bool","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Allow long words to be broken if they cannot fit on a line.\n When set to `false`, some lines may be longer than\n `self.width`.\n","sig":null,"attributes":[{"value":"/ Allow long words to be broken if they cannot fit on a line.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8144,"byte_end":8207,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/ When set to `false`, some lines may be longer than","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8212,"byte_end":8266,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/ `self.width`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8271,"byte_end":8288,"line_start":236,"line_end":236,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":104},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8507,"byte_end":8515,"line_start":241,"line_end":241,"column_start":9,"column_end":17},"name":"splitter","qualname":"::Wrapper::splitter","value":"S","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The method for splitting words. If the `hyphenation` feature\n is enabled, you can use a `hyphenation::language::Corpus` here\n to get language-aware hyphenation.\n","sig":null,"attributes":[{"value":"/ The method for splitting words. If the `hyphenation` feature","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8320,"byte_end":8384,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ is enabled, you can use a `hyphenation::language::Corpus` here","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8389,"byte_end":8455,"line_start":239,"line_end":239,"column_start":5,"column_end":71}},{"value":"/ to get language-aware hyphenation.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8460,"byte_end":8498,"line_start":240,"line_end":240,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8953,"byte_end":8956,"line_start":252,"line_end":252,"column_start":12,"column_end":15},"name":"new","qualname":"<Wrapper>::new","value":"pub fn new(usize) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Create a new Wrapper for wrapping at the specified width. By\n default, we allow words longer than `width` to be broken. A\n [`HyphenSplitter`] will be used by default for splitting\n words. See the [`WordSplitter`] trait for other options.","sig":null,"attributes":[{"value":"/ Create a new Wrapper for wrapping at the specified width. By","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8566,"byte_end":8630,"line_start":245,"line_end":245,"column_start":5,"column_end":69}},{"value":"/ default, we allow words longer than `width` to be broken. A","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8635,"byte_end":8698,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/ [`HyphenSplitter`] will be used by default for splitting","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8703,"byte_end":8763,"line_start":247,"line_end":247,"column_start":5,"column_end":65}},{"value":"/ words. See the [`WordSplitter`] trait for other options.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8768,"byte_end":8828,"line_start":248,"line_end":248,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8833,"byte_end":8836,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ [`HyphenSplitter`]: struct.HyphenSplitter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8841,"byte_end":8891,"line_start":250,"line_end":250,"column_start":5,"column_end":55}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8896,"byte_end":8941,"line_start":251,"line_end":251,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9648,"byte_end":9662,"line_start":271,"line_end":271,"column_start":12,"column_end":26},"name":"with_termwidth","qualname":"<Wrapper>::with_termwidth","value":"pub fn with_termwidth() -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Create a new Wrapper for wrapping text at the current terminal\n width. If the terminal width cannot be determined (typically\n because the standard input and output is not connected to a\n terminal), a width of 80 characters will be used. Other\n settings use the same defaults as `Wrapper::new`.","sig":null,"attributes":[{"value":"/ Create a new Wrapper for wrapping text at the current terminal","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9069,"byte_end":9135,"line_start":256,"line_end":256,"column_start":5,"column_end":71}},{"value":"/ width. If the terminal width cannot be determined (typically","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9140,"byte_end":9204,"line_start":257,"line_end":257,"column_start":5,"column_end":69}},{"value":"/ because the standard input and output is not connected to a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9209,"byte_end":9272,"line_start":258,"line_end":258,"column_start":5,"column_end":68}},{"value":"/ terminal), a width of 80 characters will be used. Other","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9277,"byte_end":9336,"line_start":259,"line_end":259,"column_start":5,"column_end":64}},{"value":"/ settings use the same defaults as `Wrapper::new`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9341,"byte_end":9394,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9399,"byte_end":9402,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Equivalent to:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9407,"byte_end":9425,"line_start":262,"line_end":262,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9430,"byte_end":9433,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9438,"byte_end":9451,"line_start":264,"line_end":264,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9456,"byte_end":9489,"line_start":265,"line_end":265,"column_start":5,"column_end":38}},{"value":"/ use textwrap::{Wrapper, termwidth};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9494,"byte_end":9533,"line_start":266,"line_end":266,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9538,"byte_end":9541,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(termwidth());","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9546,"byte_end":9590,"line_start":268,"line_end":268,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9595,"byte_end":9602,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"term_size\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9607,"byte_end":9636,"line_start":270,"line_end":270,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10038,"byte_end":10051,"line_start":282,"line_end":282,"column_start":12,"column_end":25},"name":"with_splitter","qualname":"<Wrapper>::with_splitter","value":"pub fn with_splitter(usize, S) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Use the given [`WordSplitter`] to create a new Wrapper for\n wrapping at the specified width. By default, we allow words\n longer than `width` to be broken.","sig":null,"attributes":[{"value":"/ Use the given [`WordSplitter`] to create a new Wrapper for","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9796,"byte_end":9858,"line_start":277,"line_end":277,"column_start":5,"column_end":67}},{"value":"/ wrapping at the specified width. By default, we allow words","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9863,"byte_end":9926,"line_start":278,"line_end":278,"column_start":5,"column_end":68}},{"value":"/ longer than `width` to be broken.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9931,"byte_end":9968,"line_start":279,"line_end":279,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9973,"byte_end":9976,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9981,"byte_end":10026,"line_start":281,"line_end":281,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10835,"byte_end":10849,"line_start":308,"line_end":308,"column_start":12,"column_end":26},"name":"initial_indent","qualname":"<Wrapper>::initial_indent","value":"pub fn initial_indent(Self, &'a str) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.initial_indent`]. The initial indentation is\n used on the very first line of output.","sig":null,"attributes":[{"value":"/ Change [`self.initial_indent`]. The initial indentation is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10294,"byte_end":10356,"line_start":292,"line_end":292,"column_start":5,"column_end":67}},{"value":"/ used on the very first line of output.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10361,"byte_end":10403,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10408,"byte_end":10411,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10416,"byte_end":10430,"line_start":295,"line_end":295,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10435,"byte_end":10438,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Classic paragraph indentation can be achieved by specifying an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10443,"byte_end":10509,"line_start":297,"line_end":297,"column_start":5,"column_end":71}},{"value":"/ initial indentation and wrapping each paragraph by itself:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10514,"byte_end":10576,"line_start":298,"line_end":298,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10581,"byte_end":10584,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10589,"byte_end":10602,"line_start":300,"line_end":300,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10607,"byte_end":10640,"line_start":301,"line_end":301,"column_start":5,"column_end":38}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10645,"byte_end":10671,"line_start":302,"line_end":302,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10676,"byte_end":10679,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(15).initial_indent(\"    \");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10684,"byte_end":10742,"line_start":304,"line_end":304,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10747,"byte_end":10754,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10759,"byte_end":10762,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ [`self.initial_indent`]: #structfield.initial_indent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10767,"byte_end":10823,"line_start":307,"line_end":307,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11543,"byte_end":11560,"line_start":330,"line_end":330,"column_start":12,"column_end":29},"name":"subsequent_indent","qualname":"<Wrapper>::subsequent_indent","value":"pub fn subsequent_indent(Self, &'a str) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.subsequent_indent`]. The subsequent indentation\n is used on lines following the first line of output.","sig":null,"attributes":[{"value":"/ Change [`self.subsequent_indent`]. The subsequent indentation","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":10955,"byte_end":11020,"line_start":312,"line_end":312,"column_start":5,"column_end":70}},{"value":"/ is used on lines following the first line of output.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11025,"byte_end":11081,"line_start":313,"line_end":313,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11086,"byte_end":11089,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11094,"byte_end":11108,"line_start":315,"line_end":315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11113,"byte_end":11116,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ Combining initial and subsequent indentation lets you format a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11121,"byte_end":11187,"line_start":317,"line_end":317,"column_start":5,"column_end":71}},{"value":"/ single paragraph as a bullet list:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11192,"byte_end":11230,"line_start":318,"line_end":318,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11235,"byte_end":11238,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11243,"byte_end":11256,"line_start":320,"line_end":320,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11261,"byte_end":11294,"line_start":321,"line_end":321,"column_start":5,"column_end":38}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11299,"byte_end":11325,"line_start":322,"line_end":322,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11330,"byte_end":11333,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(15)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11338,"byte_end":11372,"line_start":324,"line_end":324,"column_start":5,"column_end":39}},{"value":"/     .initial_indent(\"* \")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11377,"byte_end":11406,"line_start":325,"line_end":325,"column_start":5,"column_end":34}},{"value":"/     .subsequent_indent(\"  \");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11411,"byte_end":11444,"line_start":326,"line_end":326,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11449,"byte_end":11456,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11461,"byte_end":11464,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ [`self.subsequent_indent`]: #structfield.subsequent_indent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11469,"byte_end":11531,"line_start":329,"line_end":329,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11915,"byte_end":11926,"line_start":339,"line_end":339,"column_start":12,"column_end":23},"name":"break_words","qualname":"<Wrapper>::break_words","value":"pub fn break_words(Self, bool) -> Wrapper","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.break_words`]. This controls if words longer\n than `self.width` can be broken, or if they will be left\n sticking out into the right margin.","sig":null,"attributes":[{"value":"/ Change [`self.break_words`]. This controls if words longer","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11669,"byte_end":11731,"line_start":334,"line_end":334,"column_start":5,"column_end":67}},{"value":"/ than `self.width` can be broken, or if they will be left","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11736,"byte_end":11796,"line_start":335,"line_end":335,"column_start":5,"column_end":65}},{"value":"/ sticking out into the right margin.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11801,"byte_end":11840,"line_start":336,"line_end":336,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11845,"byte_end":11848,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ [`self.break_words`]: #structfield.break_words","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":11853,"byte_end":11903,"line_start":338,"line_end":338,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12833,"byte_end":12837,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"name":"fill","qualname":"<Wrapper>::fill","value":"pub fn fill(&Self, &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[{"value":"/ Fill a line of text at `self.width` characters. Strings are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12028,"byte_end":12091,"line_start":343,"line_end":343,"column_start":5,"column_end":68}},{"value":"/ wrapped based on their displayed width, not their size in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12096,"byte_end":12157,"line_start":344,"line_end":344,"column_start":5,"column_end":66}},{"value":"/ bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12162,"byte_end":12172,"line_start":345,"line_end":345,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12177,"byte_end":12180,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ The result is a string with newlines between each line. Use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12185,"byte_end":12248,"line_start":347,"line_end":347,"column_start":5,"column_end":68}},{"value":"/ the `wrap` method if you need access to the individual lines.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12253,"byte_end":12318,"line_start":348,"line_end":348,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12323,"byte_end":12326,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12331,"byte_end":12349,"line_start":350,"line_end":350,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12354,"byte_end":12357,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ This method simply joins the lines produced by `wrap_iter`. As","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12362,"byte_end":12428,"line_start":352,"line_end":352,"column_start":5,"column_end":71}},{"value":"/ such, it inherits the O(*n*) time and memory complexity where","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12433,"byte_end":12498,"line_start":353,"line_end":353,"column_start":5,"column_end":70}},{"value":"/ *n* is the input string length.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12503,"byte_end":12538,"line_start":354,"line_end":354,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12543,"byte_end":12546,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12551,"byte_end":12565,"line_start":356,"line_end":356,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12570,"byte_end":12573,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12578,"byte_end":12585,"line_start":358,"line_end":358,"column_start":5,"column_end":12}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12590,"byte_end":12616,"line_start":359,"line_end":359,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12621,"byte_end":12624,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ let wrapper = Wrapper::new(15);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12629,"byte_end":12664,"line_start":361,"line_end":361,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(wrapper.fill(\"Memory safety without garbage collection.\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12669,"byte_end":12742,"line_start":362,"line_end":362,"column_start":5,"column_end":78}},{"value":"/            \"Memory safety\\nwithout garbage\\ncollection.\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12747,"byte_end":12809,"line_start":363,"line_end":363,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":12814,"byte_end":12821,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14135,"byte_end":14139,"line_start":406,"line_end":406,"column_start":12,"column_end":16},"name":"wrap","qualname":"<Wrapper>::wrap","value":"pub fn wrap(&Self, &'a str) -> Vec<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[{"value":"/ Wrap a line of text at `self.width` characters. Strings are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13227,"byte_end":13290,"line_start":380,"line_end":380,"column_start":5,"column_end":68}},{"value":"/ wrapped based on their displayed width, not their size in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13295,"byte_end":13356,"line_start":381,"line_end":381,"column_start":5,"column_end":66}},{"value":"/ bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13361,"byte_end":13371,"line_start":382,"line_end":382,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13376,"byte_end":13379,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13384,"byte_end":13402,"line_start":384,"line_end":384,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13407,"byte_end":13410,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This method simply collects the lines produced by `wrap_iter`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13415,"byte_end":13481,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/ As such, it inherits the O(*n*) overall time and memory","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13486,"byte_end":13545,"line_start":387,"line_end":387,"column_start":5,"column_end":64}},{"value":"/ complexity where *n* is the input string length.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13550,"byte_end":13602,"line_start":388,"line_end":388,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13607,"byte_end":13610,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13615,"byte_end":13629,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13634,"byte_end":13637,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13642,"byte_end":13649,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13654,"byte_end":13680,"line_start":393,"line_end":393,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13685,"byte_end":13688,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let wrap15 = Wrapper::new(15);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13693,"byte_end":13727,"line_start":395,"line_end":395,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(wrap15.wrap(\"Concurrency without data races.\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13732,"byte_end":13794,"line_start":396,"line_end":396,"column_start":5,"column_end":67}},{"value":"/            vec![\"Concurrency\",","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13799,"byte_end":13833,"line_start":397,"line_end":397,"column_start":5,"column_end":39}},{"value":"/                 \"without data\",","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13838,"byte_end":13873,"line_start":398,"line_end":398,"column_start":5,"column_end":40}},{"value":"/                 \"races.\"]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13878,"byte_end":13909,"line_start":399,"line_end":399,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13914,"byte_end":13917,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ let wrap20 = Wrapper::new(20);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13922,"byte_end":13956,"line_start":401,"line_end":401,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(wrap20.wrap(\"Concurrency without data races.\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":13961,"byte_end":14023,"line_start":402,"line_end":402,"column_start":5,"column_end":67}},{"value":"/            vec![\"Concurrency without\",","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14028,"byte_end":14070,"line_start":403,"line_end":403,"column_start":5,"column_end":47}},{"value":"/                 \"data races.\"]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14075,"byte_end":14111,"line_start":404,"line_end":404,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14116,"byte_end":14123,"line_start":405,"line_end":405,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16065,"byte_end":16074,"line_start":452,"line_end":452,"column_start":12,"column_end":21},"name":"wrap_iter","qualname":"<Wrapper>::wrap_iter","value":"pub fn wrap_iter(&'w Self, &'a str) -> WrapIter","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings\n are wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[{"value":"/ Lazily wrap a line of text at `self.width` characters. Strings","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14239,"byte_end":14305,"line_start":410,"line_end":410,"column_start":5,"column_end":71}},{"value":"/ are wrapped based on their displayed width, not their size in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14310,"byte_end":14375,"line_start":411,"line_end":411,"column_start":5,"column_end":70}},{"value":"/ bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14380,"byte_end":14390,"line_start":412,"line_end":412,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14395,"byte_end":14398,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ The [`WordSplitter`] stored in [`self.splitter`] is used","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14403,"byte_end":14463,"line_start":414,"line_end":414,"column_start":5,"column_end":65}},{"value":"/ whenever when a word is too large to fit on the current line.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14468,"byte_end":14533,"line_start":415,"line_end":415,"column_start":5,"column_end":70}},{"value":"/ By changing the field, different hyphenation strategies can be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14538,"byte_end":14604,"line_start":416,"line_end":416,"column_start":5,"column_end":71}},{"value":"/ implemented.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14609,"byte_end":14625,"line_start":417,"line_end":417,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14630,"byte_end":14633,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14638,"byte_end":14656,"line_start":419,"line_end":419,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14661,"byte_end":14664,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ This method returns a [`WrapIter`] iterator which borrows this","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14669,"byte_end":14735,"line_start":421,"line_end":421,"column_start":5,"column_end":71}},{"value":"/ `Wrapper`. The algorithm used has a linear complexity, so","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14740,"byte_end":14801,"line_start":422,"line_end":422,"column_start":5,"column_end":66}},{"value":"/ getting the next line from the iterator will take O(*w*) time,","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14806,"byte_end":14872,"line_start":423,"line_end":423,"column_start":5,"column_end":71}},{"value":"/ where *w* is the wrapping width. Fully processing the iterator","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14877,"byte_end":14943,"line_start":424,"line_end":424,"column_start":5,"column_end":71}},{"value":"/ will take O(*n*) time for an input string of length *n*.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":14948,"byte_end":15008,"line_start":425,"line_end":425,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15013,"byte_end":15016,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ When no indentation is used, each line returned is a slice of","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15021,"byte_end":15086,"line_start":427,"line_end":427,"column_start":5,"column_end":70}},{"value":"/ the input string and the memory overhead is thus constant.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15091,"byte_end":15153,"line_start":428,"line_end":428,"column_start":5,"column_end":67}},{"value":"/ Otherwise new memory is allocated for each line returned.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15158,"byte_end":15219,"line_start":429,"line_end":429,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15224,"byte_end":15227,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15232,"byte_end":15246,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15251,"byte_end":15254,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15259,"byte_end":15266,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15271,"byte_end":15296,"line_start":434,"line_end":434,"column_start":5,"column_end":30}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15301,"byte_end":15327,"line_start":435,"line_end":435,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15332,"byte_end":15335,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ let wrap20 = Wrapper::new(20);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15340,"byte_end":15374,"line_start":437,"line_end":437,"column_start":5,"column_end":39}},{"value":"/ let mut wrap20_iter = wrap20.wrap_iter(\"Zero-cost abstractions.\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15379,"byte_end":15449,"line_start":438,"line_end":438,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Cow::from(\"Zero-cost\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15454,"byte_end":15519,"line_start":439,"line_end":439,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Cow::from(\"abstractions.\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15524,"byte_end":15593,"line_start":440,"line_end":440,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(wrap20_iter.next(), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15598,"byte_end":15639,"line_start":441,"line_end":441,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15644,"byte_end":15647,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let wrap25 = Wrapper::new(25);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15652,"byte_end":15686,"line_start":443,"line_end":443,"column_start":5,"column_end":39}},{"value":"/ let mut wrap25_iter = wrap25.wrap_iter(\"Zero-cost abstractions.\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15691,"byte_end":15761,"line_start":444,"line_end":444,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(wrap25_iter.next(), Some(Cow::from(\"Zero-cost abstractions.\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15766,"byte_end":15845,"line_start":445,"line_end":445,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(wrap25_iter.next(), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15850,"byte_end":15891,"line_start":446,"line_end":446,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15896,"byte_end":15903,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15908,"byte_end":15911,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ [`self.splitter`]: #structfield.splitter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15916,"byte_end":15960,"line_start":449,"line_end":449,"column_start":5,"column_end":49}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":15965,"byte_end":16010,"line_start":450,"line_end":450,"column_start":5,"column_end":50}},{"value":"/ [`WrapIter`]: struct.WrapIter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16015,"byte_end":16053,"line_start":451,"line_end":451,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17555,"byte_end":17569,"line_start":492,"line_end":492,"column_start":12,"column_end":26},"name":"into_wrap_iter","qualname":"<Wrapper>::into_wrap_iter","value":"pub fn into_wrap_iter(Self, &'a str) -> IntoWrapIter","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings\n are wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[{"value":"/ Lazily wrap a line of text at `self.width` characters. Strings","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16245,"byte_end":16311,"line_start":459,"line_end":459,"column_start":5,"column_end":71}},{"value":"/ are wrapped based on their displayed width, not their size in","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16316,"byte_end":16381,"line_start":460,"line_end":460,"column_start":5,"column_end":70}},{"value":"/ bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16386,"byte_end":16396,"line_start":461,"line_end":461,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16401,"byte_end":16404,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The [`WordSplitter`] stored in [`self.splitter`] is used","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16409,"byte_end":16469,"line_start":463,"line_end":463,"column_start":5,"column_end":65}},{"value":"/ whenever when a word is too large to fit on the current line.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16474,"byte_end":16539,"line_start":464,"line_end":464,"column_start":5,"column_end":70}},{"value":"/ By changing the field, different hyphenation strategies can be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16544,"byte_end":16610,"line_start":465,"line_end":465,"column_start":5,"column_end":71}},{"value":"/ implemented.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16615,"byte_end":16631,"line_start":466,"line_end":466,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16636,"byte_end":16639,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ # Complexities","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16644,"byte_end":16662,"line_start":468,"line_end":468,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16667,"byte_end":16670,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ This method consumes the `Wrapper` and returns a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16675,"byte_end":16727,"line_start":470,"line_end":470,"column_start":5,"column_end":57}},{"value":"/ [`IntoWrapIter`] iterator. Fully processing the iterator has","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16732,"byte_end":16796,"line_start":471,"line_end":471,"column_start":5,"column_end":69}},{"value":"/ the same O(*n*) time complexity as [`wrap_iter`], where *n* is","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16801,"byte_end":16867,"line_start":472,"line_end":472,"column_start":5,"column_end":71}},{"value":"/ the length of the input string.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16872,"byte_end":16907,"line_start":473,"line_end":473,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16912,"byte_end":16915,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16920,"byte_end":16934,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16939,"byte_end":16942,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16947,"byte_end":16954,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16959,"byte_end":16984,"line_start":478,"line_end":478,"column_start":5,"column_end":30}},{"value":"/ use textwrap::Wrapper;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":16989,"byte_end":17015,"line_start":479,"line_end":479,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17020,"byte_end":17023,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ let wrap20 = Wrapper::new(20);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17028,"byte_end":17062,"line_start":481,"line_end":481,"column_start":5,"column_end":39}},{"value":"/ let mut wrap20_iter = wrap20.into_wrap_iter(\"Zero-cost abstractions.\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17067,"byte_end":17142,"line_start":482,"line_end":482,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Cow::from(\"Zero-cost\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17147,"byte_end":17212,"line_start":483,"line_end":483,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Cow::from(\"abstractions.\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17217,"byte_end":17286,"line_start":484,"line_end":484,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(wrap20_iter.next(), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17291,"byte_end":17332,"line_start":485,"line_end":485,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17337,"byte_end":17344,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17349,"byte_end":17352,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ [`self.splitter`]: #structfield.splitter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17357,"byte_end":17401,"line_start":488,"line_end":488,"column_start":5,"column_end":49}},{"value":"/ [`WordSplitter`]: trait.WordSplitter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17406,"byte_end":17451,"line_start":489,"line_end":489,"column_start":5,"column_end":50}},{"value":"/ [`IntoWrapIter`]: struct.IntoWrapIter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17456,"byte_end":17502,"line_start":490,"line_end":490,"column_start":5,"column_end":51}},{"value":"/ [`wrap_iter`]: #method.wrap_iter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17507,"byte_end":17543,"line_start":491,"line_end":491,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18275,"byte_end":18287,"line_start":513,"line_end":513,"column_start":12,"column_end":24},"name":"IntoWrapIter","qualname":"::IntoWrapIter","value":"IntoWrapIter {  }","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":" An iterator over the lines of the input string which owns a\n `Wrapper`. An instance of `IntoWrapIter` is typically obtained\n through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].","sig":null,"attributes":[{"value":"/ An iterator over the lines of the input string which owns a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17786,"byte_end":17849,"line_start":503,"line_end":503,"column_start":1,"column_end":64}},{"value":"/ `Wrapper`. An instance of `IntoWrapIter` is typically obtained","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17850,"byte_end":17916,"line_start":504,"line_end":504,"column_start":1,"column_end":67}},{"value":"/ through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17917,"byte_end":17981,"line_start":505,"line_end":505,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17982,"byte_end":17985,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ Each call of `.next()` method yields a line wrapped in `Some` if the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":17986,"byte_end":18058,"line_start":507,"line_end":507,"column_start":1,"column_end":73}},{"value":"/ input hasn't been fully processed yet. Otherwise it returns `None`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18059,"byte_end":18130,"line_start":508,"line_end":508,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18131,"byte_end":18134,"line_start":509,"line_end":509,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18135,"byte_end":18171,"line_start":510,"line_end":510,"column_start":1,"column_end":37}},{"value":"/ [`Wrapper::into_wrap_iter`]: struct.Wrapper.html#method.into_wrap_iter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18172,"byte_end":18246,"line_start":511,"line_end":511,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":122},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":19007,"byte_end":19015,"line_start":535,"line_end":535,"column_start":12,"column_end":20},"name":"WrapIter","qualname":"::WrapIter","value":"WrapIter {  }","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" An iterator over the lines of the input string which borrows a\n `Wrapper`. An instance of `WrapIter` is typically obtained\n through the [`Wrapper::wrap_iter`] method.","sig":null,"attributes":[{"value":"/ An iterator over the lines of the input string which borrows a","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18584,"byte_end":18650,"line_start":526,"line_end":526,"column_start":1,"column_end":67}},{"value":"/ `Wrapper`. An instance of `WrapIter` is typically obtained","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18651,"byte_end":18713,"line_start":527,"line_end":527,"column_start":1,"column_end":63}},{"value":"/ through the [`Wrapper::wrap_iter`] method.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18714,"byte_end":18760,"line_start":528,"line_end":528,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18761,"byte_end":18764,"line_start":529,"line_end":529,"column_start":1,"column_end":4}},{"value":"/ Each call of `.next()` method yields a line wrapped in `Some` if the","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18765,"byte_end":18837,"line_start":530,"line_end":530,"column_start":1,"column_end":73}},{"value":"/ input hasn't been fully processed yet. Otherwise it returns `None`.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18838,"byte_end":18909,"line_start":531,"line_end":531,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18910,"byte_end":18913,"line_start":532,"line_end":532,"column_start":1,"column_end":4}},{"value":"/ [`Wrapper::wrap_iter`]: struct.Wrapper.html#method.wrap_iter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18914,"byte_end":18978,"line_start":533,"line_end":533,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25839,"byte_end":25848,"line_start":722,"line_end":722,"column_start":8,"column_end":17},"name":"termwidth","qualname":"::termwidth","value":"pub fn termwidth() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the current terminal width. If the terminal width cannot be\n determined (typically because the standard output is not connected\n to a terminal), a default width of 80 characters will be used.","sig":null,"attributes":[{"value":"/ Return the current terminal width. If the terminal width cannot be","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25184,"byte_end":25254,"line_start":703,"line_end":703,"column_start":1,"column_end":71}},{"value":"/ determined (typically because the standard output is not connected","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25255,"byte_end":25325,"line_start":704,"line_end":704,"column_start":1,"column_end":71}},{"value":"/ to a terminal), a default width of 80 characters will be used.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25326,"byte_end":25392,"line_start":705,"line_end":705,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25393,"byte_end":25396,"line_start":706,"line_end":706,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25397,"byte_end":25411,"line_start":707,"line_end":707,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25412,"byte_end":25415,"line_start":708,"line_end":708,"column_start":1,"column_end":4}},{"value":"/ Create a `Wrapper` for the current terminal with a two column","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25416,"byte_end":25481,"line_start":709,"line_end":709,"column_start":1,"column_end":66}},{"value":"/ margin:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25482,"byte_end":25493,"line_start":710,"line_end":710,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25494,"byte_end":25497,"line_start":711,"line_end":711,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25498,"byte_end":25511,"line_start":712,"line_end":712,"column_start":1,"column_end":14}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25512,"byte_end":25545,"line_start":713,"line_end":713,"column_start":1,"column_end":34}},{"value":"/ use textwrap::{Wrapper, NoHyphenation, termwidth};","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25546,"byte_end":25600,"line_start":714,"line_end":714,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25601,"byte_end":25604,"line_start":715,"line_end":715,"column_start":1,"column_end":4}},{"value":"/ let width = termwidth() - 4; // Two columns on each side.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25605,"byte_end":25666,"line_start":716,"line_end":716,"column_start":1,"column_end":62}},{"value":"/ let wrapper = Wrapper::with_splitter(width, NoHyphenation)","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25667,"byte_end":25729,"line_start":717,"line_end":717,"column_start":1,"column_end":63}},{"value":"/     .initial_indent(\"  \")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25730,"byte_end":25759,"line_start":718,"line_end":718,"column_start":1,"column_end":30}},{"value":"/     .subsequent_indent(\"  \");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25760,"byte_end":25793,"line_start":719,"line_end":719,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25794,"byte_end":25801,"line_start":720,"line_end":720,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"term_size\")","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25802,"byte_end":25831,"line_start":721,"line_end":721,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26786,"byte_end":26790,"line_start":748,"line_end":748,"column_start":8,"column_end":12},"name":"fill","qualname":"::fill","value":"pub fn fill(&str, usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[{"value":"/ Fill a line of text at `width` characters. Strings are wrapped","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25923,"byte_end":25989,"line_start":726,"line_end":726,"column_start":1,"column_end":67}},{"value":"/ based on their displayed width, not their size in bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":25990,"byte_end":26050,"line_start":727,"line_end":727,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26051,"byte_end":26054,"line_start":728,"line_end":728,"column_start":1,"column_end":4}},{"value":"/ The result is a string with newlines between each line. Use","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26055,"byte_end":26118,"line_start":729,"line_end":729,"column_start":1,"column_end":64}},{"value":"/ [`wrap`] if you need access to the individual lines or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26119,"byte_end":26177,"line_start":730,"line_end":730,"column_start":1,"column_end":59}},{"value":"/ [`wrap_iter`] for its iterator counterpart.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26178,"byte_end":26225,"line_start":731,"line_end":731,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26226,"byte_end":26229,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26230,"byte_end":26237,"line_start":733,"line_end":733,"column_start":1,"column_end":8}},{"value":"/ use textwrap::fill;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26238,"byte_end":26261,"line_start":734,"line_end":734,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26262,"byte_end":26265,"line_start":735,"line_end":735,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fill(\"Memory safety without garbage collection.\", 15),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26266,"byte_end":26335,"line_start":736,"line_end":736,"column_start":1,"column_end":70}},{"value":"/            \"Memory safety\\nwithout garbage\\ncollection.\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26336,"byte_end":26398,"line_start":737,"line_end":737,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26399,"byte_end":26406,"line_start":738,"line_end":738,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26407,"byte_end":26410,"line_start":739,"line_end":739,"column_start":1,"column_end":4}},{"value":"/ This function creates a Wrapper on the fly with default settings.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26411,"byte_end":26480,"line_start":740,"line_end":740,"column_start":1,"column_end":70}},{"value":"/ If you need to set a language corpus for automatic hyphenation, or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26481,"byte_end":26551,"line_start":741,"line_end":741,"column_start":1,"column_end":71}},{"value":"/ need to fill many strings, then it is suggested to create a Wrapper","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26552,"byte_end":26623,"line_start":742,"line_end":742,"column_start":1,"column_end":72}},{"value":"/ and call its [`fill` method].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26624,"byte_end":26657,"line_start":743,"line_end":743,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26658,"byte_end":26661,"line_start":744,"line_end":744,"column_start":1,"column_end":4}},{"value":"/ [`wrap`]: fn.wrap.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26662,"byte_end":26688,"line_start":745,"line_end":745,"column_start":1,"column_end":27}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26689,"byte_end":26725,"line_start":746,"line_end":746,"column_start":1,"column_end":37}},{"value":"/ [`fill` method]: struct.Wrapper.html#method.fill","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26726,"byte_end":26778,"line_start":747,"line_end":747,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27813,"byte_end":27817,"line_start":780,"line_end":780,"column_start":8,"column_end":12},"name":"wrap","qualname":"::wrap","value":"pub fn wrap(&str, usize) -> Vec<Cow<, str>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[{"value":"/ Wrap a line of text at `width` characters. Strings are wrapped","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26861,"byte_end":26927,"line_start":752,"line_end":752,"column_start":1,"column_end":67}},{"value":"/ based on their displayed width, not their size in bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26928,"byte_end":26988,"line_start":753,"line_end":753,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26989,"byte_end":26992,"line_start":754,"line_end":754,"column_start":1,"column_end":4}},{"value":"/ This function creates a Wrapper on the fly with default settings.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":26993,"byte_end":27062,"line_start":755,"line_end":755,"column_start":1,"column_end":70}},{"value":"/ If you need to set a language corpus for automatic hyphenation, or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27063,"byte_end":27133,"line_start":756,"line_end":756,"column_start":1,"column_end":71}},{"value":"/ need to wrap many strings, then it is suggested to create a Wrapper","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27134,"byte_end":27205,"line_start":757,"line_end":757,"column_start":1,"column_end":72}},{"value":"/ and call its [`wrap` method].","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27206,"byte_end":27239,"line_start":758,"line_end":758,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27240,"byte_end":27243,"line_start":759,"line_end":759,"column_start":1,"column_end":4}},{"value":"/ The result is a vector of strings. Use [`wrap_iter`] if you need an","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27244,"byte_end":27315,"line_start":760,"line_end":760,"column_start":1,"column_end":72}},{"value":"/ iterator version.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27316,"byte_end":27337,"line_start":761,"line_end":761,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27338,"byte_end":27341,"line_start":762,"line_end":762,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27342,"byte_end":27356,"line_start":763,"line_end":763,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27357,"byte_end":27360,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27361,"byte_end":27368,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ use textwrap::wrap;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27369,"byte_end":27392,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27393,"byte_end":27396,"line_start":767,"line_end":767,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(wrap(\"Concurrency without data races.\", 15),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27397,"byte_end":27456,"line_start":768,"line_end":768,"column_start":1,"column_end":60}},{"value":"/            vec![\"Concurrency\",","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27457,"byte_end":27491,"line_start":769,"line_end":769,"column_start":1,"column_end":35}},{"value":"/                 \"without data\",","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27492,"byte_end":27527,"line_start":770,"line_end":770,"column_start":1,"column_end":36}},{"value":"/                 \"races.\"]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27528,"byte_end":27559,"line_start":771,"line_end":771,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27560,"byte_end":27563,"line_start":772,"line_end":772,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(wrap(\"Concurrency without data races.\", 20),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27564,"byte_end":27623,"line_start":773,"line_end":773,"column_start":1,"column_end":60}},{"value":"/            vec![\"Concurrency without\",","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27624,"byte_end":27666,"line_start":774,"line_end":774,"column_start":1,"column_end":43}},{"value":"/                 \"data races.\"]);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27667,"byte_end":27703,"line_start":775,"line_end":775,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27704,"byte_end":27711,"line_start":776,"line_end":776,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27712,"byte_end":27715,"line_start":777,"line_end":777,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: fn.wrap_iter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27716,"byte_end":27752,"line_start":778,"line_end":778,"column_start":1,"column_end":37}},{"value":"/ [`wrap` method]: struct.Wrapper.html#method.wrap","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27753,"byte_end":27805,"line_start":779,"line_end":779,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":77},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29245,"byte_end":29254,"line_start":816,"line_end":816,"column_start":8,"column_end":17},"name":"wrap_iter","qualname":"::wrap_iter","value":"pub fn wrap_iter(&str, usize) -> IntoWrapIter<, HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in bytes.","sig":null,"attributes":[{"value":"/ Lazily wrap a line of text at `self.width` characters. Strings are","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27895,"byte_end":27965,"line_start":784,"line_end":784,"column_start":1,"column_end":71}},{"value":"/ wrapped based on their displayed width, not their size in bytes.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":27966,"byte_end":28034,"line_start":785,"line_end":785,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28035,"byte_end":28038,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ This function creates a Wrapper on the fly with default settings.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28039,"byte_end":28108,"line_start":787,"line_end":787,"column_start":1,"column_end":70}},{"value":"/ It then calls the [`into_wrap_iter`] method. Hence, the return","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28109,"byte_end":28175,"line_start":788,"line_end":788,"column_start":1,"column_end":67}},{"value":"/ value is an [`IntoWrapIter`], not a [`WrapIter`] as the function","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28176,"byte_end":28244,"line_start":789,"line_end":789,"column_start":1,"column_end":69}},{"value":"/ name would otherwise suggest.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28245,"byte_end":28278,"line_start":790,"line_end":790,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28279,"byte_end":28282,"line_start":791,"line_end":791,"column_start":1,"column_end":4}},{"value":"/ If you need to set a language corpus for automatic hyphenation, or","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28283,"byte_end":28353,"line_start":792,"line_end":792,"column_start":1,"column_end":71}},{"value":"/ need to wrap many strings, then it is suggested to create a Wrapper","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28354,"byte_end":28425,"line_start":793,"line_end":793,"column_start":1,"column_end":72}},{"value":"/ and call its [`wrap_iter`] or [`into_wrap_iter`] methods.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28426,"byte_end":28487,"line_start":794,"line_end":794,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28488,"byte_end":28491,"line_start":795,"line_end":795,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28492,"byte_end":28506,"line_start":796,"line_end":796,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28507,"byte_end":28510,"line_start":797,"line_end":797,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28511,"byte_end":28518,"line_start":798,"line_end":798,"column_start":1,"column_end":8}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28519,"byte_end":28544,"line_start":799,"line_end":799,"column_start":1,"column_end":26}},{"value":"/ use textwrap::wrap_iter;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28545,"byte_end":28573,"line_start":800,"line_end":800,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28574,"byte_end":28577,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ let mut wrap20_iter = wrap_iter(\"Zero-cost abstractions.\", 20);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28578,"byte_end":28645,"line_start":802,"line_end":802,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Cow::from(\"Zero-cost\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28646,"byte_end":28711,"line_start":803,"line_end":803,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(wrap20_iter.next(), Some(Cow::from(\"abstractions.\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28712,"byte_end":28781,"line_start":804,"line_end":804,"column_start":1,"column_end":70}},{"value":"/ assert_eq!(wrap20_iter.next(), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28782,"byte_end":28823,"line_start":805,"line_end":805,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28824,"byte_end":28827,"line_start":806,"line_end":806,"column_start":1,"column_end":4}},{"value":"/ let mut wrap25_iter = wrap_iter(\"Zero-cost abstractions.\", 25);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28828,"byte_end":28895,"line_start":807,"line_end":807,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(wrap25_iter.next(), Some(Cow::from(\"Zero-cost abstractions.\")));","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28896,"byte_end":28975,"line_start":808,"line_end":808,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(wrap25_iter.next(), None);","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":28976,"byte_end":29017,"line_start":809,"line_end":809,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29018,"byte_end":29025,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29026,"byte_end":29029,"line_start":811,"line_end":811,"column_start":1,"column_end":4}},{"value":"/ [`wrap_iter`]: struct.Wrapper.html#method.wrap_iter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29030,"byte_end":29085,"line_start":812,"line_end":812,"column_start":1,"column_end":56}},{"value":"/ [`into_wrap_iter`]: struct.Wrapper.html#method.into_wrap_iter","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29086,"byte_end":29151,"line_start":813,"line_end":813,"column_start":1,"column_end":66}},{"value":"/ [`IntoWrapIter`]: struct.IntoWrapIter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29152,"byte_end":29198,"line_start":814,"line_end":814,"column_start":1,"column_end":47}},{"value":"/ [`WrapIter`]: struct.WrapIter.html","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29199,"byte_end":29237,"line_start":815,"line_end":815,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30002,"byte_end":30008,"line_start":846,"line_end":846,"column_start":8,"column_end":14},"name":"indent","qualname":"::indent","value":"pub fn indent(&str, &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Add prefix to each non-empty line.","sig":null,"attributes":[{"value":"/ Add prefix to each non-empty line.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29357,"byte_end":29395,"line_start":820,"line_end":820,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29396,"byte_end":29399,"line_start":821,"line_end":821,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29400,"byte_end":29407,"line_start":822,"line_end":822,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29408,"byte_end":29433,"line_start":823,"line_end":823,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29434,"byte_end":29437,"line_start":824,"line_end":824,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\"Foo\\nBar\\n\", \"  \"), \"  Foo\\n  Bar\\n\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29438,"byte_end":29499,"line_start":825,"line_end":825,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29500,"byte_end":29507,"line_start":826,"line_end":826,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29508,"byte_end":29511,"line_start":827,"line_end":827,"column_start":1,"column_end":4}},{"value":"/ Empty lines (lines consisting only of whitespace) are not indented","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29512,"byte_end":29582,"line_start":828,"line_end":828,"column_start":1,"column_end":71}},{"value":"/ and the whitespace is replaced by a single newline (`\\n`):","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29583,"byte_end":29645,"line_start":829,"line_end":829,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29646,"byte_end":29649,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29650,"byte_end":29657,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29658,"byte_end":29683,"line_start":832,"line_end":832,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29684,"byte_end":29687,"line_start":833,"line_end":833,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\"Foo\\n\\nBar\\n  \\t  \\nBaz\\n\", \"  \"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29688,"byte_end":29745,"line_start":834,"line_end":834,"column_start":1,"column_end":58}},{"value":"/            \"  Foo\\n\\n  Bar\\n\\n  Baz\\n\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29746,"byte_end":29790,"line_start":835,"line_end":835,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29791,"byte_end":29798,"line_start":836,"line_end":836,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29799,"byte_end":29802,"line_start":837,"line_end":837,"column_start":1,"column_end":4}},{"value":"/ Leading and trailing whitespace on non-empty lines is kept","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29803,"byte_end":29865,"line_start":838,"line_end":838,"column_start":1,"column_end":63}},{"value":"/ unchanged:","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29866,"byte_end":29880,"line_start":839,"line_end":839,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29881,"byte_end":29884,"line_start":840,"line_end":840,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29885,"byte_end":29892,"line_start":841,"line_end":841,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29893,"byte_end":29918,"line_start":842,"line_end":842,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29919,"byte_end":29922,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\" \\t  Foo   \", \"  \"), \"   \\t  Foo   \\n\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29923,"byte_end":29986,"line_start":844,"line_end":844,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":29987,"byte_end":29994,"line_start":845,"line_end":845,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30625,"byte_end":30631,"line_start":869,"line_end":869,"column_start":8,"column_end":14},"name":"dedent","qualname":"::dedent","value":"pub fn dedent(&str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Removes common leading whitespace from each line.","sig":null,"attributes":[{"value":"/ Removes common leading whitespace from each line.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30291,"byte_end":30344,"line_start":858,"line_end":858,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30345,"byte_end":30348,"line_start":859,"line_end":859,"column_start":1,"column_end":4}},{"value":"/ This will look at each non-empty line and determine the maximum","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30349,"byte_end":30416,"line_start":860,"line_end":860,"column_start":1,"column_end":68}},{"value":"/ amount of whitespace that can be removed from the line.","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30417,"byte_end":30476,"line_start":861,"line_end":861,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30477,"byte_end":30480,"line_start":862,"line_end":862,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30481,"byte_end":30488,"line_start":863,"line_end":863,"column_start":1,"column_end":8}},{"value":"/ use textwrap::dedent;","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30489,"byte_end":30514,"line_start":864,"line_end":864,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30515,"byte_end":30518,"line_start":865,"line_end":865,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dedent(\"  1st line\\n  2nd line\\n\"),","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30519,"byte_end":30569,"line_start":866,"line_end":866,"column_start":1,"column_end":51}},{"value":"/            \"1st line\\n2nd line\\n\");","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30570,"byte_end":30609,"line_start":867,"line_end":867,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":30610,"byte_end":30617,"line_start":868,"line_end":868,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4038,"byte_end":4051,"line_start":118,"line_end":118,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4749,"byte_end":4763,"line_start":139,"line_end":139,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8532,"byte_end":8539,"line_start":244,"line_end":244,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9775,"byte_end":9782,"line_start":276,"line_end":276,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18420,"byte_end":18432,"line_start":518,"line_end":518,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":19173,"byte_end":19181,"line_start":540,"line_end":540,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":20130,"byte_end":20142,"line_start":571,"line_end":571,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":20801,"byte_end":20813,"line_start":588,"line_end":588,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4038,"byte_end":4051,"line_start":118,"line_end":118,"column_start":23,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":85},"to":{"krate":0,"index":11}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":4749,"byte_end":4763,"line_start":139,"line_end":139,"column_start":23,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":91},"to":{"krate":0,"index":11}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":8532,"byte_end":8539,"line_start":244,"line_end":244,"column_start":10,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":97},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":9775,"byte_end":9782,"line_start":276,"line_end":276,"column_start":35,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":97},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":18420,"byte_end":18432,"line_start":518,"line_end":518,"column_start":40,"column_end":52},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":113},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":19173,"byte_end":19181,"line_start":540,"line_end":540,"column_start":48,"column_end":56},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":122},"to":{"krate":2,"index":5281}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":20130,"byte_end":20142,"line_start":571,"line_end":571,"column_start":25,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":49},"to":{"krate":2,"index":6555}},{"span":{"file_name":"/Users/xhm/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.9.0/src/lib.rs","byte_start":20801,"byte_end":20813,"line_start":588,"line_end":588,"column_start":10,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}}]}